
Slave_Veeral_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  080039c4  080039c4  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039c4  080039c4  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080039cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001a4  08003b70  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08003b70  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114f7  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff2  00000000  00000000  000316cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000347d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002732c  00000000  00000000  000357e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001234a  00000000  00000000  0005cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110fa7  00000000  00000000  0006ee5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fe05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  0017fe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a4 	.word	0x200001a4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800399c 	.word	0x0800399c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a8 	.word	0x200001a8
 8000214:	0800399c 	.word	0x0800399c

08000218 <ControlInit>:
		-0.587785252,		-0.535826795,		-0.481753674,		-0.425779292,		-0.368124553,		-0.309016994,		-0.248689887,		-0.187381315,		-0.125333234,		-0.06279052

		};

void ControlInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	TIM7->PSC = 0; //Timer 7
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <ControlInit+0x44>)
 800021e:	2200      	movs	r2, #0
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = (uint16_t)(SystemCoreClock/((1+TIM7->PSC)*(5000))) - 1;
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <ControlInit+0x48>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <ControlInit+0x44>)
 8000228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800022a:	3301      	adds	r3, #1
 800022c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000230:	fb01 f303 	mul.w	r3, r1, r3
 8000234:	fbb2 f3f3 	udiv	r3, r2, r3
 8000238:	b29b      	uxth	r3, r3
 800023a:	1e5a      	subs	r2, r3, #1
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <ControlInit+0x44>)
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start_IT(&htim7);
 8000240:	4808      	ldr	r0, [pc, #32]	; (8000264 <ControlInit+0x4c>)
 8000242:	f002 fff5 	bl	8003230 <HAL_TIM_Base_Start_IT>

	HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D ); //Timer A,B,C and D of HRTIM1 counter start
 8000246:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <ControlInit+0x50>)
 800024c:	f001 fd53 	bl	8001cf6 <HAL_HRTIM_WaveformCountStart>

	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 ); //Timer A and B for AFE PWM
 8000250:	210f      	movs	r1, #15
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <ControlInit+0x50>)
 8000254:	f001 fcf5 	bl	8001c42 <HAL_HRTIM_WaveformOutputStart>

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40001400 	.word	0x40001400
 8000260:	20000198 	.word	0x20000198
 8000264:	200002c4 	.word	0x200002c4
 8000268:	200001c8 	.word	0x200001c8

0800026c <PSFBON>:
* Function Description: Function to start PSFB output waveform
* Input:
* Return:
*/
void PSFBON(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformCounterStart(&hhrtim1,HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D);
 8000270:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8000274:	4809      	ldr	r0, [pc, #36]	; (800029c <PSFBON+0x30>)
 8000276:	f001 fd3e 	bl	8001cf6 <HAL_HRTIM_WaveformCountStart>
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=500;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <PSFBON+0x34>)
 800027c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000280:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=500;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <PSFBON+0x34>)
 8000286:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800028a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 ); //Timer C and D for PSFB
 800028e:	21f0      	movs	r1, #240	; 0xf0
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <PSFBON+0x30>)
 8000292:	f001 fcd6 	bl	8001c42 <HAL_HRTIM_WaveformOutputStart>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200001c8 	.word	0x200001c8
 80002a0:	40016800 	.word	0x40016800

080002a4 <PSFBOFF>:
* Function Description: Function to stop PSFB output waveform
* Input:
* Return:
*/
void PSFBOFF(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 );
 80002a8:	21f0      	movs	r1, #240	; 0xf0
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <PSFBOFF+0x20>)
 80002ac:	f001 fcf6 	bl	8001c9c <HAL_HRTIM_WaveformOutputStop>

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=0;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <PSFBOFF+0x24>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=0;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <PSFBOFF+0x24>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200001c8 	.word	0x200001c8
 80002c8:	40016800 	.word	0x40016800

080002cc <Tim7_Execution>:
void Tim7_Execution(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	test_mode_count++;
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <Tim7_Execution+0x94>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <Tim7_Execution+0x94>)
 80002da:	701a      	strb	r2, [r3, #0]
	if(test_mode_count>=100)
 80002dc:	4b20      	ldr	r3, [pc, #128]	; (8000360 <Tim7_Execution+0x94>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b63      	cmp	r3, #99	; 0x63
 80002e2:	d902      	bls.n	80002ea <Tim7_Execution+0x1e>
	{
		test_mode_count =0;
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <Tim7_Execution+0x94>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
	}

	timer_period = HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR;
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <Tim7_Execution+0x98>)
 80002ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <Tim7_Execution+0x9c>)
 80002f2:	6013      	str	r3, [r2, #0]

	V_cmd = (R_sine_wave[test_mode_count]* mod_index + 1) * (timer_period/2);
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <Tim7_Execution+0x94>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	4a1c      	ldr	r2, [pc, #112]	; (800036c <Tim7_Execution+0xa0>)
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	ed93 7a00 	vldr	s14, [r3]
 8000302:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <Tim7_Execution+0xa4>)
 8000304:	edd3 7a00 	vldr	s15, [r3]
 8000308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800030c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <Tim7_Execution+0x9c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	085b      	lsrs	r3, r3, #1
 800031a:	ee07 3a90 	vmov	s15, r3
 800031e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <Tim7_Execution+0xa8>)
 8000328:	edc3 7a00 	vstr	s15, [r3]
	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, V_cmd*0.1);

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP3xR = V_cmd;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <Tim7_Execution+0xa8>)
 800032e:	edd3 7a00 	vldr	s15, [r3]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <Tim7_Execution+0x98>)
 8000334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000338:	ee17 2a90 	vmov	r2, s15
 800033c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP3xR = V_cmd;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <Tim7_Execution+0xa8>)
 8000342:	edd3 7a00 	vldr	s15, [r3]
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <Tim7_Execution+0x98>)
 8000348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800034c:	ee17 2a90 	vmov	r2, s15
 8000350:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	200001c0 	.word	0x200001c0
 8000364:	40016800 	.word	0x40016800
 8000368:	200001c4 	.word	0x200001c4
 800036c:	20000008 	.word	0x20000008
 8000370:	20000000 	.word	0x20000000
 8000374:	20000004 	.word	0x20000004

08000378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x5c>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <MX_GPIO_Init+0x5c>)
 8000384:	f043 0320 	orr.w	r3, r3, #32
 8000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_GPIO_Init+0x5c>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	f003 0320 	and.w	r3, r3, #32
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_GPIO_Init+0x5c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <MX_GPIO_Init+0x5c>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_GPIO_Init+0x5c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_GPIO_Init+0x5c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <MX_GPIO_Init+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_GPIO_Init+0x5c>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0b8      	sub	sp, #224	; 0xe0
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80003de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80003ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000404:	2260      	movs	r2, #96	; 0x60
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fabf 	bl	800398c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800040e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041e:	2224      	movs	r2, #36	; 0x24
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f003 fab2 	bl	800398c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2220      	movs	r2, #32
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 faac 	bl	800398c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000434:	4bc7      	ldr	r3, [pc, #796]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000436:	4ac8      	ldr	r2, [pc, #800]	; (8000758 <MX_HRTIM1_Init+0x380>)
 8000438:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800043a:	4bc6      	ldr	r3, [pc, #792]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000440:	4bc4      	ldr	r3, [pc, #784]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000446:	48c3      	ldr	r0, [pc, #780]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000448:	f000 ff98 	bl	800137c <HAL_HRTIM_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 8000452:	f000 fb50 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000456:	210c      	movs	r1, #12
 8000458:	48be      	ldr	r0, [pc, #760]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800045a:	f001 f85f 	bl	800151c <HAL_HRTIM_DLLCalibrationStart>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 8000464:	f000 fb47 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000468:	210a      	movs	r1, #10
 800046a:	48ba      	ldr	r0, [pc, #744]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800046c:	f001 f8ae 	bl	80015cc <HAL_HRTIM_PollForDLLCalibration>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_HRTIM1_Init+0xa2>
  {
    Error_Handler();
 8000476:	f000 fb3e 	bl	8000af6 <Error_Handler>
  }
  pTimeBaseCfg.Period = 34000;
 800047a:	f248 43d0 	movw	r3, #34000	; 0x84d0
 800047e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000488:	2305      	movs	r3, #5
 800048a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800048e:	2308      	movs	r3, #8
 8000490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000494:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000498:	461a      	mov	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	48ad      	ldr	r0, [pc, #692]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800049e:	f001 f8c9 	bl	8001634 <HAL_HRTIM_TimeBaseConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 80004a8:	f000 fb25 	bl	8000af6 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_GREATER;
 80004b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80004c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004ca:	461a      	mov	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	48a1      	ldr	r0, [pc, #644]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80004d0:	f001 f965 	bl	800179e <HAL_HRTIM_WaveformTimerControl>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_HRTIM1_Init+0x106>
  {
    Error_Handler();
 80004da:	f000 fb0c 	bl	8000af6 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80004de:	2300      	movs	r3, #0
 80004e0:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80004e6:	2300      	movs	r3, #0
 80004e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80004ea:	2300      	movs	r3, #0
 80004ec:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80004f2:	2300      	movs	r3, #0
 80004f4:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80004f6:	2300      	movs	r3, #0
 80004f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80004fa:	2300      	movs	r3, #0
 80004fc:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80004fe:	2300      	movs	r3, #0
 8000500:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000502:	2300      	movs	r3, #0
 8000504:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000506:	2300      	movs	r3, #0
 8000508:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800050a:	2300      	movs	r3, #0
 800050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000510:	2300      	movs	r3, #0
 8000512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000516:	2300      	movs	r3, #0
 8000518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000528:	2300      	movs	r3, #0
 800052a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800052e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_UPDATE;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000558:	461a      	mov	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	487d      	ldr	r0, [pc, #500]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800055e:	f001 f891 	bl	8001684 <HAL_HRTIM_WaveformTimerConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_HRTIM1_Init+0x194>
  {
    Error_Handler();
 8000568:	f000 fac5 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800056c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000570:	461a      	mov	r2, r3
 8000572:	2101      	movs	r1, #1
 8000574:	4877      	ldr	r0, [pc, #476]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000576:	f001 f885 	bl	8001684 <HAL_HRTIM_WaveformTimerConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_HRTIM1_Init+0x1ac>
  {
    Error_Handler();
 8000580:	f000 fab9 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000584:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000588:	461a      	mov	r2, r3
 800058a:	2102      	movs	r1, #2
 800058c:	4871      	ldr	r0, [pc, #452]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800058e:	f001 f879 	bl	8001684 <HAL_HRTIM_WaveformTimerConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_HRTIM1_Init+0x1c4>
  {
    Error_Handler();
 8000598:	f000 faad 	bl	8000af6 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80005a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a6:	461a      	mov	r2, r3
 80005a8:	2103      	movs	r1, #3
 80005aa:	486a      	ldr	r0, [pc, #424]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80005ac:	f001 f86a 	bl	8001684 <HAL_HRTIM_WaveformTimerConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_HRTIM1_Init+0x1e2>
  {
    Error_Handler();
 80005b6:	f000 fa9e 	bl	8000af6 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80005c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ca:	461a      	mov	r2, r3
 80005cc:	2104      	movs	r1, #4
 80005ce:	4861      	ldr	r0, [pc, #388]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80005d0:	f001 f858 	bl	8001684 <HAL_HRTIM_WaveformTimerConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_HRTIM1_Init+0x206>
  {
    Error_Handler();
 80005da:	f000 fa8c 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80005e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005e6:	2201      	movs	r2, #1
 80005e8:	2100      	movs	r1, #0
 80005ea:	485a      	ldr	r0, [pc, #360]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80005ec:	f001 f98a 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_HRTIM1_Init+0x222>
  {
    Error_Handler();
 80005f6:	f000 fa7e 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3;
 80005fa:	2303      	movs	r3, #3
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80005fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000602:	2204      	movs	r2, #4
 8000604:	2100      	movs	r1, #0
 8000606:	4853      	ldr	r0, [pc, #332]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000608:	f001 f97c 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_HRTIM1_Init+0x23e>
  {
    Error_Handler();
 8000612:	f000 fa70 	bl	8000af6 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 500;
 800061c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 800062a:	2300      	movs	r3, #0
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 500;
 800062e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8000638:	2300      	movs	r3, #0
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 800063c:	2300      	movs	r3, #0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8000640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000644:	461a      	mov	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	4842      	ldr	r0, [pc, #264]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800064a:	f001 f8db 	bl	8001804 <HAL_HRTIM_DeadTimeConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_HRTIM1_Init+0x280>
  {
    Error_Handler();
 8000654:	f000 fa4f 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	461a      	mov	r2, r3
 800065e:	2101      	movs	r1, #1
 8000660:	483c      	ldr	r0, [pc, #240]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000662:	f001 f8cf 	bl	8001804 <HAL_HRTIM_DeadTimeConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_HRTIM1_Init+0x298>
  {
    Error_Handler();
 800066c:	f000 fa43 	bl	8000af6 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 435;
 8000676:	f240 13b3 	movw	r3, #435	; 0x1b3
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.FallingValue = 435;
 800067c:	f240 13b3 	movw	r3, #435	; 0x1b3
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	461a      	mov	r2, r3
 8000688:	2102      	movs	r1, #2
 800068a:	4832      	ldr	r0, [pc, #200]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800068c:	f001 f8ba 	bl	8001804 <HAL_HRTIM_DeadTimeConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_HRTIM1_Init+0x2c2>
  {
    Error_Handler();
 8000696:	f000 fa2e 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	461a      	mov	r2, r3
 80006a0:	2103      	movs	r1, #3
 80006a2:	482c      	ldr	r0, [pc, #176]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80006a4:	f001 f8ae 	bl	8001804 <HAL_HRTIM_DeadTimeConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 80006ae:	f000 fa22 	bl	8000af6 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2201      	movs	r2, #1
 80006d6:	2100      	movs	r1, #0
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80006da:	f001 fa81 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_HRTIM1_Init+0x310>
  {
    Error_Handler();
 80006e4:	f000 fa07 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2204      	movs	r2, #4
 80006ec:	2101      	movs	r1, #1
 80006ee:	4819      	ldr	r0, [pc, #100]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 80006f0:	f001 fa76 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_HRTIM1_Init+0x326>
  {
    Error_Handler();
 80006fa:	f000 f9fc 	bl	8000af6 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80006fe:	2308      	movs	r3, #8
 8000700:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8000702:	2310      	movs	r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2210      	movs	r2, #16
 800070a:	2102      	movs	r1, #2
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 800070e:	f001 fa67 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 8000718:	f000 f9ed 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2240      	movs	r2, #64	; 0x40
 8000720:	2103      	movs	r1, #3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000724:	f001 fa5c 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_HRTIM1_Init+0x35a>
  {
    Error_Handler();
 800072e:	f000 f9e2 	bl	8000af6 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2202      	movs	r2, #2
 800073e:	2100      	movs	r1, #0
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_HRTIM1_Init+0x37c>)
 8000742:	f001 fa4d 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <MX_HRTIM1_Init+0x384>
  {
    Error_Handler();
 800074c:	f000 f9d3 	bl	8000af6 <Error_Handler>
 8000750:	e004      	b.n	800075c <MX_HRTIM1_Init+0x384>
 8000752:	bf00      	nop
 8000754:	200001c8 	.word	0x200001c8
 8000758:	40016800 	.word	0x40016800
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2208      	movs	r2, #8
 8000760:	2101      	movs	r1, #1
 8000762:	4876      	ldr	r0, [pc, #472]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000764:	f001 fa3c 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_HRTIM1_Init+0x39a>
  {
    Error_Handler();
 800076e:	f000 f9c2 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2220      	movs	r2, #32
 8000776:	2102      	movs	r1, #2
 8000778:	4870      	ldr	r0, [pc, #448]	; (800093c <MX_HRTIM1_Init+0x564>)
 800077a:	f001 fa31 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_HRTIM1_Init+0x3b0>
  {
    Error_Handler();
 8000784:	f000 f9b7 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	2103      	movs	r1, #3
 800078e:	486b      	ldr	r0, [pc, #428]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000790:	f001 fa26 	bl	8001be0 <HAL_HRTIM_WaveformOutputConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_HRTIM1_Init+0x3c6>
  {
    Error_Handler();
 800079a:	f000 f9ac 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800079e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007a2:	461a      	mov	r2, r3
 80007a4:	2101      	movs	r1, #1
 80007a6:	4865      	ldr	r0, [pc, #404]	; (800093c <MX_HRTIM1_Init+0x564>)
 80007a8:	f000 ff44 	bl	8001634 <HAL_HRTIM_TimeBaseConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_HRTIM1_Init+0x3de>
  {
    Error_Handler();
 80007b2:	f000 f9a0 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80007b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80007ba:	461a      	mov	r2, r3
 80007bc:	2101      	movs	r1, #1
 80007be:	485f      	ldr	r0, [pc, #380]	; (800093c <MX_HRTIM1_Init+0x564>)
 80007c0:	f000 ffed 	bl	800179e <HAL_HRTIM_WaveformTimerControl>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_HRTIM1_Init+0x3f6>
  {
    Error_Handler();
 80007ca:	f000 f994 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80007d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	4858      	ldr	r0, [pc, #352]	; (800093c <MX_HRTIM1_Init+0x564>)
 80007dc:	f001 f892 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_HRTIM1_Init+0x412>
  {
    Error_Handler();
 80007e6:	f000 f986 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3;
 80007ea:	2303      	movs	r3, #3
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80007ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f2:	2204      	movs	r2, #4
 80007f4:	2101      	movs	r1, #1
 80007f6:	4851      	ldr	r0, [pc, #324]	; (800093c <MX_HRTIM1_Init+0x564>)
 80007f8:	f001 f884 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_HRTIM1_Init+0x42e>
  {
    Error_Handler();
 8000802:	f000 f978 	bl	8000af6 <Error_Handler>
  }
  pTimeBaseCfg.Period = 8500;
 8000806:	f242 1334 	movw	r3, #8500	; 0x2134
 800080a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800080e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000812:	461a      	mov	r2, r3
 8000814:	2102      	movs	r1, #2
 8000816:	4849      	ldr	r0, [pc, #292]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000818:	f000 ff0c 	bl	8001634 <HAL_HRTIM_TimeBaseConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_HRTIM1_Init+0x44e>
  {
    Error_Handler();
 8000822:	f000 f968 	bl	8000af6 <Error_Handler>
  }
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8000826:	2300      	movs	r3, #0
 8000828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 800082c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000830:	461a      	mov	r2, r3
 8000832:	2102      	movs	r1, #2
 8000834:	4841      	ldr	r0, [pc, #260]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000836:	f000 ffb2 	bl	800179e <HAL_HRTIM_WaveformTimerControl>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_HRTIM1_Init+0x46c>
  {
    Error_Handler();
 8000840:	f000 f959 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800084c:	2201      	movs	r2, #1
 800084e:	2102      	movs	r1, #2
 8000850:	483a      	ldr	r0, [pc, #232]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000852:	f001 f857 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_HRTIM1_Init+0x488>
  {
    Error_Handler();
 800085c:	f000 f94b 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 8000860:	f241 039a 	movw	r3, #4250	; 0x109a
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000866:	2300      	movs	r3, #0
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800086e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000872:	2202      	movs	r2, #2
 8000874:	2102      	movs	r1, #2
 8000876:	4831      	ldr	r0, [pc, #196]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000878:	f001 f844 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_HRTIM1_Init+0x4ae>
  {
    Error_Handler();
 8000882:	f000 f938 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000886:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800088a:	461a      	mov	r2, r3
 800088c:	2103      	movs	r1, #3
 800088e:	482b      	ldr	r0, [pc, #172]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000890:	f000 fed0 	bl	8001634 <HAL_HRTIM_TimeBaseConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_HRTIM1_Init+0x4c6>
  {
    Error_Handler();
 800089a:	f000 f92c 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 800089e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80008a2:	461a      	mov	r2, r3
 80008a4:	2103      	movs	r1, #3
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <MX_HRTIM1_Init+0x564>)
 80008a8:	f000 ff79 	bl	800179e <HAL_HRTIM_WaveformTimerControl>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_HRTIM1_Init+0x4de>
  {
    Error_Handler();
 80008b2:	f000 f920 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80008ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008be:	2201      	movs	r2, #1
 80008c0:	2103      	movs	r1, #3
 80008c2:	481e      	ldr	r0, [pc, #120]	; (800093c <MX_HRTIM1_Init+0x564>)
 80008c4:	f001 f81e 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_HRTIM1_Init+0x4fa>
  {
    Error_Handler();
 80008ce:	f000 f912 	bl	8000af6 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 80008d2:	f241 039a 	movw	r3, #4250	; 0x109a
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80008d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008dc:	2202      	movs	r2, #2
 80008de:	2103      	movs	r1, #3
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <MX_HRTIM1_Init+0x564>)
 80008e2:	f001 f80f 	bl	8001904 <HAL_HRTIM_WaveformCompareConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_HRTIM1_Init+0x518>
  {
    Error_Handler();
 80008ec:	f000 f903 	bl	8000af6 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 80008f0:	f64f 73df 	movw	r3, #65503	; 0xffdf
 80008f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80008fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000902:	461a      	mov	r2, r3
 8000904:	2104      	movs	r1, #4
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000908:	f000 fe94 	bl	8001634 <HAL_HRTIM_TimeBaseConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_HRTIM1_Init+0x53e>
  {
    Error_Handler();
 8000912:	f000 f8f0 	bl	8000af6 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000916:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800091a:	461a      	mov	r2, r3
 800091c:	2104      	movs	r1, #4
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000920:	f000 ff3d 	bl	800179e <HAL_HRTIM_WaveformTimerControl>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_HRTIM1_Init+0x556>
  {
    Error_Handler();
 800092a:	f000 f8e4 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_HRTIM1_Init+0x564>)
 8000930:	f000 f826 	bl	8000980 <HAL_HRTIM_MspPostInit>

}
 8000934:	bf00      	nop
 8000936:	37e0      	adds	r7, #224	; 0xe0
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001c8 	.word	0x200001c8

08000940 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_HRTIM_MspInit+0x38>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10b      	bne.n	800096a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_HRTIM_MspInit+0x3c>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_HRTIM_MspInit+0x3c>)
 8000958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800095c:	6613      	str	r3, [r2, #96]	; 0x60
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_HRTIM_MspInit+0x3c>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40016800 	.word	0x40016800
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <HAL_HRTIM_MspPostInit+0xa0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d13a      	bne.n	8000a18 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_HRTIM_MspPostInit+0xa4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = PSFBH1_Pin|PSFBL1_Pin|PSFBH2_Pin|PSFBL2_Pin;
 80009d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80009e4:	230d      	movs	r3, #13
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <HAL_HRTIM_MspPostInit+0xa8>)
 80009f0:	f000 fb42 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AFEH1_Pin|AFEL1_Pin|AFEH2_Pin|AFEL2_Pin;
 80009f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000a06:	230d      	movs	r3, #13
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f000 fb30 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40016800 	.word	0x40016800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a30:	f000 f95b 	bl	8000cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f815 	bl	8000a62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f7ff fc9e 	bl	8000378 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 8000a3c:	f7ff fccc 	bl	80003d8 <MX_HRTIM1_Init>
  MX_TIM7_Init();
 8000a40:	f000 f8ce 	bl	8000be0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  ControlInit();
 8000a44:	f7ff fbe8 	bl	8000218 <ControlInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  PSFBON();
 8000a48:	f7ff fc10 	bl	800026c <PSFBON>
	  HAL_Delay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a50:	f000 f9bc 	bl	8000dcc <HAL_Delay>
	  PSFBOFF();
 8000a54:	f7ff fc26 	bl	80002a4 <PSFBOFF>
	  HAL_Delay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f000 f9b6 	bl	8000dcc <HAL_Delay>
	  PSFBON();
 8000a60:	e7f2      	b.n	8000a48 <main+0x1c>

08000a62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b094      	sub	sp, #80	; 0x50
 8000a66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	2238      	movs	r2, #56	; 0x38
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 ff8b 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f001 fdd1 	bl	800262c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aa0:	2355      	movs	r3, #85	; 0x55
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fe6d 	bl	8002794 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ac0:	f000 f819 	bl	8000af6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2104      	movs	r1, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 f96a 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000aea:	f000 f804 	bl	8000af6 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
}
 8000afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afe:	e7fe      	b.n	8000afe <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000b36:	f000 f97f 	bl	8000e38 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f000 f968 	bl	8000e10 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b40:	f001 fe18 	bl	8002774 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f8f8 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <TIM7_DAC_IRQHandler+0x14>)
 8000baa:	f002 fbb9 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */
  Tim7_Execution();
 8000bae:	f7ff fb8d 	bl	80002cc <Tim7_Execution>
  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002c4 	.word	0x200002c4

08000bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_TIM7_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000c12:	f002 fab5 	bl	8003180 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c1c:	f7ff ff6b 	bl	8000af6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM7_Init+0x64>)
 8000c2e:	f002 fdad 	bl	800378c <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f7ff ff5d 	bl	8000af6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200002c4 	.word	0x200002c4
 8000c48:	40001400 	.word	0x40001400

08000c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d113      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <HAL_TIM_Base_MspInit+0x48>)
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_TIM_Base_MspInit+0x48>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2037      	movs	r0, #55	; 0x37
 8000c7c:	f000 f9c7 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000c80:	2037      	movs	r0, #55	; 0x37
 8000c82:	f000 f9de 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40001400 	.word	0x40001400
 8000c94:	40021000 	.word	0x40021000

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ff8e 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 fe3d 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff feaf 	bl	8000a2c <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000cdc:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 8000ce0:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000ce4:	20000314 	.word	0x20000314

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f97f 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff fef8 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]

}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_InitTick+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d022      	beq.n	8000d76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_InitTick+0x6c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_InitTick+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f98a 	bl	800105e <HAL_SYSTICK_Config>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10f      	bne.n	8000d70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d809      	bhi.n	8000d6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d56:	2200      	movs	r2, #0
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5e:	f000 f956 	bl	800100e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0x70>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e007      	b.n	8000d7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e004      	b.n	8000d7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001a0 	.word	0x200001a0
 8000d88:	20000198 	.word	0x20000198
 8000d8c:	2000019c 	.word	0x2000019c

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x1c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_IncTick+0x20>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x1c>)
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000310 	.word	0x20000310
 8000db0:	200001a0 	.word	0x200001a0

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000310 	.word	0x20000310

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d004      	beq.n	8000df0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_Delay+0x40>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df0:	bf00      	nop
 8000df2:	f7ff ffdf 	bl	8000db4 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8f7      	bhi.n	8000df2 <HAL_Delay+0x26>
  {
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001a0 	.word	0x200001a0

08000e10 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 0202 	bic.w	r2, r3, #2
 8000e20:	4904      	ldr	r1, [pc, #16]	; (8000e34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40010030 	.word	0x40010030

08000e38 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000e42:	f023 0301 	bic.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010030 	.word	0x40010030

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff40 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff90 	bl	8000f4c <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5f 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff33 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa4 	bl	8000fb4 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001086:	e15a      	b.n	800133e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 814c 	beq.w	8001338 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a6 	beq.w	8001338 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_GPIO_Init+0x2e4>)
 80011ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f0:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_GPIO_Init+0x2e4>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6613      	str	r3, [r2, #96]	; 0x60
 80011f8:	4b58      	ldr	r3, [pc, #352]	; (800135c <HAL_GPIO_Init+0x2e4>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001204:	4a56      	ldr	r2, [pc, #344]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800122e:	d01f      	beq.n	8001270 <HAL_GPIO_Init+0x1f8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x2ec>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d019      	beq.n	800126c <HAL_GPIO_Init+0x1f4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1f0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x2f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2fc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e4>
 8001258:	2305      	movs	r3, #5
 800125a:	e00a      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 800125c:	2306      	movs	r3, #6
 800125e:	e008      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001260:	2304      	movs	r3, #4
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001264:	2303      	movs	r3, #3
 8001266:	e004      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001268:	2302      	movs	r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001270:	2300      	movs	r3, #0
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001282:	4937      	ldr	r1, [pc, #220]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b4:	4a30      	ldr	r2, [pc, #192]	; (8001378 <HAL_GPIO_Init+0x300>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x300>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x300>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_GPIO_Init+0x300>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x300>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	f47f ae9d 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800
 800136c:	48000c00 	.word	0x48000c00
 8001370:	48001000 	.word	0x48001000
 8001374:	48001400 	.word	0x48001400
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0be      	b.n	800150c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2202      	movs	r2, #2
 8001392:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d02e      	beq.n	8001438 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_HRTIM_Init+0x198>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10b      	bne.n	80013fc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_HRTIM_Init+0x19c>)
 80013e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e8:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_HRTIM_Init+0x19c>)
 80013ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013ee:	6613      	str	r3, [r2, #96]	; 0x60
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_HRTIM_Init+0x19c>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800140a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001420:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fa81 	bl	8000940 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001458:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]
 8001484:	e03e      	b.n	8001504 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001486:	7dfa      	ldrb	r2, [r7, #23]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3318      	adds	r3, #24
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800149a:	7dfa      	ldrb	r2, [r7, #23]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	331c      	adds	r3, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80014ae:	7dfa      	ldrb	r2, [r7, #23]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3320      	adds	r3, #32
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80014c2:	7dfa      	ldrb	r2, [r7, #23]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	3324      	adds	r3, #36	; 0x24
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80014d6:	7dfa      	ldrb	r2, [r7, #23]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80014ea:	7dfa      	ldrb	r2, [r7, #23]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3330      	adds	r3, #48	; 0x30
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	3301      	adds	r3, #1
 8001502:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d9bd      	bls.n	8001486 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40016800 	.word	0x40016800
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001530:	2302      	movs	r3, #2
 8001532:	e045      	b.n	80015c0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d114      	bne.n	8001576 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0202 	bic.w	r2, r2, #2
 800155c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8001574:	e01f      	b.n	80015b6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0202 	orr.w	r2, r2, #2
 8001586:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8001592:	f023 010c 	bic.w	r1, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80015d6:	f7ff fbed 	bl	8000db4 <HAL_GetTick>
 80015da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80015dc:	e014      	b.n	8001608 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d010      	beq.n	8001608 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80015e6:	f7ff fbe5 	bl	8000db4 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d302      	bcc.n	80015fc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2207      	movs	r2, #7
 8001600:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e011      	b.n	800162c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d1e1      	bne.n	80015de <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d101      	bne.n	8001650 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800164c:	2302      	movs	r3, #2
 800164e:	e015      	b.n	800167c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d104      	bne.n	8001668 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fb73 	bl	8001d4c <HRTIM_MasterBase_Config>
 8001666:	e004      	b.n	8001672 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fb9c 	bl	8001daa <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d101      	bne.n	80016a0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800169c:	2302      	movs	r3, #2
 800169e:	e07a      	b.n	8001796 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e073      	b.n	8001796 <HAL_HRTIM_WaveformTimerConfig+0x112>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b06      	cmp	r3, #6
 80016c2:	d104      	bne.n	80016ce <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fbaf 	bl	8001e2a <HRTIM_MasterWaveform_Config>
 80016cc:	e004      	b.n	80016d8 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fc46 	bl	8001f64 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4403      	add	r3, r0
 80016ea:	3320      	adds	r3, #32
 80016ec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4403      	add	r3, r0
 8001700:	3324      	adds	r3, #36	; 0x24
 8001702:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4403      	add	r3, r0
 8001716:	3328      	adds	r3, #40	; 0x28
 8001718:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68d9      	ldr	r1, [r3, #12]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4403      	add	r3, r0
 800172c:	332c      	adds	r3, #44	; 0x2c
 800172e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4403      	add	r3, r0
 8001742:	3330      	adds	r3, #48	; 0x30
 8001744:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 ff01 	bl	8002550 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d017      	beq.n	8001784 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d113      	bne.n	8001784 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3301      	adds	r3, #1
 8001764:	01db      	lsls	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	6809      	ldr	r1, [r1, #0]
 8001778:	431a      	orrs	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	01db      	lsls	r3, r3, #7
 8001780:	440b      	add	r3, r1
 8001782:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d101      	bne.n	80017ba <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
 80017b8:	e020      	b.n	80017fc <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e019      	b.n	80017fc <HAL_HRTIM_WaveformTimerControl+0x5e>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fd47 	bl	8002270 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 feb3 	bl	8002550 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d101      	bne.n	8001820 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	e067      	b.n	80018f0 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_HRTIM_DeadTimeConfig+0x2a>
 800182a:	2302      	movs	r3, #2
 800182c:	e060      	b.n	80018f0 <HAL_HRTIM_DeadTimeConfig+0xec>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001846:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	4313      	orrs	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8001888:	4013      	ands	r3, r2
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	4413      	add	r3, r2
 80018c4:	33b8      	adds	r3, #184	; 0xb8
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	01db      	lsls	r3, r3, #7
 80018d8:	440b      	add	r3, r1
 80018da:	33b8      	adds	r3, #184	; 0xb8
 80018dc:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	01ff0000 	.word	0x01ff0000
 8001900:	3c002000 	.word	0x3c002000

08001904 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d101      	bne.n	8001922 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800191e:	2302      	movs	r3, #2
 8001920:	e157      	b.n	8001bd2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800192c:	2302      	movs	r3, #2
 800192e:	e150      	b.n	8001bd2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d140      	bne.n	80019c8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3b01      	subs	r3, #1
 800194a:	2b07      	cmp	r3, #7
 800194c:	d82a      	bhi.n	80019a4 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	08001975 	.word	0x08001975
 8001958:	08001981 	.word	0x08001981
 800195c:	080019a5 	.word	0x080019a5
 8001960:	0800198d 	.word	0x0800198d
 8001964:	080019a5 	.word	0x080019a5
 8001968:	080019a5 	.word	0x080019a5
 800196c:	080019a5 	.word	0x080019a5
 8001970:	08001999 	.word	0x08001999
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	61da      	str	r2, [r3, #28]
        break;
 800197e:	e01a      	b.n	80019b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800198a:	e014      	b.n	80019b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8001996:	e00e      	b.n	80019b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80019a2:	e008      	b.n	80019b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2207      	movs	r2, #7
 80019a8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 80019b4:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b07      	cmp	r3, #7
 80019c0:	f040 80fe 	bne.w	8001bc0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e104      	b.n	8001bd2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	f200 80e3 	bhi.w	8001b98 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80019d2:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019f9 	.word	0x080019f9
 80019dc:	08001a0d 	.word	0x08001a0d
 80019e0:	08001b99 	.word	0x08001b99
 80019e4:	08001ac9 	.word	0x08001ac9
 80019e8:	08001b99 	.word	0x08001b99
 80019ec:	08001b99 	.word	0x08001b99
 80019f0:	08001b99 	.word	0x08001b99
 80019f4:	08001add 	.word	0x08001add
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	01db      	lsls	r3, r3, #7
 8001a04:	440b      	add	r3, r1
 8001a06:	339c      	adds	r3, #156	; 0x9c
 8001a08:	601a      	str	r2, [r3, #0]
        break;
 8001a0a:	e0d1      	b.n	8001bb0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	01db      	lsls	r3, r3, #7
 8001a18:	440b      	add	r3, r1
 8001a1a:	33a4      	adds	r3, #164	; 0xa4
 8001a1c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03f      	beq.n	8001aa6 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	01db      	lsls	r3, r3, #7
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6811      	ldr	r1, [r2, #0]
 8001a38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	01db      	lsls	r3, r3, #7
 8001a42:	440b      	add	r3, r1
 8001a44:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	01db      	lsls	r3, r3, #7
 8001a50:	4413      	add	r3, r2
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	68f9      	ldr	r1, [r7, #12]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3301      	adds	r3, #1
 8001a62:	01db      	lsls	r3, r3, #7
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a70:	d109      	bne.n	8001a86 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	01db      	lsls	r3, r3, #7
 8001a7e:	440b      	add	r3, r1
 8001a80:	339c      	adds	r3, #156	; 0x9c
 8001a82:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8001a84:	e091      	b.n	8001baa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a8e:	f040 808c 	bne.w	8001baa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	01db      	lsls	r3, r3, #7
 8001a9e:	440b      	add	r3, r1
 8001aa0:	33a8      	adds	r3, #168	; 0xa8
 8001aa2:	601a      	str	r2, [r3, #0]
         break;
 8001aa4:	e081      	b.n	8001baa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	6811      	ldr	r1, [r2, #0]
 8001ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	440b      	add	r3, r1
 8001ac4:	601a      	str	r2, [r3, #0]
         break;
 8001ac6:	e070      	b.n	8001baa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	440b      	add	r3, r1
 8001ad6:	33a8      	adds	r3, #168	; 0xa8
 8001ad8:	601a      	str	r2, [r3, #0]
        break;
 8001ada:	e069      	b.n	8001bb0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	440b      	add	r3, r1
 8001aea:	33ac      	adds	r3, #172	; 0xac
 8001aec:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03f      	beq.n	8001b76 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	01db      	lsls	r3, r3, #7
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	6811      	ldr	r1, [r2, #0]
 8001b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	01db      	lsls	r3, r3, #7
 8001b12:	440b      	add	r3, r1
 8001b14:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	01db      	lsls	r3, r3, #7
 8001b20:	4413      	add	r3, r2
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	6809      	ldr	r1, [r1, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	01db      	lsls	r3, r3, #7
 8001b36:	440b      	add	r3, r1
 8001b38:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b42:	d109      	bne.n	8001b58 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	440b      	add	r3, r1
 8001b52:	339c      	adds	r3, #156	; 0x9c
 8001b54:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8001b56:	e02a      	b.n	8001bae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001b60:	d125      	bne.n	8001bae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	440b      	add	r3, r1
 8001b70:	33a8      	adds	r3, #168	; 0xa8
 8001b72:	601a      	str	r2, [r3, #0]
         break;
 8001b74:	e01b      	b.n	8001bae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	01db      	lsls	r3, r3, #7
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6811      	ldr	r1, [r2, #0]
 8001b88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	01db      	lsls	r3, r3, #7
 8001b92:	440b      	add	r3, r1
 8001b94:	601a      	str	r2, [r3, #0]
         break;
 8001b96:	e00a      	b.n	8001bae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8001ba8:	e002      	b.n	8001bb0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8001bae:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b07      	cmp	r3, #7
 8001bba:	d101      	bne.n	8001bc0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e008      	b.n	8001bd2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e01d      	b.n	8001c3a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e016      	b.n	8001c3a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb84 	bl	8002330 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_HRTIM_WaveformOutputStart+0x18>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e01a      	b.n	8001c90 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_HRTIM_WaveformOutputStop+0x18>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e01a      	b.n	8001cea <HAL_HRTIM_WaveformOutputStop+0x4e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_HRTIM_WaveformCountStart+0x18>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e018      	b.n	8001d40 <HAL_HRTIM_WaveformCountStart+0x4a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f023 0307 	bic.w	r3, r3, #7
 8001d64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0318 	bic.w	r3, r3, #24
 8001d76:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	01db      	lsls	r3, r3, #7
 8001dc0:	4413      	add	r3, r2
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f023 0307 	bic.w	r3, r3, #7
 8001dcc:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0318 	bic.w	r3, r3, #24
 8001dde:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4413      	add	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	01db      	lsls	r3, r3, #7
 8001e06:	440b      	add	r3, r1
 8001e08:	3394      	adds	r3, #148	; 0x94
 8001e0a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	440b      	add	r3, r1
 8001e1a:	3398      	adds	r3, #152	; 0x98
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8001e44:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f023 0320 	bic.w	r3, r3, #32
 8001e4c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e5e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d003      	beq.n	8001e70 <HRTIM_MasterWaveform_Config+0x46>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d108      	bne.n	8001e82 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001e76:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e021      	b.n	8001ec6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d108      	bne.n	8001e9c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e90:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e014      	b.n	8001ec6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d108      	bne.n	8001eb6 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eaa:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e007      	b.n	8001ec6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f023 0320 	bic.w	r3, r3, #32
 8001ebc:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ecc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ede:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ef0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f02:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001f14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001f28:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3301      	adds	r3, #1
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	01db      	lsls	r3, r3, #7
 8001f8c:	440b      	add	r3, r1
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	01db      	lsls	r3, r3, #7
 8001f9a:	4413      	add	r3, r2
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	4413      	add	r3, r2
 8001faa:	33e8      	adds	r3, #232	; 0xe8
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	4413      	add	r3, r2
 8001fba:	33e4      	adds	r3, #228	; 0xe4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8001fc8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f023 0320 	bic.w	r3, r3, #32
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d003      	beq.n	8001fec <HRTIM_TimingUnitWaveform_Config+0x88>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d108      	bne.n	8001ffe <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	e021      	b.n	8002042 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d108      	bne.n	8002018 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e014      	b.n	8002042 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d108      	bne.n	8002032 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	e007      	b.n	8002042 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f023 0320 	bic.w	r3, r3, #32
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	4313      	orrs	r3, r2
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	4313      	orrs	r3, r2
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	4313      	orrs	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	4313      	orrs	r3, r2
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	4313      	orrs	r3, r2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ac:	d103      	bne.n	80020b6 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	4313      	orrs	r3, r2
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d6:	4313      	orrs	r3, r2
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	4313      	orrs	r3, r2
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800210c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	6a3a      	ldr	r2, [r7, #32]
 8002126:	4313      	orrs	r3, r2
 8002128:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002132:	d004      	beq.n	800213e <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800213c:	d103      	bne.n	8002146 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d108      	bne.n	8002158 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800214c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	4313      	orrs	r3, r2
 8002156:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800215e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	4313      	orrs	r3, r2
 8002168:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d850      	bhi.n	8002218 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	08002195 	.word	0x08002195
 8002180:	080021ab 	.word	0x080021ab
 8002184:	080021c1 	.word	0x080021c1
 8002188:	080021d7 	.word	0x080021d7
 800218c:	080021ed 	.word	0x080021ed
 8002190:	08002203 	.word	0x08002203
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800219a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61fb      	str	r3, [r7, #28]
      break;
 80021a8:	e037      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61fb      	str	r3, [r7, #28]
      break;
 80021be:	e02c      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61fb      	str	r3, [r7, #28]
      break;
 80021d4:	e021      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]
      break;
 80021ea:	e016      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]
      break;
 8002200:	e00b      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002208:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	019b      	lsls	r3, r3, #6
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4313      	orrs	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
      break;
 8002216:	e000      	b.n	800221a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8002218:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	01db      	lsls	r3, r3, #7
 8002224:	4413      	add	r3, r2
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	01db      	lsls	r3, r3, #7
 8002232:	4413      	add	r3, r2
 8002234:	33e8      	adds	r3, #232	; 0xe8
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	4413      	add	r3, r2
 8002244:	33e4      	adds	r3, #228	; 0xe4
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	01db      	lsls	r3, r3, #7
 8002252:	4413      	add	r3, r2
 8002254:	33d4      	adds	r3, #212	; 0xd4
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002264:	bf00      	nop
 8002266:	372c      	adds	r7, #44	; 0x2c
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	01db      	lsls	r3, r3, #7
 8002284:	4413      	add	r3, r2
 8002286:	33ec      	adds	r3, #236	; 0xec
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022a6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80022ca:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11a      	bne.n	8002314 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f023 0302 	bic.w	r3, r3, #2
 80022f6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	01db      	lsls	r3, r3, #7
 800231c:	4413      	add	r3, r2
 800231e:	33ec      	adds	r3, #236	; 0xec
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]

}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	01db      	lsls	r3, r3, #7
 800234a:	4413      	add	r3, r2
 800234c:	33e4      	adds	r3, #228	; 0xe4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	01db      	lsls	r3, r3, #7
 800235a:	4413      	add	r3, r2
 800235c:	33b8      	adds	r3, #184	; 0xb8
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]

  switch (Output)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002368:	f000 8088 	beq.w	800247c <HRTIM_OutputConfig+0x14c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002372:	f200 8098 	bhi.w	80024a6 <HRTIM_OutputConfig+0x176>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d06b      	beq.n	8002456 <HRTIM_OutputConfig+0x126>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	f200 808f 	bhi.w	80024a6 <HRTIM_OutputConfig+0x176>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238e:	d075      	beq.n	800247c <HRTIM_OutputConfig+0x14c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002396:	f200 8086 	bhi.w	80024a6 <HRTIM_OutputConfig+0x176>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a0:	d059      	beq.n	8002456 <HRTIM_OutputConfig+0x126>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d87d      	bhi.n	80024a6 <HRTIM_OutputConfig+0x176>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d065      	beq.n	800247c <HRTIM_OutputConfig+0x14c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d877      	bhi.n	80024a6 <HRTIM_OutputConfig+0x176>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d849      	bhi.n	8002450 <HRTIM_OutputConfig+0x120>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d071      	beq.n	80024a6 <HRTIM_OutputConfig+0x176>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	2b1f      	cmp	r3, #31
 80023c8:	d86d      	bhi.n	80024a6 <HRTIM_OutputConfig+0x176>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <HRTIM_OutputConfig+0xa0>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	08002457 	.word	0x08002457
 80023d4:	0800247d 	.word	0x0800247d
 80023d8:	080024a7 	.word	0x080024a7
 80023dc:	08002457 	.word	0x08002457
 80023e0:	080024a7 	.word	0x080024a7
 80023e4:	080024a7 	.word	0x080024a7
 80023e8:	080024a7 	.word	0x080024a7
 80023ec:	0800247d 	.word	0x0800247d
 80023f0:	080024a7 	.word	0x080024a7
 80023f4:	080024a7 	.word	0x080024a7
 80023f8:	080024a7 	.word	0x080024a7
 80023fc:	080024a7 	.word	0x080024a7
 8002400:	080024a7 	.word	0x080024a7
 8002404:	080024a7 	.word	0x080024a7
 8002408:	080024a7 	.word	0x080024a7
 800240c:	08002457 	.word	0x08002457
 8002410:	080024a7 	.word	0x080024a7
 8002414:	080024a7 	.word	0x080024a7
 8002418:	080024a7 	.word	0x080024a7
 800241c:	080024a7 	.word	0x080024a7
 8002420:	080024a7 	.word	0x080024a7
 8002424:	080024a7 	.word	0x080024a7
 8002428:	080024a7 	.word	0x080024a7
 800242c:	080024a7 	.word	0x080024a7
 8002430:	080024a7 	.word	0x080024a7
 8002434:	080024a7 	.word	0x080024a7
 8002438:	080024a7 	.word	0x080024a7
 800243c:	080024a7 	.word	0x080024a7
 8002440:	080024a7 	.word	0x080024a7
 8002444:	080024a7 	.word	0x080024a7
 8002448:	080024a7 	.word	0x080024a7
 800244c:	0800247d 	.word	0x0800247d
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d127      	bne.n	80024a6 <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	01db      	lsls	r3, r3, #7
 8002462:	440b      	add	r3, r1
 8002464:	33bc      	adds	r3, #188	; 0xbc
 8002466:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	01db      	lsls	r3, r3, #7
 8002474:	440b      	add	r3, r1
 8002476:	33c0      	adds	r3, #192	; 0xc0
 8002478:	601a      	str	r2, [r3, #0]
      break;
 800247a:	e015      	b.n	80024a8 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	01db      	lsls	r3, r3, #7
 8002488:	440b      	add	r3, r1
 800248a:	33c4      	adds	r3, #196	; 0xc4
 800248c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	01db      	lsls	r3, r3, #7
 800249a:	440b      	add	r3, r1
 800249c:	33c8      	adds	r3, #200	; 0xc8
 800249e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80024a0:	2310      	movs	r3, #16
 80024a2:	61bb      	str	r3, [r7, #24]
      break;
 80024a4:	e000      	b.n	80024a8 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 80024a6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80024a8:	22fe      	movs	r2, #254	; 0xfe
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	4313      	orrs	r3, r2
 8002506:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d111      	bne.n	8002534 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4313      	orrs	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	01db      	lsls	r3, r3, #7
 800253c:	4413      	add	r3, r2
 800253e:	33e4      	adds	r3, #228	; 0xe4
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d85e      	bhi.n	800261e <HRTIM_ForceRegistersUpdate+0xce>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HRTIM_ForceRegistersUpdate+0x18>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	0800259b 	.word	0x0800259b
 800256c:	080025b1 	.word	0x080025b1
 8002570:	080025c7 	.word	0x080025c7
 8002574:	080025dd 	.word	0x080025dd
 8002578:	080025f3 	.word	0x080025f3
 800257c:	08002609 	.word	0x08002609
 8002580:	08002585 	.word	0x08002585
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002598:	e042      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0202 	orr.w	r2, r2, #2
 80025aa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80025ae:	e037      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0204 	orr.w	r2, r2, #4
 80025c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80025c4:	e02c      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80025da:	e021      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0210 	orr.w	r2, r2, #16
 80025ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80025f0:	e016      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002606:	e00b      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002618:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800261c:	e000      	b.n	8002620 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800261e:	bf00      	nop
  }
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d141      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d131      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800264e:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002660:	4a41      	ldr	r2, [pc, #260]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2232      	movs	r2, #50	; 0x32
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267e:	e002      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002692:	d102      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d158      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e057      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b2:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026bc:	e04d      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d141      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c6:	4b28      	ldr	r3, [pc, #160]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d131      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026da:	4a23      	ldr	r2, [pc, #140]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2232      	movs	r2, #50	; 0x32
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	e002      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d102      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d112      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e011      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002748:	e007      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002758:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40007000 	.word	0x40007000
 800276c:	20000198 	.word	0x20000198
 8002770:	431bde83 	.word	0x431bde83

08002774 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2fe      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b97      	ldr	r3, [pc, #604]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b94      	ldr	r3, [pc, #592]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3e>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e2d9      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a84      	ldr	r2, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b78      	ldr	r3, [pc, #480]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a77      	ldr	r2, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a74      	ldr	r2, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fab2 	bl	8000db4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe faae 	bl	8000db4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e29e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fa9e 	bl	8000db4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fa9a 	bl	8000db4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e28a      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x136>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_OscConfig+0x13c>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11f      	bne.n	8002910 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x154>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e25d      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4946      	ldr	r1, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fa0b 	bl	8000d1c <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d043      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e249      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3c      	ldr	r2, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fa46 	bl	8000db4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fa42 	bl	8000db4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e232      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	492d      	ldr	r1, [pc, #180]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e01a      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fa22 	bl	8000db4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe fa1e 	bl	8000db4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e20e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e0>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d041      	beq.n	8002a26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f9fb 	bl	8000db4 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe f9f7 	bl	8000db4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1e7      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCC_OscConfig+0x22e>
 80029e2:	e020      	b.n	8002a26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe f9de 	bl	8000db4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fa:	e00d      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe f9da 	bl	8000db4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d906      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	2000019c 	.word	0x2000019c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a18:	4b8c      	ldr	r3, [pc, #560]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ea      	bne.n	80029fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80a6 	beq.w	8002b80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a38:	4b84      	ldr	r3, [pc, #528]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2b4>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a7e      	ldr	r2, [pc, #504]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	4b79      	ldr	r3, [pc, #484]	; (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	; (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe f997 	bl	8000db4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe f993 	bl	8000db4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e183      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x32e>
 8002ab0:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac0:	e024      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d110      	bne.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002aca:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a5e      	ldr	r2, [pc, #376]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002aec:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a56      	ldr	r2, [pc, #344]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe f94e 	bl	8000db4 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f94a 	bl	8000db4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e138      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ed      	beq.n	8002b1c <HAL_RCC_OscConfig+0x388>
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe f937 	bl	8000db4 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe f933 	bl	8000db4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e121      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ed      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b94:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f906 	bl	8000db4 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7fe f902 	bl	8000db4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0f2      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x418>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe f8e9 	bl	8000db4 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7fe f8e5 	bl	8000db4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0d5      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80c9 	beq.w	8002da2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f000 8083 	beq.w	8002d24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d15e      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe f8bf 	bl	8000db4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f8bb 	bl	8000db4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d905      	bls.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ab      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	4b55      	ldr	r3, [pc, #340]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ec      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c60:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <HAL_RCC_OscConfig+0x61c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a11      	ldr	r1, [r2, #32]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c7a:	0212      	lsls	r2, r2, #8
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0552      	lsls	r2, r2, #21
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8e:	0852      	lsrs	r2, r2, #1
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0652      	lsls	r2, r2, #25
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c9a:	06d2      	lsls	r2, r2, #27
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4943      	ldr	r1, [pc, #268]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a40      	ldr	r2, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f87a 	bl	8000db4 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe f876 	bl	8000db4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e066      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x530>
 8002ce2:	e05e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f860 	bl	8000db4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe f85c 	bl	8000db4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e04c      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4924      	ldr	r1, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
 8002d22:	e03e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e039      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d12c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d123      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	019f800c 	.word	0x019f800c
 8002db4:	feeefffc 	.word	0xfeeefffc

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e11e      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b91      	ldr	r3, [pc, #580]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b8e      	ldr	r3, [pc, #568]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	498c      	ldr	r1, [pc, #560]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b8a      	ldr	r3, [pc, #552]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e106      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d073      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0f4      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e24:	f000 f966 	bl	80030f4 <RCC_GetSysClockFreqFromPLLSource>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d93f      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e32:	4b7a      	ldr	r3, [pc, #488]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d033      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d12f      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e52:	4b72      	ldr	r3, [pc, #456]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5a:	4a70      	ldr	r2, [pc, #448]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e024      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0c6      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b66      	ldr	r3, [pc, #408]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0be      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e90:	f000 f8ce 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d909      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea6:	4a5d      	ldr	r2, [pc, #372]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4957      	ldr	r1, [pc, #348]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fd ff76 	bl	8000db4 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fd ff72 	bl	8000db4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e095      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a42      	ldr	r2, [pc, #264]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f24:	4b3d      	ldr	r3, [pc, #244]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d21d      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 020f 	bic.w	r2, r3, #15
 8002f70:	4929      	ldr	r1, [pc, #164]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f78:	f7fd ff1c 	bl	8000db4 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fd ff18 	bl	8000db4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03b      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1ed      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4917      	ldr	r1, [pc, #92]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490f      	ldr	r1, [pc, #60]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe2:	f000 f825 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490c      	ldr	r1, [pc, #48]	; (8003024 <HAL_RCC_ClockConfig+0x26c>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x270>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fe88 	bl	8000d1c <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
 8003020:	04c4b400 	.word	0x04c4b400
 8003024:	080039b4 	.word	0x080039b4
 8003028:	20000198 	.word	0x20000198
 800302c:	2000019c 	.word	0x2000019c

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d102      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e047      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d102      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e03e      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d136      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d10c      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	68d2      	ldr	r2, [r2, #12]
 8003090:	0a12      	lsrs	r2, r2, #8
 8003092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	617b      	str	r3, [r7, #20]
      break;
 800309c:	e00c      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	0a12      	lsrs	r2, r2, #8
 80030ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
      break;
 80030b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0e5b      	lsrs	r3, r3, #25
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e001      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030d8:	693b      	ldr	r3, [r7, #16]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	016e3600 	.word	0x016e3600

080030f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3301      	adds	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d10c      	bne.n	8003132 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003122:	68d2      	ldr	r2, [r2, #12]
 8003124:	0a12      	lsrs	r2, r2, #8
 8003126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	617b      	str	r3, [r7, #20]
    break;
 8003130:	e00c      	b.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	0a12      	lsrs	r2, r2, #8
 8003140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    break;
 800314a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0e5b      	lsrs	r3, r3, #25
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003166:	687b      	ldr	r3, [r7, #4]
}
 8003168:	4618      	mov	r0, r3
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	016e3600 	.word	0x016e3600
 800317c:	00f42400 	.word	0x00f42400

08003180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e049      	b.n	8003226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fd50 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 fa30 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e054      	b.n	80032f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_TIM_Base_Start_IT+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003272:	d01d      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_TIM_Base_Start_IT+0xd4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_TIM_Base_Start_IT+0xd8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_TIM_Base_Start_IT+0xdc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_Base_Start_IT+0xe0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_TIM_Base_Start_IT+0xe4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_TIM_Base_Start_IT+0xe8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d115      	bne.n	80032dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_TIM_Base_Start_IT+0xec>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d015      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d011      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e008      	b.n	80032ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e000      	b.n	80032f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40013400 	.word	0x40013400
 8003314:	40014000 	.word	0x40014000
 8003318:	40015000 	.word	0x40015000
 800331c:	00010007 	.word	0x00010007

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0202 	mvn.w	r2, #2
 8003354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f93b 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f92d 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f93e 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f915 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f907 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f918 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0208 	mvn.w	r2, #8
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2204      	movs	r2, #4
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8ef 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8e1 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8f2 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d020      	beq.n	8003468 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0210 	mvn.w	r2, #16
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2208      	movs	r2, #8
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8c9 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8bb 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8cc 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f899 	bl	80035be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa09 	bl	80038cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa01 	bl	80038e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00c      	beq.n	8003502 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f886 	bl	800360e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00c      	beq.n	8003526 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0220 	mvn.w	r2, #32
 800351e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f9c9 	bl	80038b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f9d5 	bl	80038f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9cd 	bl	8003908 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9c5 	bl	800391c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9bd 	bl	8003930 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <TIM_Base_SetConfig+0x144>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d017      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d013      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a49      	ldr	r2, [pc, #292]	; (800376c <TIM_Base_SetConfig+0x148>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00f      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a48      	ldr	r2, [pc, #288]	; (8003770 <TIM_Base_SetConfig+0x14c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a47      	ldr	r2, [pc, #284]	; (8003774 <TIM_Base_SetConfig+0x150>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a46      	ldr	r2, [pc, #280]	; (8003778 <TIM_Base_SetConfig+0x154>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0x48>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a45      	ldr	r2, [pc, #276]	; (800377c <TIM_Base_SetConfig+0x158>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a39      	ldr	r2, [pc, #228]	; (8003768 <TIM_Base_SetConfig+0x144>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d023      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d01f      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <TIM_Base_SetConfig+0x148>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01b      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a35      	ldr	r2, [pc, #212]	; (8003770 <TIM_Base_SetConfig+0x14c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d017      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a34      	ldr	r2, [pc, #208]	; (8003774 <TIM_Base_SetConfig+0x150>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a33      	ldr	r2, [pc, #204]	; (8003778 <TIM_Base_SetConfig+0x154>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <TIM_Base_SetConfig+0x15c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a32      	ldr	r2, [pc, #200]	; (8003784 <TIM_Base_SetConfig+0x160>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <TIM_Base_SetConfig+0x164>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0xaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <TIM_Base_SetConfig+0x158>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <TIM_Base_SetConfig+0x144>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <TIM_Base_SetConfig+0x110>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <TIM_Base_SetConfig+0x154>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x110>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <TIM_Base_SetConfig+0x15c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x110>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a19      	ldr	r2, [pc, #100]	; (8003784 <TIM_Base_SetConfig+0x160>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x110>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_Base_SetConfig+0x164>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x110>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <TIM_Base_SetConfig+0x158>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f023 0201 	bic.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]
  }
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40013400 	.word	0x40013400
 800377c:	40015000 	.word	0x40015000
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e074      	b.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a34      	ldr	r2, [pc, #208]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a31      	ldr	r2, [pc, #196]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d022      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d01d      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d018      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10c      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40015000 	.word	0x40015000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40014000 	.word	0x40014000

080038b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4d0d      	ldr	r5, [pc, #52]	; (800397c <__libc_init_array+0x38>)
 8003948:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	2600      	movs	r6, #0
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	4d0b      	ldr	r5, [pc, #44]	; (8003984 <__libc_init_array+0x40>)
 8003956:	4c0c      	ldr	r4, [pc, #48]	; (8003988 <__libc_init_array+0x44>)
 8003958:	f000 f820 	bl	800399c <_init>
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	2600      	movs	r6, #0
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080039c4 	.word	0x080039c4
 8003980:	080039c4 	.word	0x080039c4
 8003984:	080039c4 	.word	0x080039c4
 8003988:	080039c8 	.word	0x080039c8

0800398c <memset>:
 800398c:	4402      	add	r2, r0
 800398e:	4603      	mov	r3, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	f803 1b01 	strb.w	r1, [r3], #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr


Slave_Veeral_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e084  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  0800e25c  0800e25c  0001e25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea80  0800ea80  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea88  0800ea88  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea88  0800ea88  0001ea88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea8c  0800ea8c  0001ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800ea90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  200001c4  0800ec54  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  0800ec54  00020c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fae9  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059c4  00000000  00000000  0004fcdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002468  00000000  00000000  000556a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e0  00000000  00000000  00057b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007513  00000000  00000000  00059cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031084  00000000  00000000  00061203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013de70  00000000  00000000  00092287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d00f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b68  00000000  00000000  001d0148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e244 	.word	0x0800e244

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800e244 	.word	0x0800e244

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <DAC_Update>:
* Input: NONE
* Output: NONE
*
*/
uint32_t DAC_Update(uint8_t signal)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	float out,gain,offset;
	switch(signal)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	f200 80d8 	bhi.w	8000f1c <DAC_Update+0x1c4>
 8000d6c:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <DAC_Update+0x1c>)
 8000d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d72:	bf00      	nop
 8000d74:	08000d95 	.word	0x08000d95
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000e15 	.word	0x08000e15
 8000d80:	08000e55 	.word	0x08000e55
 8000d84:	08000e93 	.word	0x08000e93
 8000d88:	08000eb5 	.word	0x08000eb5
 8000d8c:	08000ee7 	.word	0x08000ee7
 8000d90:	08000efb 	.word	0x08000efb
	{
		case(1):
			offset = 0.0f; //TBD
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[IAFE].Gain * ConfigPara.calFactor[IAFE].corFac);
 8000d9a:	4b67      	ldr	r3, [pc, #412]	; (8000f38 <DAC_Update+0x1e0>)
 8000d9c:	edd3 6a00 	vldr	s13, [r3]
 8000da0:	4b66      	ldr	r3, [pc, #408]	; (8000f3c <DAC_Update+0x1e4>)
 8000da2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <DAC_Update+0x1e4>)
 8000da8:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8000dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db4:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Iafe[procValue] * gain + offset;
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <DAC_Update+0x1e8>)
 8000dba:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dce:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000dd2:	e0a3      	b.n	8000f1c <DAC_Update+0x1c4>
		case(2):
			offset = 0.0f; //TBD
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[VSUP].Gain * ConfigPara.calFactor[VSUP].corFac);
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <DAC_Update+0x1e0>)
 8000ddc:	edd3 6a00 	vldr	s13, [r3]
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <DAC_Update+0x1e4>)
 8000de2:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8000de6:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <DAC_Update+0x1e4>)
 8000de8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8000dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df4:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Vsup[procValue] * gain + offset;
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <DAC_Update+0x1ec>)
 8000dfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e06:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e12:	e083      	b.n	8000f1c <DAC_Update+0x1c4>

		case(3):
			offset = 0.0f; //TBD
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[ISUP].Gain * ConfigPara.calFactor[ISUP].corFac);
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <DAC_Update+0x1e0>)
 8000e1c:	edd3 6a00 	vldr	s13, [r3]
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <DAC_Update+0x1e4>)
 8000e22:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8000e26:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <DAC_Update+0x1e4>)
 8000e28:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8000e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e34:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Isup[procValue] * gain + offset;
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <DAC_Update+0x1f0>)
 8000e3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e52:	e063      	b.n	8000f1c <DAC_Update+0x1c4>

		case(4):
			offset = 0.0f; //TBD
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[ISUP].Gain * ConfigPara.calFactor[ISUP].corFac);
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <DAC_Update+0x1e0>)
 8000e5c:	edd3 6a00 	vldr	s13, [r3]
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <DAC_Update+0x1e4>)
 8000e62:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8000e66:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <DAC_Update+0x1e4>)
 8000e68:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8000e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e74:	edc7 7a03 	vstr	s15, [r7, #12]
			out = DutyRef_R * 1/* gain*/ + offset;
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <DAC_Update+0x1f4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e84:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8000e90:	e044      	b.n	8000f1c <DAC_Update+0x1c4>
		case (5):
			out = (uint16_t)status1.bits.sHealthStatus * 3500;
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <DAC_Update+0x1f8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eae:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000eb2:	e033      	b.n	8000f1c <DAC_Update+0x1c4>
		case (6):
			out = (uint16_t)V_cmd*0.1;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <DAC_Update+0x1fc>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ebe:	ee17 3a90 	vmov	r3, s15
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faf9 	bl	80004bc <__aeabi_i2d>
 8000eca:	a319      	add	r3, pc, #100	; (adr r3, 8000f30 <DAC_Update+0x1d8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb5e 	bl	8000590 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fd6a 	bl	80009b4 <__aeabi_d2f>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	617b      	str	r3, [r7, #20]
		break;
 8000ee4:	e01a      	b.n	8000f1c <DAC_Update+0x1c4>
		case(7):
			out = (uint16_t)Adc_Avg_Buffer[VBUS];
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <DAC_Update+0x200>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef4:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000ef8:	e010      	b.n	8000f1c <DAC_Update+0x1c4>
		case(8):
		out = (uint16_t)fault3.bits.driver_not_ready * 3500;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <DAC_Update+0x204>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000f1a:	bf00      	nop
	}
	return (uint32_t) out;
 8000f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	9999999a 	.word	0x9999999a
 8000f34:	3fb99999 	.word	0x3fb99999
 8000f38:	2000044c 	.word	0x2000044c
 8000f3c:	2000029c 	.word	0x2000029c
 8000f40:	20000470 	.word	0x20000470
 8000f44:	20000458 	.word	0x20000458
 8000f48:	20000464 	.word	0x20000464
 8000f4c:	200004cc 	.word	0x200004cc
 8000f50:	2000054c 	.word	0x2000054c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000268 	.word	0x20000268
 8000f5c:	20000538 	.word	0x20000538

08000f60 <DAC_Out>:
* Input: NONE
* Output: NONE
*
*/
void DAC_Out(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

	dac1 = 8;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <DAC_Out+0x50>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	701a      	strb	r2, [r3, #0]
	dac2 = 5;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <DAC_Out+0x54>)
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	701a      	strb	r2, [r3, #0]
	DAC_value1 = (unsigned int) DAC_Update(dac1);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <DAC_Out+0x50>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff feef 	bl	8000d58 <DAC_Update>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <DAC_Out+0x58>)
 8000f7e:	6013      	str	r3, [r2, #0]
	DAC_value2 = (unsigned int) DAC_Update(dac2);
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <DAC_Out+0x54>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fee7 	bl	8000d58 <DAC_Update>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <DAC_Out+0x5c>)
 8000f8e:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value1);
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <DAC_Out+0x58>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <DAC_Out+0x60>)
 8000f9a:	f006 f853 	bl	8007044 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAC_value2);
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <DAC_Out+0x5c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <DAC_Out+0x60>)
 8000fa8:	f006 f84c 	bl	8007044 <HAL_DAC_SetValue>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001e0 	.word	0x200001e0
 8000fb4:	200001e1 	.word	0x200001e1
 8000fb8:	200004d8 	.word	0x200004d8
 8000fbc:	200004dc 	.word	0x200004dc
 8000fc0:	20000810 	.word	0x20000810

08000fc4 <eeprom_crc_generate>:
configParameters configpara_receive;
writeStructureToEeprom((uint8_t*)&ConfigPara, sizeof(ConfigPara));
readStructurefromEeprom((uint8_t*)&configpara_receive, sizeof(configpara_receive));
*/
uint16_t eeprom_crc_generate(uint8_t* config_pointer, uint16_t size_of_structure)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	const uint16_t generator_polynomial = 0x1021;
 8000fd0:	f241 0321 	movw	r3, #4129	; 0x1021
 8000fd4:	81fb      	strh	r3, [r7, #14]
	uint16_t crc = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i=0; i<size_of_structure; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	82bb      	strh	r3, [r7, #20]
 8000fde:	e025      	b.n	800102c <eeprom_crc_generate+0x68>
	{
		crc ^= (uint16_t)((*(config_pointer + i)) << 8);
 8000fe0:	8abb      	ldrh	r3, [r7, #20]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	8afb      	ldrh	r3, [r7, #22]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	82fb      	strh	r3, [r7, #22]

		for (int j = 0; j < 8; j++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e012      	b.n	8001020 <eeprom_crc_generate+0x5c>
		{
			if((crc & 0x8000) != 0)
 8000ffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da08      	bge.n	8001014 <eeprom_crc_generate+0x50>
				crc = (uint16_t)((crc << 1) ^ generator_polynomial);
 8001002:	8afb      	ldrh	r3, [r7, #22]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b21a      	sxth	r2, r3
 8001008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100c:	4053      	eors	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	82fb      	strh	r3, [r7, #22]
 8001012:	e002      	b.n	800101a <eeprom_crc_generate+0x56>
			else
				crc <<= 1;
 8001014:	8afb      	ldrh	r3, [r7, #22]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3301      	adds	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b07      	cmp	r3, #7
 8001024:	dde9      	ble.n	8000ffa <eeprom_crc_generate+0x36>
	for (uint16_t i=0; i<size_of_structure; i++)
 8001026:	8abb      	ldrh	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	82bb      	strh	r3, [r7, #20]
 800102c:	8aba      	ldrh	r2, [r7, #20]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3d5      	bcc.n	8000fe0 <eeprom_crc_generate+0x1c>
		}
	}
	return crc;
 8001034:	8afb      	ldrh	r3, [r7, #22]
}
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <writeStructureToEeprom>:

void writeStructureToEeprom(uint8_t* config_pointer, uint16_t size_of_structure)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(&hi2c4 , EEPROM_ADDR1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)config_pointer, size_of_structure,300) != HAL_OK){
 8001050:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	2200      	movs	r2, #0
 8001062:	21a0      	movs	r1, #160	; 0xa0
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <writeStructureToEeprom+0x88>)
 8001066:	f008 f8fd 	bl	8009264 <HAL_I2C_Mem_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <writeStructureToEeprom+0x3c>
//			Error_Handler();
		fault3.bits.eeprom_fault = 1;
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <writeStructureToEeprom+0x8c>)
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 800107a:	200c      	movs	r0, #12
 800107c:	f002 fe9a 	bl	8003db4 <add_error_to_list>
		}
	uint16_t eeprom_crc_write = eeprom_crc_generate(config_pointer,size_of_structure);
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff9d 	bl	8000fc4 <eeprom_crc_generate>
 800108a:	4603      	mov	r3, r0
 800108c:	81fb      	strh	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c4 , EEPROM_ADDR1, 1000, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&eeprom_crc_write, 2,300) != HAL_OK){
 800108e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2302      	movs	r3, #2
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f107 030e 	add.w	r3, r7, #14
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2302      	movs	r3, #2
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	21a0      	movs	r1, #160	; 0xa0
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <writeStructureToEeprom+0x88>)
 80010a8:	f008 f8dc 	bl	8009264 <HAL_I2C_Mem_Write>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <writeStructureToEeprom+0x7e>
		fault3.bits.eeprom_fault = 1;
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <writeStructureToEeprom+0x8c>)
 80010b4:	7813      	ldrb	r3, [r2, #0]
 80010b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ba:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 80010bc:	200c      	movs	r0, #12
 80010be:	f002 fe79 	bl	8003db4 <add_error_to_list>
//				Error_Handler();
			}

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000928 	.word	0x20000928
 80010d0:	20000538 	.word	0x20000538

080010d4 <readStructurefromEeprom>:

uint8_t readStructurefromEeprom(uint8_t* config_pointer, uint16_t size_of_structure)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
	uint16_t crc_received_from_eeprom;
	if(HAL_I2C_IsDeviceReady(&hi2c4, EEPROM_ADDR1, 10, 200) == HAL_OK){
 80010e0:	23c8      	movs	r3, #200	; 0xc8
 80010e2:	220a      	movs	r2, #10
 80010e4:	21a0      	movs	r1, #160	; 0xa0
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <readStructurefromEeprom+0xb0>)
 80010e8:	f008 faea 	bl	80096c0 <HAL_I2C_IsDeviceReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d119      	bne.n	8001126 <readStructurefromEeprom+0x52>
			if(HAL_I2C_Mem_Read(&hi2c4, EEPROM_ADDR1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t *)config_pointer, size_of_structure,300) != HAL_OK){
 80010f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	2200      	movs	r2, #0
 8001104:	21a0      	movs	r1, #160	; 0xa0
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <readStructurefromEeprom+0xb0>)
 8001108:	f008 f9c0 	bl	800948c <HAL_I2C_Mem_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <readStructurefromEeprom+0x52>
//				Error_Handler();
				fault3.bits.eeprom_fault = 1;
 8001112:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <readStructurefromEeprom+0xb4>)
 8001114:	7813      	ldrb	r3, [r2, #0]
 8001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111a:	7013      	strb	r3, [r2, #0]
				add_error_to_list(12);
 800111c:	200c      	movs	r0, #12
 800111e:	f002 fe49 	bl	8003db4 <add_error_to_list>
				 return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e029      	b.n	800117a <readStructurefromEeprom+0xa6>
			}
		}
	if(HAL_I2C_Mem_Read(&hi2c4, EEPROM_ADDR1, 1000, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&crc_received_from_eeprom, 2,300) != HAL_OK){
 8001126:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2302      	movs	r3, #2
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2302      	movs	r3, #2
 8001138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113c:	21a0      	movs	r1, #160	; 0xa0
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <readStructurefromEeprom+0xb0>)
 8001140:	f008 f9a4 	bl	800948c <HAL_I2C_Mem_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <readStructurefromEeprom+0x8a>
//		Error_Handler();
		fault3.bits.eeprom_fault = 1;
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <readStructurefromEeprom+0xb4>)
 800114c:	7813      	ldrb	r3, [r2, #0]
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 8001154:	200c      	movs	r0, #12
 8001156:	f002 fe2d 	bl	8003db4 <add_error_to_list>
		 return 0;
 800115a:	2300      	movs	r3, #0
 800115c:	e00d      	b.n	800117a <readStructurefromEeprom+0xa6>
	}
	uint16_t generated_crc = eeprom_crc_generate(config_pointer,size_of_structure);
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff2e 	bl	8000fc4 <eeprom_crc_generate>
 8001168:	4603      	mov	r3, r0
 800116a:	81fb      	strh	r3, [r7, #14]
	if(generated_crc == crc_received_from_eeprom)
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	89fa      	ldrh	r2, [r7, #14]
 8001170:	429a      	cmp	r2, r3
 8001172:	d101      	bne.n	8001178 <readStructurefromEeprom+0xa4>
		return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <readStructurefromEeprom+0xa6>
	else
		return 0;
 8001178:	2300      	movs	r3, #0

}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000928 	.word	0x20000928
 8001188:	20000538 	.word	0x20000538

0800118c <para_load>:

/*
This function is used to load the default parameter and save them to FRAM
*/
void para_load()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if (readStructurefromEeprom((uint8_t*)&ConfigPara, sizeof(ConfigPara)) == 0) {
 8001190:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <para_load+0x48>)
 8001196:	f7ff ff9d 	bl	80010d4 <readStructurefromEeprom>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d116      	bne.n	80011ce <para_load+0x42>
		 ParaInit();
 80011a0:	f001 f806 	bl	80021b0 <ParaInit>
		 if(fault3.bits.eeprom_fault == 0)
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <para_load+0x4c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <para_load+0x2e>
		 {remove_error_from_list(12);}
 80011b2:	200c      	movs	r0, #12
 80011b4:	f002 fe1a 	bl	8003dec <remove_error_from_list>
		 else if (fault3.bits.eeprom_fault == 1)
		 {add_error_to_list(12);}
	}else{
		 {/*Action to be added*/}
	}
}
 80011b8:	e009      	b.n	80011ce <para_load+0x42>
		 else if (fault3.bits.eeprom_fault == 1)
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <para_load+0x4c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <para_load+0x42>
		 {add_error_to_list(12);}
 80011c8:	200c      	movs	r0, #12
 80011ca:	f002 fdf3 	bl	8003db4 <add_error_to_list>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000029c 	.word	0x2000029c
 80011d8:	20000538 	.word	0x20000538

080011dc <para_save>:

/*
This function is used to save the present parameters to the FRAM
*/
void para_save()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	writeStructureToEeprom((uint8_t*)&ConfigPara,sizeof(ConfigPara));
 80011e0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <para_save+0x14>)
 80011e6:	f7ff ff2d 	bl	8001044 <writeStructureToEeprom>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000029c 	.word	0x2000029c

080011f4 <getDigiIn>:
}

/* Function description: Function to read pin state of the digital input
 */
uint8_t getDigiIn(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
			ss2 = 0;
		}
	}*/

	// function not in use anymore
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <parameterCalculations_ADC1>:
* Function Description: Function to calculate Average of ADC1 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC1(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[VBUS]=0,Adc_Sum_Buffer[IAFE]=0, Adc_Sum_Buffer[IPSFB]=0, Adc_Sum_Buffer[VOUT]=0;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]

	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e017      	b.n	8001258 <parameterCalculations_ADC1+0x54>
	{
		Adc_Sum_Buffer[VBUS] += Adc1_Buffer[i*ADC1_CHN + 0];
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4914      	ldr	r1, [pc, #80]	; (8001284 <parameterCalculations_ADC1+0x80>)
 8001232:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001236:	4413      	add	r3, r2
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800123a:	6013      	str	r3, [r2, #0]
		//Adc_Sum_Buffer[IAFE] += Adc1_Buffer[i*ADC1_CHN + 1];		//This section is not mounted in slave PCB
		Adc_Sum_Buffer[IPSFB] += Adc1_Buffer[i*ADC1_CHN + 2];
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	3202      	adds	r2, #2
 8001246:	490f      	ldr	r1, [pc, #60]	; (8001284 <parameterCalculations_ADC1+0x80>)
 8001248:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800124c:	4413      	add	r3, r2
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001250:	6093      	str	r3, [r2, #8]
	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b03      	cmp	r3, #3
 800125c:	dde4      	ble.n	8001228 <parameterCalculations_ADC1+0x24>
	//	Adc_Sum_Buffer[VOUT] += Adc1_Buffer[i*ADC1_CHN + 3];		//This section is not mounted in slave PCB
	}
	Adc_Avg_Buffer[VBUS] = Adc_Sum_Buffer[VBUS]/ADC_SAMPLE_SIZE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <parameterCalculations_ADC1+0x84>)
 8001266:	6013      	str	r3, [r2, #0]
	//Adc_Avg_Buffer[IAFE] = Adc_Sum_Buffer[IAFE]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	Adc_Avg_Buffer[IPSFB] = Adc_Sum_Buffer[IPSFB]/ADC_SAMPLE_SIZE;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <parameterCalculations_ADC1+0x84>)
 8001270:	6093      	str	r3, [r2, #8]
	//Adc_Avg_Buffer[VOUT] = Adc_Sum_Buffer[VOUT]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000023c 	.word	0x2000023c
 8001284:	200001e4 	.word	0x200001e4
 8001288:	20000268 	.word	0x20000268

0800128c <parameterCalculations_ADC2>:
* Function Description: Function to calculate Average of ADC2 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC2(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[IOUT]=0,Adc_Sum_Buffer[VSUP]=0,Adc_Sum_Buffer[ISUP]=0,Adc_Sum_Buffer[TPSFB]=0;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]

	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e017      	b.n	80012e0 <parameterCalculations_ADC2+0x54>
		Adc_Sum_Buffer[IOUT] += Adc2_Buffer[i*ADC2_CHN + 0];
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4914      	ldr	r1, [pc, #80]	; (800130c <parameterCalculations_ADC2+0x80>)
 80012ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012be:	4413      	add	r3, r2
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012c2:	6113      	str	r3, [r2, #16]
	//	Adc_Sum_Buffer[VSUP] += Adc2_Buffer[i*ADC2_CHN + 1];	//This section is not mounted in slave PCB
	//	Adc_Sum_Buffer[ISUP] += Adc2_Buffer[i*ADC2_CHN + 2];		//This section is not mounted in slave PCB
		Adc_Sum_Buffer[TPSFB] += Adc2_Buffer[i*ADC2_CHN + 3];
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	3203      	adds	r2, #3
 80012ce:	490f      	ldr	r1, [pc, #60]	; (800130c <parameterCalculations_ADC2+0x80>)
 80012d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012d8:	61d3      	str	r3, [r2, #28]
	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	dde4      	ble.n	80012b0 <parameterCalculations_ADC2+0x24>
	}
	Adc_Avg_Buffer[IOUT] = Adc_Sum_Buffer[IOUT]/ADC_SAMPLE_SIZE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <parameterCalculations_ADC2+0x84>)
 80012ee:	6113      	str	r3, [r2, #16]
	//Adc_Avg_Buffer[VSUP] = Adc_Sum_Buffer[VSUP]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	//Adc_Avg_Buffer[ISUP] = Adc_Sum_Buffer[ISUP]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	Adc_Avg_Buffer[TPSFB] = Adc_Sum_Buffer[TPSFB]/ADC_SAMPLE_SIZE;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <parameterCalculations_ADC2+0x84>)
 80012f8:	61d3      	str	r3, [r2, #28]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2000023c 	.word	0x2000023c
 800130c:	20000204 	.word	0x20000204
 8001310:	20000268 	.word	0x20000268

08001314 <parameterCalculations_ADC3>:
* Function Description: Function to calculate Average of ADC3 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC3(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[TAFE]=0,Adc_Sum_Buffer[TDIODE]=0;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e017      	b.n	800135c <parameterCalculations_ADC3+0x48>
		Adc_Sum_Buffer[TAFE] += Adc3_Buffer[i*ADC3_CHN + 0];
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	4914      	ldr	r1, [pc, #80]	; (8001388 <parameterCalculations_ADC3+0x74>)
 8001336:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800133a:	4413      	add	r3, r2
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800133e:	6213      	str	r3, [r2, #32]
		Adc_Sum_Buffer[TDIODE] += Adc3_Buffer[i*ADC3_CHN + 1];
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	3201      	adds	r2, #1
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <parameterCalculations_ADC3+0x74>)
 800134c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001350:	4413      	add	r3, r2
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001354:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	dde4      	ble.n	800132c <parameterCalculations_ADC3+0x18>
	}
	Adc_Avg_Buffer[TAFE] = Adc_Sum_Buffer[TAFE]/ADC_SAMPLE_SIZE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <parameterCalculations_ADC3+0x78>)
 800136a:	6213      	str	r3, [r2, #32]
	Adc_Avg_Buffer[TDIODE] = Adc_Sum_Buffer[TDIODE]/ADC_SAMPLE_SIZE;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <parameterCalculations_ADC3+0x78>)
 8001374:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000023c 	.word	0x2000023c
 8001388:	20000224 	.word	0x20000224
 800138c:	20000268 	.word	0x20000268

08001390 <parameterCalculations_ADC4>:
* Function Description: Function to calculate Average of ADC4 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC4(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[TTRAFO]=0;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28

	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	e00b      	b.n	80013ba <parameterCalculations_ADC4+0x2a>
		Adc_Sum_Buffer[TTRAFO] += Adc4_Buffer[i*ADC4_CHN + 0];
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <parameterCalculations_ADC4+0x4c>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013b2:	6293      	str	r3, [r2, #40]	; 0x28
	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	ddf0      	ble.n	80013a2 <parameterCalculations_ADC4+0x12>

	Adc_Avg_Buffer[TTRAFO] = Adc_Sum_Buffer[TTRAFO]/ADC_SAMPLE_SIZE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <parameterCalculations_ADC4+0x50>)
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000023c 	.word	0x2000023c
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000268 	.word	0x20000268

080013e4 <calculateTemperature>:
 * Calculates temperature from resistance based on a lookup table values
    * @param resistance: NTC resistance in Ohms
    * @return temperature in Celsius
 */
float calculateTemperature(float resistance)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
    // Check if the resistance is outside the table range
    if (resistance >= resistance_values[0])
 80013ee:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80014ac <calculateTemperature+0xc8>
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	db01      	blt.n	8001404 <calculateTemperature+0x20>
        return 25.0; // Return default temperature
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <calculateTemperature+0xcc>)
 8001402:	e049      	b.n	8001498 <calculateTemperature+0xb4>

    int i = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    while ((float)resistance_values[i] > (float)resistance){
 8001408:	e002      	b.n	8001410 <calculateTemperature+0x2c>
        i++;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
    while ((float)resistance_values[i] > (float)resistance){
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <calculateTemperature+0xd0>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d4ef      	bmi.n	800140a <calculateTemperature+0x26>
    }

    float rlow = resistance_values[i - 1];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <calculateTemperature+0xd0>)
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
    float rhigh = resistance_values[i];
 8001438:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <calculateTemperature+0xd0>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
    float tempLower = temperature_values[i - 1];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3b01      	subs	r3, #1
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <calculateTemperature+0xd4>)
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
    float tempUpper = temperature_values[i];
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <calculateTemperature+0xd4>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]

    // Interpolating the temperature value
    float tmpcel = tempLower + (resistance - rlow) * (tempUpper - tempLower) / (rhigh - rlow);
 800145e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001462:	edd7 7a06 	vldr	s15, [r7, #24]
 8001466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146a:	edd7 6a03 	vldr	s13, [r7, #12]
 800146e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001472:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001476:	ee67 6a27 	vmul.f32	s13, s14, s15
 800147a:	ed97 7a05 	vldr	s14, [r7, #20]
 800147e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148a:	ed97 7a04 	vldr	s14, [r7, #16]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	edc7 7a02 	vstr	s15, [r7, #8]

    return tmpcel;
 8001496:	68bb      	ldr	r3, [r7, #8]
}
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	461c4000 	.word	0x461c4000
 80014b0:	41c80000 	.word	0x41c80000
 80014b4:	0800e4b8 	.word	0x0800e4b8
 80014b8:	0800e25c 	.word	0x0800e25c

080014bc <calculateTrafoTemperature>:
{
	return  (tempCelsius + 273.15);
}

float calculateTrafoTemperature(float trafo_temp)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (trafo_temp <= trafo_meas_values[0])
 80014c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001524 <calculateTrafoTemperature+0x68>
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d802      	bhi.n	80014de <calculateTrafoTemperature+0x22>
		return 0;
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e019      	b.n	8001512 <calculateTrafoTemperature+0x56>

	int j=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
	while((float)trafo_temp >=trafo_meas_values[j] )
 80014e2:	e002      	b.n	80014ea <calculateTrafoTemperature+0x2e>
	{
		j++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
	while((float)trafo_temp >=trafo_meas_values[j] )
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <calculateTrafoTemperature+0x6c>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	daef      	bge.n	80014e4 <calculateTrafoTemperature+0x28>
	}
		float trafo_actual_temp =  trafo_temp_values[j];
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <calculateTrafoTemperature+0x70>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60bb      	str	r3, [r7, #8]
		return trafo_actual_temp;
 8001510:	68bb      	ldr	r3, [r7, #8]
}
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	c013e76d 	.word	0xc013e76d
 8001528:	0800e714 	.word	0x0800e714
 800152c:	0800e8a8 	.word	0x0800e8a8

08001530 <generate_address>:
* Input:
* Return:
*/
uint8_t switch_states[6];
uint16_t generate_address()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
//	uint8_t switch_states[6];
	uint16_t address;
	switch_states[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	482a      	ldr	r0, [pc, #168]	; (80015e4 <generate_address+0xb4>)
 800153a:	f006 fc31 	bl	8007da0 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <generate_address+0xb8>)
 8001544:	701a      	strb	r2, [r3, #0]
	switch_states[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <generate_address+0xb4>)
 800154a:	f006 fc29 	bl	8007da0 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <generate_address+0xb8>)
 8001554:	705a      	strb	r2, [r3, #1]
	switch_states[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001556:	2120      	movs	r1, #32
 8001558:	4822      	ldr	r0, [pc, #136]	; (80015e4 <generate_address+0xb4>)
 800155a:	f006 fc21 	bl	8007da0 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <generate_address+0xb8>)
 8001564:	709a      	strb	r2, [r3, #2]
	switch_states[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001566:	2110      	movs	r1, #16
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <generate_address+0xb4>)
 800156a:	f006 fc19 	bl	8007da0 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <generate_address+0xb8>)
 8001574:	70da      	strb	r2, [r3, #3]
	switch_states[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8001576:	2108      	movs	r1, #8
 8001578:	481a      	ldr	r0, [pc, #104]	; (80015e4 <generate_address+0xb4>)
 800157a:	f006 fc11 	bl	8007da0 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <generate_address+0xb8>)
 8001584:	711a      	strb	r2, [r3, #4]
	switch_states[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8001586:	2101      	movs	r1, #1
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <generate_address+0xb4>)
 800158a:	f006 fc09 	bl	8007da0 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <generate_address+0xb8>)
 8001594:	715a      	strb	r2, [r3, #5]
	address = (uint16_t)(((uint16_t)switch_states[0] << 5) | ((uint16_t)switch_states[1] << 4) | ((uint16_t)switch_states[2] << 3) | ((uint16_t)switch_states[3]) << 2 | ((uint16_t)switch_states[4]) << 1 | ((uint16_t)switch_states[5]));
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <generate_address+0xb8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	015b      	lsls	r3, r3, #5
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <generate_address+0xb8>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <generate_address+0xb8>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <generate_address+0xb8>)
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <generate_address+0xb8>)
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <generate_address+0xb8>)
 80015d0:	795b      	ldrb	r3, [r3, #5]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	80fb      	strh	r3, [r7, #6]
	return address;
 80015da:	88fb      	ldrh	r3, [r7, #6]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	20000294 	.word	0x20000294

080015ec <CELL_TEST>:
 * 2) Lower the protection levels of some functions
 * 3) bypass some of the faults
 * */

void CELL_TEST(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
/ * Not deleting this code because this may be needed in future.
 *
 */

//	g_AFE_switch = GET_AFE_SWITCH;
  if((g_AFE_switch ==0) && (PWMON_flag==0) && (status1.bits.sHealthStatus == 0))
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <CELL_TEST+0x120>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d118      	bne.n	800162a <CELL_TEST+0x3e>
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <CELL_TEST+0x124>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d114      	bne.n	800162a <CELL_TEST+0x3e>
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <CELL_TEST+0x128>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <CELL_TEST+0x3e>
		{
			//TIM1->CCR1 =TIM1->ARR/2;
		//	TIM1->CCR2 =TIM1->ARR/2;
			PWMON();
 800160e:	f000 f921 	bl	8001854 <PWMON>
			PWMON_flag = 1;
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <CELL_TEST+0x124>)
 8001614:	2201      	movs	r2, #1
 8001616:	801a      	strh	r2, [r3, #0]
			TurnONFlag=1;
 8001618:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <CELL_TEST+0x12c>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
			LED3_ON;
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	483e      	ldr	r0, [pc, #248]	; (800171c <CELL_TEST+0x130>)
 8001624:	f006 fbd4 	bl	8007dd0 <HAL_GPIO_WritePin>
 8001628:	e027      	b.n	800167a <CELL_TEST+0x8e>

		}
		else if ((g_AFE_switch ==0) && (PWMON_flag==1) && (status1.bits.sHealthStatus == 0))
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <CELL_TEST+0x120>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d110      	bne.n	8001654 <CELL_TEST+0x68>
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <CELL_TEST+0x124>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <CELL_TEST+0x68>
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <CELL_TEST+0x128>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <CELL_TEST+0x68>
		{
			LED3_ON;
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	4833      	ldr	r0, [pc, #204]	; (800171c <CELL_TEST+0x130>)
 800164e:	f006 fbbf 	bl	8007dd0 <HAL_GPIO_WritePin>
 8001652:	e012      	b.n	800167a <CELL_TEST+0x8e>
		}
		else
		{
			PWMOFF();
 8001654:	f000 f908 	bl	8001868 <PWMOFF>
			TurnONFlag=0;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <CELL_TEST+0x12c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			LED3_OFF;
 800165e:	2200      	movs	r2, #0
 8001660:	2110      	movs	r1, #16
 8001662:	482e      	ldr	r0, [pc, #184]	; (800171c <CELL_TEST+0x130>)
 8001664:	f006 fbb4 	bl	8007dd0 <HAL_GPIO_WritePin>

			if(PSFBON_flag == 0)
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <CELL_TEST+0x134>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <CELL_TEST+0x8e>
			{
				LED3_OFF;
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4829      	ldr	r0, [pc, #164]	; (800171c <CELL_TEST+0x130>)
 8001676:	f006 fbab 	bl	8007dd0 <HAL_GPIO_WritePin>
			}
         }

		//PSFB switching function
//  	  g_PSFB_switch = GET_PSFB_SWITCH;
  	  if((g_PSFB_switch==0) && (PSFBON_flag ==0)  && (status1.bits.sHealthStatus == 0))
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <CELL_TEST+0x138>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <CELL_TEST+0xc8>
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <CELL_TEST+0x134>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <CELL_TEST+0xc8>
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <CELL_TEST+0x128>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10d      	bne.n	80016b4 <CELL_TEST+0xc8>
		{
			PSFBON();
 8001698:	f000 f84e 	bl	8001738 <PSFBON>
			PSFBON_flag = 1;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <CELL_TEST+0x134>)
 800169e:	2201      	movs	r2, #1
 80016a0:	801a      	strh	r2, [r3, #0]
			Psfb_OnOffFlag = 1;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <CELL_TEST+0x13c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
			LED3_ON;
 80016a8:	2201      	movs	r2, #1
 80016aa:	2110      	movs	r1, #16
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <CELL_TEST+0x130>)
 80016ae:	f006 fb8f 	bl	8007dd0 <HAL_GPIO_WritePin>
 80016b2:	e01f      	b.n	80016f4 <CELL_TEST+0x108>
		}
		else if ((g_PSFB_switch==0) && (PSFBON_flag ==1) && (status1.bits.sHealthStatus == 0))
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <CELL_TEST+0x138>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d110      	bne.n	80016de <CELL_TEST+0xf2>
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <CELL_TEST+0x134>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10c      	bne.n	80016de <CELL_TEST+0xf2>
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <CELL_TEST+0x128>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <CELL_TEST+0xf2>
		{
			LED3_ON;
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <CELL_TEST+0x130>)
 80016d8:	f006 fb7a 	bl	8007dd0 <HAL_GPIO_WritePin>
 80016dc:	e00a      	b.n	80016f4 <CELL_TEST+0x108>
		}
		else
		{
			PSFBOFF();
 80016de:	f000 f85b 	bl	8001798 <PSFBOFF>

			if(PWMON_flag == 0)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <CELL_TEST+0x124>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d104      	bne.n	80016f4 <CELL_TEST+0x108>
			{
				LED3_OFF;
 80016ea:	2200      	movs	r2, #0
 80016ec:	2110      	movs	r1, #16
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <CELL_TEST+0x130>)
 80016f0:	f006 fb6e 	bl	8007dd0 <HAL_GPIO_WritePin>
			}
        }

		//Lowering the threshold of faults for the test mode
		overlinkVolt.threshold = 850.0f;		//dc link over voltage setting
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <CELL_TEST+0x140>)
 80016f6:	f240 3252 	movw	r2, #850	; 0x352
 80016fa:	821a      	strh	r2, [r3, #16]
		overlinkCurr.threshold = 5.0f;		// dc link over current setting
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <CELL_TEST+0x144>)
 80016fe:	2205      	movs	r2, #5
 8001700:	821a      	strh	r2, [r3, #16]
		overIout.threshold = 5.0f;				// Iout over current setting
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <CELL_TEST+0x148>)
 8001704:	2205      	movs	r2, #5
 8001706:	821a      	strh	r2, [r3, #16]

		//TODO: bypass some of the faults
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000052c 	.word	0x2000052c
 8001710:	20000518 	.word	0x20000518
 8001714:	2000054c 	.word	0x2000054c
 8001718:	200004d3 	.word	0x200004d3
 800171c:	48000400 	.word	0x48000400
 8001720:	2000051a 	.word	0x2000051a
 8001724:	2000052d 	.word	0x2000052d
 8001728:	200004d2 	.word	0x200004d2
 800172c:	2000057c 	.word	0x2000057c
 8001730:	20000550 	.word	0x20000550
 8001734:	200005a8 	.word	0x200005a8

08001738 <PSFBON>:
* Function Description: Function to start PSFB output waveform
* Input:
* Return:
*/
void PSFBON(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	SoftStartFlag = 1;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <PSFBON+0x4c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	phase_diff.Fix = 2800;			// 4250 is for 50 % phase shift (8500*0.5)= 4250
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <PSFBON+0x50>)
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <PSFBON+0x54>)
 8001746:	605a      	str	r2, [r3, #4]
	phase_diff.Dynamic = 0;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <PSFBON+0x50>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	HAL_HRTIM_WaveformCounterStart(&hhrtim1,HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E);
 8001750:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001754:	480e      	ldr	r0, [pc, #56]	; (8001790 <PSFBON+0x58>)
 8001756:	f007 f84e 	bl	80087f6 <HAL_HRTIM_WaveformCountStart>
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=500;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <PSFBON+0x5c>)
 800175c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001760:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=500;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <PSFBON+0x5c>)
 8001766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800176a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CNTxR=500;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <PSFBON+0x5c>)
 8001770:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001774:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 ); //Timer C and D for PSFB
 8001778:	21f0      	movs	r1, #240	; 0xf0
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <PSFBON+0x58>)
 800177c:	f006 ffe1 	bl	8008742 <HAL_HRTIM_WaveformOutputStart>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200004d4 	.word	0x200004d4
 8001788:	200006b0 	.word	0x200006b0
 800178c:	452f0000 	.word	0x452f0000
 8001790:	2000082c 	.word	0x2000082c
 8001794:	40016800 	.word	0x40016800

08001798 <PSFBOFF>:
* Function Description: Function to stop PSFB output waveform
* Input:
* Return:
*/
void PSFBOFF(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	Psfb_OnOffFlag = 0;
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <PSFBOFF+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	cmd.bits.psfb_on = 0;
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <PSFBOFF+0x98>)
 80017a4:	7813      	ldrb	r3, [r2, #0]
 80017a6:	f36f 03c3 	bfc	r3, #3, #1
 80017aa:	7013      	strb	r3, [r2, #0]
	status1.bits.psfbFeedback = 0;
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <PSFBOFF+0x9c>)
 80017ae:	7813      	ldrb	r3, [r2, #0]
 80017b0:	f36f 0341 	bfc	r3, #1, #1
 80017b4:	7013      	strb	r3, [r2, #0]
	SoftStartFlag = 0;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <PSFBOFF+0xa0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	phase_diff.Fix = 2800;			// 4250 is for 50 % phase shift (8500*0.5)= 4250
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <PSFBOFF+0xa4>)
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <PSFBOFF+0xa8>)
 80017c0:	605a      	str	r2, [r3, #4]
	phase_diff.Dynamic = 0;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <PSFBOFF+0xa4>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 );
 80017ca:	21f0      	movs	r1, #240	; 0xf0
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <PSFBOFF+0xac>)
 80017ce:	f006 ffe5 	bl	800879c <HAL_HRTIM_WaveformOutputStop>
	PSFBON_flag = 0;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <PSFBOFF+0xb0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 1+ phase_diff.Dynamic;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <PSFBOFF+0xa4>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <PSFBOFF+0xb4>)
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 4250 + phase_diff.Dynamic;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <PSFBOFF+0xa4>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001850 <PSFBOFF+0xb8>
 80017fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <PSFBOFF+0xb4>)
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 2a90 	vmov	r2, s15
 800180c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	//HAL_HRTIM_WaveformCounterStop(&hhrtim1,HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E);
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=0;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <PSFBOFF+0xb4>)
 8001812:	2200      	movs	r2, #0
 8001814:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <PSFBOFF+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CNTxR=0;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <PSFBOFF+0xb4>)
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200004d2 	.word	0x200004d2
 8001830:	20000548 	.word	0x20000548
 8001834:	2000054c 	.word	0x2000054c
 8001838:	200004d4 	.word	0x200004d4
 800183c:	200006b0 	.word	0x200006b0
 8001840:	452f0000 	.word	0x452f0000
 8001844:	2000082c 	.word	0x2000082c
 8001848:	2000051a 	.word	0x2000051a
 800184c:	40016800 	.word	0x40016800
 8001850:	4584d000 	.word	0x4584d000

08001854 <PWMON>:
* Function Description:
* Input:
* Return:
*/
void PWMON(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	//Pwm control configurations TBD
//	Psfb_OnOffFlag = 1;
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 ); //Timer A and B for AFE PWM
 8001858:	210f      	movs	r1, #15
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <PWMON+0x10>)
 800185c:	f006 ff71 	bl	8008742 <HAL_HRTIM_WaveformOutputStart>

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000082c 	.word	0x2000082c

08001868 <PWMOFF>:
* Function Description:
* Input:
* Return:
*/
void PWMOFF(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	//Pwm control configurations TBD
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 ); //Timer A and B for PWM AFE
 800186c:	210f      	movs	r1, #15
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <PWMOFF+0x18>)
 8001870:	f006 ff94 	bl	800879c <HAL_HRTIM_WaveformOutputStop>
	PWMON_flag = 0;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <PWMOFF+0x1c>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000082c 	.word	0x2000082c
 8001884:	20000518 	.word	0x20000518

08001888 <protectionMonitoring_DC>:
* Function Description:
* Input:
* Return:
*/
void protectionMonitoring_DC(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
		fault1.bits.over_Ilink =  0;
		remove_error_from_list(1);
		}
*/

	check_over_limitI(&overIout,Iout[procValue] );
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <protectionMonitoring_DC+0x7c>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <protectionMonitoring_DC+0x80>)
 8001898:	f001 f9c0 	bl	8002c1c <check_over_limitI>
	if(overIout.ovlFault){
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <protectionMonitoring_DC+0x80>)
 800189e:	885b      	ldrh	r3, [r3, #2]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <protectionMonitoring_DC+0x2e>
		fault1.bits.over_Iout = 1;
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <protectionMonitoring_DC+0x84>)
 80018a6:	7813      	ldrb	r3, [r2, #0]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	7013      	strb	r3, [r2, #0]
		add_error_to_list(3);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f002 fa80 	bl	8003db4 <add_error_to_list>
 80018b4:	e007      	b.n	80018c6 <protectionMonitoring_DC+0x3e>
	}
	else{
		fault1.bits.over_Iout = 0;
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <protectionMonitoring_DC+0x84>)
 80018b8:	7813      	ldrb	r3, [r2, #0]
 80018ba:	f36f 0382 	bfc	r3, #2, #1
 80018be:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f002 fa93 	bl	8003dec <remove_error_from_list>
		fault1.bits.over_Vout = 1;
	else
		fault1.bits.over_Vout = 0;
*/

	check_over_limit(&overlinkVolt, Vbus[procValue]);
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <protectionMonitoring_DC+0x88>)
 80018c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	4810      	ldr	r0, [pc, #64]	; (8001914 <protectionMonitoring_DC+0x8c>)
 80018d2:	f001 f8ed 	bl	8002ab0 <check_over_limit>
	if(overlinkVolt.ovlFault){
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <protectionMonitoring_DC+0x8c>)
 80018d8:	885b      	ldrh	r3, [r3, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <protectionMonitoring_DC+0x68>
		fault1.bits.over_Vlink = 1;
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <protectionMonitoring_DC+0x84>)
 80018e0:	7813      	ldrb	r3, [r2, #0]
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	7013      	strb	r3, [r2, #0]
		add_error_to_list(2);
 80018e8:	2002      	movs	r0, #2
 80018ea:	f002 fa63 	bl	8003db4 <add_error_to_list>
	else{
		fault2.bits.underVlink = 0;
		remove_error_from_list(5);
		}
		*/
}
 80018ee:	e007      	b.n	8001900 <protectionMonitoring_DC+0x78>
		fault1.bits.over_Vlink = 0;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <protectionMonitoring_DC+0x84>)
 80018f2:	7813      	ldrb	r3, [r2, #0]
 80018f4:	f36f 0341 	bfc	r3, #1, #1
 80018f8:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(2);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f002 fa76 	bl	8003dec <remove_error_from_list>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000048c 	.word	0x2000048c
 8001908:	200005a8 	.word	0x200005a8
 800190c:	20000530 	.word	0x20000530
 8001910:	20000484 	.word	0x20000484
 8001914:	2000057c 	.word	0x2000057c

08001918 <protectionMonitoring_Temp>:
		fault2.bits.underSupVolt = 1;
	else
		fault2.bits.underSupVolt = 0;
}*/

void protectionMonitoring_Temp(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	if(overDiodeTemp.ovlFault){
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <protectionMonitoring_Temp+0xb0>)
 800191e:	885b      	ldrh	r3, [r3, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <protectionMonitoring_Temp+0x1e>
		fault4.bits.overTemp_diode = 1;
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001926:	7813      	ldrb	r3, [r2, #0]
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	7013      	strb	r3, [r2, #0]
		add_error_to_list(17);
 800192e:	2011      	movs	r0, #17
 8001930:	f002 fa40 	bl	8003db4 <add_error_to_list>
 8001934:	e007      	b.n	8001946 <protectionMonitoring_Temp+0x2e>
	}
	else{
		fault4.bits.overTemp_diode = 0;
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001938:	7813      	ldrb	r3, [r2, #0]
 800193a:	f36f 03c3 	bfc	r3, #3, #1
 800193e:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(17);
 8001940:	2011      	movs	r0, #17
 8001942:	f002 fa53 	bl	8003dec <remove_error_from_list>
	}

	if(overAfeTemp.ovlFault){
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <protectionMonitoring_Temp+0xb8>)
 8001948:	885b      	ldrh	r3, [r3, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <protectionMonitoring_Temp+0x48>
		fault4.bits.overTemp_afe = 1;
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001950:	7813      	ldrb	r3, [r2, #0]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	7013      	strb	r3, [r2, #0]
		add_error_to_list(14);
 8001958:	200e      	movs	r0, #14
 800195a:	f002 fa2b 	bl	8003db4 <add_error_to_list>
 800195e:	e007      	b.n	8001970 <protectionMonitoring_Temp+0x58>
	}
	else{
		fault4.bits.overTemp_afe = 0;
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001962:	7813      	ldrb	r3, [r2, #0]
 8001964:	f36f 0300 	bfc	r3, #0, #1
 8001968:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(14);
 800196a:	200e      	movs	r0, #14
 800196c:	f002 fa3e 	bl	8003dec <remove_error_from_list>
	}

	if(overPsfbTemp.ovlFault){
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <protectionMonitoring_Temp+0xbc>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <protectionMonitoring_Temp+0x72>
		fault4.bits.overTemp_psfb = 1;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 800197a:	7813      	ldrb	r3, [r2, #0]
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	7013      	strb	r3, [r2, #0]
		add_error_to_list(16);
 8001982:	2010      	movs	r0, #16
 8001984:	f002 fa16 	bl	8003db4 <add_error_to_list>
 8001988:	e007      	b.n	800199a <protectionMonitoring_Temp+0x82>
	}
	else{
		fault4.bits.overTemp_psfb = 0;
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 800198c:	7813      	ldrb	r3, [r2, #0]
 800198e:	f36f 0382 	bfc	r3, #2, #1
 8001992:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(16);
 8001994:	2010      	movs	r0, #16
 8001996:	f002 fa29 	bl	8003dec <remove_error_from_list>
	}

	if(overTrafoTemp.ovlFault){
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <protectionMonitoring_Temp+0xc0>)
 800199c:	885b      	ldrh	r3, [r3, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <protectionMonitoring_Temp+0x9c>
		fault4.bits.overTemp_trafo = 1;
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 80019a4:	7813      	ldrb	r3, [r2, #0]
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	7013      	strb	r3, [r2, #0]
		add_error_to_list(15);
 80019ac:	200f      	movs	r0, #15
 80019ae:	f002 fa01 	bl	8003db4 <add_error_to_list>
	}
	else{
		fault4.bits.overTemp_trafo = 0;
		remove_error_from_list(15);
	}
}
 80019b2:	e007      	b.n	80019c4 <protectionMonitoring_Temp+0xac>
		fault4.bits.overTemp_trafo = 0;
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 80019b6:	7813      	ldrb	r3, [r2, #0]
 80019b8:	f36f 0341 	bfc	r3, #1, #1
 80019bc:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(15);
 80019be:	200f      	movs	r0, #15
 80019c0:	f002 fa14 	bl	8003dec <remove_error_from_list>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200005d4 	.word	0x200005d4
 80019cc:	2000053c 	.word	0x2000053c
 80019d0:	2000062c 	.word	0x2000062c
 80019d4:	20000600 	.word	0x20000600
 80019d8:	20000658 	.word	0x20000658

080019dc <Parameter_Calculations>:
* Function Description:
* Input:
* Return:
*/
void Parameter_Calculations(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	parameterCalculations_ADC1(); //ADC1 measurement
 80019e0:	f7ff fc10 	bl	8001204 <parameterCalculations_ADC1>
	parameterCalculations_ADC2(); //ADC2 measurement
 80019e4:	f7ff fc52 	bl	800128c <parameterCalculations_ADC2>
	Vout[rawValue] = ((Vout[rawValue]*ConfigPara.calFactor[VOUT].Slope)+ ConfigPara.calFactor[VOUT].Offset)*(ConfigPara.calFactor[VOUT].corFac); // Low pass filter for Vout
	Vout_LPF.xn = Vout[rawValue];
	Vout_LPF.yn = Vout_LPF.xn + ((float)ConfigPara.lpf_factor.Vout*(Vout_LPF.yn-Vout_LPF.xn));
	Vout[procValue] = Vout_LPF.yn;*/

	Ipsfb[rawValue] = ((float)Adc_Avg_Buffer[IPSFB]*ADC_RESOLUTION);
 80019e8:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <Parameter_Calculations+0x18c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001b6c <Parameter_Calculations+0x190>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <Parameter_Calculations+0x194>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
	Ipsfb[rawValue] = ((Ipsfb[rawValue]*ConfigPara.calFactor[IPSFB].Slope) + ConfigPara.calFactor[IPSFB].Offset)*(ConfigPara.calFactor[IPSFB].corFac); // Low pass filter for Irect
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a0a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a14:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a1e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	Ipsfb_LPF.xn = Ipsfb[rawValue];
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a32:	6013      	str	r3, [r2, #0]
	Ipsfb_LPF.yn = Ipsfb_LPF.xn + ((float)ConfigPara.lpf_factor.Ipsfb*(Ipsfb_LPF.yn-Ipsfb_LPF.xn));
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a3c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a42:	ed93 6a01 	vldr	s12, [r3, #4]
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a5a:	edc3 7a01 	vstr	s15, [r3, #4]
	Ipsfb[procValue] = Ipsfb_LPF.yn;
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a64:	6053      	str	r3, [r2, #4]

	Iout[rawValue] = ((float)Adc_Avg_Buffer[IOUT]*ADC_RESOLUTION);
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <Parameter_Calculations+0x18c>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a72:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001b6c <Parameter_Calculations+0x190>
 8001a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
	Iout[rawValue] = ((Iout[rawValue]*ConfigPara.calFactor[IOUT].Slope) + ConfigPara.calFactor[IOUT].Offset)*(ConfigPara.calFactor[IOUT].corFac); // Low pass filter for Iout
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a88:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8001a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a92:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a9c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	Iout_LPF.xn = Iout[rawValue];
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ab0:	6013      	str	r3, [r2, #0]
	Iout_LPF.yn = Iout_LPF.xn + ((float)ConfigPara.lpf_factor.Iout*(Iout_LPF.yn-Iout_LPF.xn));
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ab4:	ed93 7a00 	vldr	s14, [r3]
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <Parameter_Calculations+0x198>)
 8001aba:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ac0:	ed93 6a01 	vldr	s12, [r3, #4]
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ad8:	edc3 7a01 	vstr	s15, [r3, #4]
	Iout[procValue] = Iout_LPF.yn;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001ae2:	6053      	str	r3, [r2, #4]

	Vbus[rawValue] = ((float)Adc_Avg_Buffer[VBUS] * ADC_RESOLUTION);
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <Parameter_Calculations+0x18c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b6c <Parameter_Calculations+0x190>
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
	{
//		Vbus[rawValue] = ((Vbus[rawValue]*393.45f) - 18.305f )*(ConfigPara.calFactor[VBUS].corFac); // Low pass filter for VDC bus
	}
//	else
	{
		Vbus[rawValue] = ((Vbus[rawValue]*ConfigPara.calFactor[VBUS].Slope) + ConfigPara.calFactor[VBUS].Offset)*(ConfigPara.calFactor[VBUS].corFac); // Low pass filter for VDC bus
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b06:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b10:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b1a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	}

	Vbus_LPF.xn = Vbus[rawValue];
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b2e:	6013      	str	r3, [r2, #0]
	Vbus_LPF.yn = Vbus_LPF.xn + ((float)ConfigPara.lpf_factor.VBus*(Vbus_LPF.yn-Vbus_LPF.xn));
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b38:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b3e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b56:	edc3 7a01 	vstr	s15, [r3, #4]
	Vbus[procValue] = Vbus_LPF.yn;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b60:	6053      	str	r3, [r2, #4]


	// Calculating the RMS and AC Protection function at every 1 mSec
	//calculateRMS(ConfigPara.freqInner, ConfigPara.Fsystem);	//Removing entire function because none of the section is mounted on PCB

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000268 	.word	0x20000268
 8001b6c:	3a5332ed 	.word	0x3a5332ed
 8001b70:	2000047c 	.word	0x2000047c
 8001b74:	2000029c 	.word	0x2000029c
 8001b78:	200004e0 	.word	0x200004e0
 8001b7c:	2000048c 	.word	0x2000048c
 8001b80:	200004f0 	.word	0x200004f0
 8001b84:	20000484 	.word	0x20000484
 8001b88:	200004e8 	.word	0x200004e8
 8001b8c:	00000000 	.word	0x00000000

08001b90 <tempParameter_Calculations>:
* Function Description:
* Input:
* Return:
*/
void tempParameter_Calculations(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	parameterCalculations_ADC3(); //ADC3 measurement for temperature sensing at low rate 10*4 Hz
 8001b94:	f7ff fbbe 	bl	8001314 <parameterCalculations_ADC3>
	parameterCalculations_ADC4();
 8001b98:	f7ff fbfa 	bl	8001390 <parameterCalculations_ADC4>
	//Calculation of Temperature and low pass filtering
	TDiode_Res[rawValue] = (((float)Adc_Avg_Buffer[TDIODE]) * ADC_RESOLUTION); // Low pass filter for Ttrafo (in resistance)
 8001b9c:	4bb6      	ldr	r3, [pc, #728]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
	TDiode_LPF.xn = TDiode_Res[rawValue];
 8001bb6:	4bb2      	ldr	r3, [pc, #712]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4ab2      	ldr	r2, [pc, #712]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bbc:	6013      	str	r3, [r2, #0]
	TDiode_LPF.yn = TDiode_LPF.xn + ((float)ConfigPara.lpf_factor.Tdiode*(TDiode_LPF.yn-TDiode_LPF.xn));
 8001bbe:	4bb1      	ldr	r3, [pc, #708]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001bc6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8001bca:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bcc:	ed93 6a01 	vldr	s12, [r3, #4]
 8001bd0:	4bac      	ldr	r3, [pc, #688]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001be4:	edc3 7a01 	vstr	s15, [r3, #4]
	TDiode_Res[procValue] = TDiode_LPF.yn;
 8001be8:	4ba6      	ldr	r3, [pc, #664]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4aa4      	ldr	r2, [pc, #656]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bee:	6053      	str	r3, [r2, #4]
	TDiode_Res[procValue] = ((TDiode_Res[procValue] * ConfigPara.calFactor[TDIODE].Slope) + ConfigPara.calFactor[TDIODE].Offset)*(ConfigPara.calFactor[TDIODE].corFac);
 8001bf0:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bf6:	4ba4      	ldr	r3, [pc, #656]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001bf8:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8001bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c02:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8001c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0a:	4b9f      	ldr	r3, [pc, #636]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c0c:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001c16:	edc3 7a01 	vstr	s15, [r3, #4]
	TDiode = calculateTemperature(TDiode_Res[procValue]); //Converting resistance to temperature
 8001c1a:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f7ff fbde 	bl	80013e4 <calculateTemperature>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <tempParameter_Calculations+0x2fc>)
 8001c2e:	edc3 7a00 	vstr	s15, [r3]

	TTrafo_Res[rawValue] = (((float)Adc_Avg_Buffer[TTRAFO]) * ADC_RESOLUTION); // Low pass filter for Tfec (in resistance)
 8001c32:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c46:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c48:	edc3 7a00 	vstr	s15, [r3]
	Ttrafo_LPF.xn = TTrafo_Res[rawValue];
 8001c4c:	4b90      	ldr	r3, [pc, #576]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a90      	ldr	r2, [pc, #576]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c52:	6013      	str	r3, [r2, #0]
	Ttrafo_LPF.yn = Ttrafo_LPF.xn + ((float)ConfigPara.lpf_factor.Ttrafo*(Ttrafo_LPF.yn-Ttrafo_LPF.xn));
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c5c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c62:	ed93 6a01 	vldr	s12, [r3, #4]
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	4b86      	ldr	r3, [pc, #536]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c7a:	edc3 7a01 	vstr	s15, [r3, #4]
	TTrafo_Res[procValue] = Ttrafo_LPF.yn;
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c84:	6053      	str	r3, [r2, #4]
	TTrafo_Res[procValue] = ((TTrafo_Res[procValue] * ConfigPara.calFactor[TTRAFO].Slope) + ConfigPara.calFactor[TTRAFO].Offset)*(ConfigPara.calFactor[TTRAFO].corFac);
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c8e:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c98:	edd3 7a5d 	vldr	s15, [r3, #372]	; 0x174
 8001c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001ca2:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001cac:	edc3 7a01 	vstr	s15, [r3, #4]
	//TTrafo = calculateTemperature(TTrafo_Res[procValue]); //Converting resistance to temperature

	//This calculation is taken reference from Sensing.xlsx
	TTrafo_calc = (TTrafo_Res[procValue] /5.5455)*1000;
 8001cb0:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc13 	bl	80004e0 <__aeabi_f2d>
 8001cba:	a36b      	add	r3, pc, #428	; (adr r3, 8001e68 <tempParameter_Calculations+0x2d8>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fd90 	bl	80007e4 <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <tempParameter_Calculations+0x308>)
 8001cd2:	f7fe fc5d 	bl	8000590 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe fe69 	bl	80009b4 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <tempParameter_Calculations+0x30c>)
 8001ce6:	6013      	str	r3, [r2, #0]
	TTrafo_meas = (TTrafo_calc -100) /0.39;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <tempParameter_Calculations+0x30c>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001ea0 <tempParameter_Calculations+0x310>
 8001cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fbf1 	bl	80004e0 <__aeabi_f2d>
 8001cfe:	a35c      	add	r3, pc, #368	; (adr r3, 8001e70 <tempParameter_Calculations+0x2e0>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fd6e 	bl	80007e4 <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fe50 	bl	80009b4 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <tempParameter_Calculations+0x314>)
 8001d18:	6013      	str	r3, [r2, #0]
	TTrafo = calculateTrafoTemperature(TTrafo_meas);
 8001d1a:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <tempParameter_Calculations+0x314>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	f7ff fbca 	bl	80014bc <calculateTrafoTemperature>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <tempParameter_Calculations+0x318>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]

	//For temperature calibration (power board), R28_1 and R28_2 changed to 1.5K (earlier 2.2K) and R29_1 and R29_2 changed to 15K (earlier 22K)
	TAfe_Res[rawValue] = (((float)Adc_Avg_Buffer[TAFE]) * ADC_RESOLUTION); // Low pass filter for Tfec (in resistance)
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	4b59      	ldr	r3, [pc, #356]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
	TAfe_LPF.xn = TAfe_Res[rawValue];
 8001d4c:	4b57      	ldr	r3, [pc, #348]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d52:	6013      	str	r3, [r2, #0]
	TAfe_LPF.yn = TAfe_LPF.xn + ((float)ConfigPara.lpf_factor.Tafe*(TAfe_LPF.yn - TAfe_LPF.xn));
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d5c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d62:	ed93 6a01 	vldr	s12, [r3, #4]
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d7a:	edc3 7a01 	vstr	s15, [r3, #4]
	TAfe_Res[procValue] = TAfe_LPF.yn;
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d84:	6053      	str	r3, [r2, #4]
	TAfe_Res[procValue] = ((TAfe_Res[procValue] * ConfigPara.calFactor[TAFE].Slope) + ConfigPara.calFactor[TAFE].Offset)*(ConfigPara.calFactor[TAFE].corFac);
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d8e:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d98:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8001d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001da2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8001da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001dac:	edc3 7a01 	vstr	s15, [r3, #4]
	TAfe = calculateTemperature(TAfe_Res[procValue]); //Converting resistance to temperature
 8001db0:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001db2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	f7ff fb13 	bl	80013e4 <calculateTemperature>
 8001dbe:	eef0 7a40 	vmov.f32	s15, s0
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <tempParameter_Calculations+0x324>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]

	TPsfb_Res[rawValue] = (((float)Adc_Avg_Buffer[TPSFB]) * ADC_RESOLUTION); // Low pass filter for Tpsfb (in resistance)
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001dde:	edc3 7a00 	vstr	s15, [r3]
	TPsfb_LPF.xn = TPsfb_Res[rawValue];
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001de8:	6013      	str	r3, [r2, #0]
	TPsfb_LPF.yn = TPsfb_LPF.xn + ((float)ConfigPara.lpf_factor.Tpsfb *(TPsfb_LPF.yn-TPsfb_LPF.xn));
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001df2:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001df8:	ed93 6a01 	vldr	s12, [r3, #4]
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001e10:	edc3 7a01 	vstr	s15, [r3, #4]
	TPsfb_Res[procValue] = TPsfb_LPF.yn;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e1a:	6053      	str	r3, [r2, #4]
	TPsfb_Res[procValue] = /*TPsfb_Res[procValue]/0.000083; */((TPsfb_Res[procValue] * ConfigPara.calFactor[TPSFB].Slope) + ConfigPara.calFactor[TPSFB].Offset)*(ConfigPara.calFactor[TPSFB].corFac);
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e24:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8001e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e2e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8001e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e38:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e42:	edc3 7a01 	vstr	s15, [r3, #4]
	TPsfb = calculateTemperature(TPsfb_Res[procValue]); //Converting resistance to
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f7ff fac8 	bl	80013e4 <calculateTemperature>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <tempParameter_Calculations+0x330>)
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
    protectionMonitoring_Temp();
 8001e5e:	f7ff fd5b 	bl	8001918 <protectionMonitoring_Temp>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	8d4fdf3b 	.word	0x8d4fdf3b
 8001e6c:	40162e97 	.word	0x40162e97
 8001e70:	8f5c28f6 	.word	0x8f5c28f6
 8001e74:	3fd8f5c2 	.word	0x3fd8f5c2
 8001e78:	20000268 	.word	0x20000268
 8001e7c:	3a5332ed 	.word	0x3a5332ed
 8001e80:	20000494 	.word	0x20000494
 8001e84:	200004f8 	.word	0x200004f8
 8001e88:	2000029c 	.word	0x2000029c
 8001e8c:	200004bc 	.word	0x200004bc
 8001e90:	2000049c 	.word	0x2000049c
 8001e94:	20000500 	.word	0x20000500
 8001e98:	408f4000 	.word	0x408f4000
 8001e9c:	200004b4 	.word	0x200004b4
 8001ea0:	42c80000 	.word	0x42c80000
 8001ea4:	200004b8 	.word	0x200004b8
 8001ea8:	200004c0 	.word	0x200004c0
 8001eac:	200004a4 	.word	0x200004a4
 8001eb0:	20000508 	.word	0x20000508
 8001eb4:	200004c4 	.word	0x200004c4
 8001eb8:	200004ac 	.word	0x200004ac
 8001ebc:	20000510 	.word	0x20000510
 8001ec0:	200004c8 	.word	0x200004c8

08001ec4 <phaseShift_Pwm>:

/* Call this function once after Control Initialisation */
void phaseShift_Pwm(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	if((u8Slavenumber > 0 && u8Slavenumber <= 4)  || (u8Slavenumber > 13 && u8Slavenumber <= 17) || (u8Slavenumber > 26 && u8Slavenumber <= 30 )){
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <phaseShift_Pwm+0x14>
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d90f      	bls.n	8001ef8 <phaseShift_Pwm+0x34>
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b0d      	cmp	r3, #13
 8001ede:	d903      	bls.n	8001ee8 <phaseShift_Pwm+0x24>
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d907      	bls.n	8001ef8 <phaseShift_Pwm+0x34>
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b1a      	cmp	r3, #26
 8001eee:	d907      	bls.n	8001f00 <phaseShift_Pwm+0x3c>
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b1e      	cmp	r3, #30
 8001ef6:	d803      	bhi.n	8001f00 <phaseShift_Pwm+0x3c>
		HRTIM1->sMasterRegs.MCMP1R = 1; //0 degree phase shift
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	61da      	str	r2, [r3, #28]
 8001efe:	e03d      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else if((u8Slavenumber > 4 && u8Slavenumber <= 8) || (u8Slavenumber > 17 && u8Slavenumber <= 21) || (u8Slavenumber > 30 && u8Slavenumber <= 34 )){
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d903      	bls.n	8001f10 <phaseShift_Pwm+0x4c>
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d90f      	bls.n	8001f30 <phaseShift_Pwm+0x6c>
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d903      	bls.n	8001f20 <phaseShift_Pwm+0x5c>
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b15      	cmp	r3, #21
 8001f1e:	d907      	bls.n	8001f30 <phaseShift_Pwm+0x6c>
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b1e      	cmp	r3, #30
 8001f26:	d908      	bls.n	8001f3a <phaseShift_Pwm+0x76>
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b22      	cmp	r3, #34	; 0x22
 8001f2e:	d804      	bhi.n	8001f3a <phaseShift_Pwm+0x76>
			HRTIM1->sMasterRegs.MCMP1R = 11333; //120 degree phase shift
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f32:	f642 4245 	movw	r2, #11333	; 0x2c45
 8001f36:	61da      	str	r2, [r3, #28]
 8001f38:	e020      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else if((u8Slavenumber > 8 && u8Slavenumber <= 13) || (u8Slavenumber > 21 && u8Slavenumber <= 26) || (u8Slavenumber > 34 && u8Slavenumber <= 39 )){
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d903      	bls.n	8001f4a <phaseShift_Pwm+0x86>
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	2b0d      	cmp	r3, #13
 8001f48:	d90f      	bls.n	8001f6a <phaseShift_Pwm+0xa6>
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2b15      	cmp	r3, #21
 8001f50:	d903      	bls.n	8001f5a <phaseShift_Pwm+0x96>
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	2b1a      	cmp	r3, #26
 8001f58:	d907      	bls.n	8001f6a <phaseShift_Pwm+0xa6>
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b22      	cmp	r3, #34	; 0x22
 8001f60:	d908      	bls.n	8001f74 <phaseShift_Pwm+0xb0>
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b27      	cmp	r3, #39	; 0x27
 8001f68:	d804      	bhi.n	8001f74 <phaseShift_Pwm+0xb0>
			HRTIM1->sMasterRegs.MCMP1R = 22666; //240 degree phase shift
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f6c:	f645 028a 	movw	r2, #22666	; 0x588a
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	e003      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else{
		HRTIM1->sMasterRegs.MCMP1R = 0; //No waveform
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000097e 	.word	0x2000097e
 8001f8c:	40016800 	.word	0x40016800

08001f90 <dutyUpdate>:

void dutyUpdate(void){
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

	if(u8Slavenumber > 0 && u8Slavenumber <= 13  ){
 8001f94:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <dutyUpdate+0x124>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <dutyUpdate+0x34>
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <dutyUpdate+0x124>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b0d      	cmp	r3, #13
 8001fa2:	d80f      	bhi.n	8001fc4 <dutyUpdate+0x34>
		V_cmd = ((float)(DutyRef_R - 2000)/(10 * 100));
 8001fa4:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <dutyUpdate+0x128>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80020bc <dutyUpdate+0x12c>
 8001fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fbc:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <dutyUpdate+0x130>)
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
 8001fc2:	e02e      	b.n	8002022 <dutyUpdate+0x92>
	}
	else if (u8Slavenumber > 13 && u8Slavenumber <= 26  ){
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <dutyUpdate+0x124>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2b0d      	cmp	r3, #13
 8001fca:	d913      	bls.n	8001ff4 <dutyUpdate+0x64>
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <dutyUpdate+0x124>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b1a      	cmp	r3, #26
 8001fd2:	d80f      	bhi.n	8001ff4 <dutyUpdate+0x64>
		V_cmd = ((float)(DutyRef_Y - 2000)/(10 * 100));
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <dutyUpdate+0x134>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	eddf 6a35 	vldr	s13, [pc, #212]	; 80020bc <dutyUpdate+0x12c>
 8001fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <dutyUpdate+0x130>)
 8001fee:	edc3 7a00 	vstr	s15, [r3]
 8001ff2:	e016      	b.n	8002022 <dutyUpdate+0x92>
	}
	else if(u8Slavenumber > 26 && u8Slavenumber <= 39 ){
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <dutyUpdate+0x124>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b1a      	cmp	r3, #26
 8001ffa:	d912      	bls.n	8002022 <dutyUpdate+0x92>
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <dutyUpdate+0x124>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2b27      	cmp	r3, #39	; 0x27
 8002002:	d80e      	bhi.n	8002022 <dutyUpdate+0x92>
		V_cmd = ((float)(DutyRef_B - 2000)/(10 * 100));
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <dutyUpdate+0x138>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002014:	eddf 6a29 	vldr	s13, [pc, #164]	; 80020bc <dutyUpdate+0x12c>
 8002018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <dutyUpdate+0x130>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
	}

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP3xR = (uint16_t)(((float) V_cmd * HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR  + (float) HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR) * 0.5f) ;
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <dutyUpdate+0x13c>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <dutyUpdate+0x130>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <dutyUpdate+0x13c>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <dutyUpdate+0x13c>)
 8002060:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP3xR = (uint16_t)(((float)(- V_cmd) * HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR + (float) HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR) * 0.5f);
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <dutyUpdate+0x130>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb1 7a67 	vneg.f32	s14, s15
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <dutyUpdate+0x13c>)
 8002070:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <dutyUpdate+0x13c>)
 8002082:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209e:	ee17 3a90 	vmov	r3, s15
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <dutyUpdate+0x13c>)
 80020a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	2000097e 	.word	0x2000097e
 80020b8:	200004cc 	.word	0x200004cc
 80020bc:	447a0000 	.word	0x447a0000
 80020c0:	20000000 	.word	0x20000000
 80020c4:	200004ce 	.word	0x200004ce
 80020c8:	200004d0 	.word	0x200004d0
 80020cc:	40016800 	.word	0x40016800

080020d0 <ControlInit>:
* Function Description: Initializing peripherals
* Input:
* Return:
*/
void ControlInit(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	// System Interrupt for Low priority task based on RoundRobin
	TIM6->PSC = 1; //Timer 6 (2 KHz= 500us)
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <ControlInit+0xb4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = (uint16_t)(SystemCoreClock/((1+TIM6->PSC)*(2000))) - 1;
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <ControlInit+0xb8>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <ControlInit+0xb4>)
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	3301      	adds	r3, #1
 80020e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <ControlInit+0xb4>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// High Priority System Interrupt for Control System, --> ADC1 and ADC2 triggered with this timer
	TIM7->PSC = 0; //Timer 7
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <ControlInit+0xbc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = (uint16_t)(SystemCoreClock/((1+TIM7->PSC)*(5000))) - 1;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <ControlInit+0xb8>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <ControlInit+0xbc>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	3301      	adds	r3, #1
 8002108:	f241 3188 	movw	r1, #5000	; 0x1388
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <ControlInit+0xbc>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

	// for Slow Quantities Measurement like Temperature-> ADC3 and ADC4  is triggered with this timer
	TIM4->PSC=249; //Timer 4 at 10*4 = 40 Hz
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <ControlInit+0xc0>)
 800211e:	22f9      	movs	r2, #249	; 0xf9
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = (uint16_t)(SystemCoreClock/((1+TIM4->PSC)*(40))) - 1;
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <ControlInit+0xb8>)
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <ControlInit+0xc0>)
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	fbb1 f3f3 	udiv	r3, r1, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <ControlInit+0xc0>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start_IT(&htim4);
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <ControlInit+0xc4>)
 8002142:	f009 f835 	bl	800b1b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <ControlInit+0xc8>)
 8002148:	f009 f832 	bl	800b1b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <ControlInit+0xcc>)
 800214e:	f009 f82f 	bl	800b1b0 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Adc1_Buffer, ADC1_BUFFER_SIZE); //Start ADC1
 8002152:	2210      	movs	r2, #16
 8002154:	4912      	ldr	r1, [pc, #72]	; (80021a0 <ControlInit+0xd0>)
 8002156:	4813      	ldr	r0, [pc, #76]	; (80021a4 <ControlInit+0xd4>)
 8002158:	f003 fdf6 	bl	8005d48 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)Adc2_Buffer, ADC2_BUFFER_SIZE); //Start ADC2
//	HAL_ADC_Start_DMA(&hadc3,(uint32_t*)Adc3_Buffer, ADC3_BUFFER_SIZE); //Start ADC3
//	HAL_ADC_Start_DMA(&hadc4,(uint32_t*)Adc4_Buffer, ADC4_BUFFER_SIZE); //Start ADC4

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC
 800215c:	2100      	movs	r1, #0
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <ControlInit+0xd8>)
 8002160:	f004 feae 	bl	8006ec0 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start DAC
 8002164:	2110      	movs	r1, #16
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <ControlInit+0xd8>)
 8002168:	f004 feaa 	bl	8006ec0 <HAL_DAC_Start>

//	HAL_GPIO_WritePin(INH_GPIO_Port, INH_Pin, GPIO_PIN_RESET); // It is to be set Low for enable the pulses from Hardware IC (74HC573).

	HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_MASTER + HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E ); //Timer A,B,C and D of HRTIM1 counter start
 800216c:	f44f 117c 	mov.w	r1, #4128768	; 0x3f0000
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <ControlInit+0xdc>)
 8002172:	f006 fb40 	bl	80087f6 <HAL_HRTIM_WaveformCountStart>
	
	faultInit(); // Fault Structure Initialization
 8002176:	f000 faef 	bl	8002758 <faultInit>
	reset_driver(); // To reset all the driver before starting Pulses
 800217a:	f000 fae5 	bl	8002748 <reset_driver>

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40001000 	.word	0x40001000
 8002188:	200001b8 	.word	0x200001b8
 800218c:	40001400 	.word	0x40001400
 8002190:	40000800 	.word	0x40000800
 8002194:	20000a34 	.word	0x20000a34
 8002198:	20000a80 	.word	0x20000a80
 800219c:	20000acc 	.word	0x20000acc
 80021a0:	200001e4 	.word	0x200001e4
 80021a4:	20000744 	.word	0x20000744
 80021a8:	20000810 	.word	0x20000810
 80021ac:	2000082c 	.word	0x2000082c

080021b0 <ParaInit>:
* Function Description: Parameter initialization
* Input:
* Return:
*/
void ParaInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	ConfigPara.Vrated = 1000.0f; //system rated Line to Line voltage (RMS)
 80021b4:	4b63      	ldr	r3, [pc, #396]	; (8002344 <ParaInit+0x194>)
 80021b6:	4a64      	ldr	r2, [pc, #400]	; (8002348 <ParaInit+0x198>)
 80021b8:	601a      	str	r2, [r3, #0]
	ConfigPara.Prated = 15000.0f; //system rated Power (Peak Power)
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <ParaInit+0x194>)
 80021bc:	4a63      	ldr	r2, [pc, #396]	; (800234c <ParaInit+0x19c>)
 80021be:	609a      	str	r2, [r3, #8]
	ConfigPara.Irated = ConfigPara.Prated/(1.73f*ConfigPara.Vrated); //system rated Current (RMS)
 80021c0:	4b60      	ldr	r3, [pc, #384]	; (8002344 <ParaInit+0x194>)
 80021c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <ParaInit+0x194>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002350 <ParaInit+0x1a0>
 80021d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <ParaInit+0x194>)
 80021da:	edc3 7a01 	vstr	s15, [r3, #4]
	ConfigPara.Voutrated = 1000.0f; //converter DC output voltage
 80021de:	4b59      	ldr	r3, [pc, #356]	; (8002344 <ParaInit+0x194>)
 80021e0:	4a59      	ldr	r2, [pc, #356]	; (8002348 <ParaInit+0x198>)
 80021e2:	60da      	str	r2, [r3, #12]
	ConfigPara.Fsystem = 50.0f; //supply frequency
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <ParaInit+0x194>)
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <ParaInit+0x1a4>)
 80021e8:	621a      	str	r2, [r3, #32]
	ConfigPara.Ioutrated = ConfigPara.Prated/ConfigPara.Voutrated;
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <ParaInit+0x194>)
 80021ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80021f0:	4b54      	ldr	r3, [pc, #336]	; (8002344 <ParaInit+0x194>)
 80021f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80021f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fa:	4b52      	ldr	r3, [pc, #328]	; (8002344 <ParaInit+0x194>)
 80021fc:	edc3 7a04 	vstr	s15, [r3, #16]

	ConfigPara.freqInner = 5000.0f ;//AFE switching freq.
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <ParaInit+0x194>)
 8002202:	4a55      	ldr	r2, [pc, #340]	; (8002358 <ParaInit+0x1a8>)
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
	ConfigPara.freqAfe = 5000.0f; //Front-End-Converter switching frequency
 8002206:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <ParaInit+0x194>)
 8002208:	4a53      	ldr	r2, [pc, #332]	; (8002358 <ParaInit+0x1a8>)
 800220a:	61da      	str	r2, [r3, #28]
	ConfigPara.PSFBdeadband = 1.2f; //deadband value in uSecond for PSFB
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <ParaInit+0x194>)
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <ParaInit+0x1ac>)
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
	ConfigPara.FECdeadband = 1.2f; //deadband value in uSecond for FEC
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <ParaInit+0x194>)
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <ParaInit+0x1ac>)
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
	ConfigPara.freqPSFB = 20000.0f; //Phase-Shifted-Full-Bridge switching frequency
 8002218:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <ParaInit+0x194>)
 800221a:	4a51      	ldr	r2, [pc, #324]	; (8002360 <ParaInit+0x1b0>)
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
	ConfigPara.calFactor[IAFE].corFac = 0;
	ConfigPara.calFactor[ISUP].Gain = (AC_CURRENT_GAIN*2.0*1.41/3.0f);
	ConfigPara.calFactor[ISUP].corFac = 0;*/

	//  Calibration factor for DC quantities
	ConfigPara.calFactor[IPSFB].Slope = (OUTPUT_CURRENT_GAIN/3.0f);
 800221e:	4b49      	ldr	r3, [pc, #292]	; (8002344 <ParaInit+0x194>)
 8002220:	4a50      	ldr	r2, [pc, #320]	; (8002364 <ParaInit+0x1b4>)
 8002222:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ConfigPara.calFactor[IPSFB].Offset = 0;
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <ParaInit+0x194>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ConfigPara.calFactor[IPSFB].corFac = 1;
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <ParaInit+0x194>)
 8002232:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/*	This section is not mounted in slave PCB
 * ConfigPara.calFactor[VOUT].Slope = 637.7848f;
	ConfigPara.calFactor[VOUT].Offset = -36.7093f;
	ConfigPara.calFactor[VOUT].corFac = 1;*/

	ConfigPara.calFactor[IOUT].Slope =  9.4845f; /*(OUTPUT_CURRENT_GAIN/3.0f)*/
 800223a:	4b42      	ldr	r3, [pc, #264]	; (8002344 <ParaInit+0x194>)
 800223c:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <ParaInit+0x1b8>)
 800223e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	ConfigPara.calFactor[IOUT].Offset = -9.089f;
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <ParaInit+0x194>)
 8002244:	4a49      	ldr	r2, [pc, #292]	; (800236c <ParaInit+0x1bc>)
 8002246:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ConfigPara.calFactor[IOUT].Gain = ConfigPara.calFactor[IOUT].boardGain * ConfigPara.calFactor[IOUT].sensorGain * ADC_RESOLUTION;
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <ParaInit+0x194>)
 800224c:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <ParaInit+0x194>)
 8002252:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002370 <ParaInit+0x1c0>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <ParaInit+0x194>)
 8002264:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	ConfigPara.calFactor[IOUT].boardGain = 1;
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <ParaInit+0x194>)
 800226a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800226e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	ConfigPara.calFactor[IOUT].sensorGain = 1;
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <ParaInit+0x194>)
 8002274:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002278:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	ConfigPara.calFactor[IOUT].corFac = 0.64;
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <ParaInit+0x194>)
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <ParaInit+0x1c4>)
 8002280:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	//ConfigPara.calFactor[VDC_BUS].Gain=SENSOR_GAIN*CKT_GAIN;//
	ConfigPara.calFactor[VBUS].Slope = 372.51f;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <ParaInit+0x194>)
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <ParaInit+0x1c8>)
 8002288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ConfigPara.calFactor[VBUS].Offset = -0.3692f;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <ParaInit+0x194>)
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <ParaInit+0x1cc>)
 8002290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ConfigPara.calFactor[VBUS].corFac = 1;
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <ParaInit+0x194>)
 8002296:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800229a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Calibration factor for temperature sensing (Slope currently zero will add the formula later on)
	//ConfigPara.calFactor[NTCDIODE].Gain=0;
	ConfigPara.calFactor[TDIODE].Slope = 12079.0f;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <ParaInit+0x194>)
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <ParaInit+0x1d0>)
 80022a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	ConfigPara.calFactor[TDIODE].Offset = 0;
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <ParaInit+0x194>)
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	ConfigPara.calFactor[TDIODE].corFac = 1;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <ParaInit+0x194>)
 80022b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022b6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168



	//ConfigPara.calFactor[TTRAFO].Gain=0;
	ConfigPara.calFactor[TTRAFO].Slope = 1.0f;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <ParaInit+0x194>)
 80022bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022c0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	ConfigPara.calFactor[TTRAFO].Offset = 0;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <ParaInit+0x194>)
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	ConfigPara.calFactor[TTRAFO].corFac = 1;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <ParaInit+0x194>)
 80022d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180



	//ConfigPara.calFactor[TFEC].Gain=0;
	ConfigPara.calFactor[TAFE].Slope = 12079.0f; //From calibration
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <ParaInit+0x194>)
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <ParaInit+0x1d0>)
 80022dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	ConfigPara.calFactor[TAFE].Offset = 0.0f; //From calibration
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <ParaInit+0x194>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	ConfigPara.calFactor[TAFE].corFac = 1;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <ParaInit+0x194>)
 80022ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022f0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	//ConfigPara.calFactor[TPSFB].Gain=0;
	ConfigPara.calFactor[TPSFB].Slope = 12079.0f; //From calibration
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <ParaInit+0x194>)
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <ParaInit+0x1d0>)
 80022f8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	ConfigPara.calFactor[TPSFB].Offset = 0.0f; //From calibration
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <ParaInit+0x194>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	ConfigPara.calFactor[TPSFB].corFac = 1;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <ParaInit+0x194>)
 8002308:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800230c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 * ConfigPara.DcBlocker_factor.Iafe = 0.998f;
	ConfigPara.DcBlocker_factor.Vsup = 0.998f;
	ConfigPara.DcBlocker_factor.Isup = 0.998f;*/

	//Low Pass Filter factor for DC quantities
	ConfigPara.lpf_factor.Tdiode = 0.8f;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <ParaInit+0x194>)
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <ParaInit+0x1d4>)
 8002314:	671a      	str	r2, [r3, #112]	; 0x70
	ConfigPara.lpf_factor.Ttrafo = 0.8f;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <ParaInit+0x194>)
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <ParaInit+0x1d4>)
 800231a:	675a      	str	r2, [r3, #116]	; 0x74
	ConfigPara.lpf_factor.Tafe = 0.8f;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <ParaInit+0x194>)
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <ParaInit+0x1d4>)
 8002320:	67da      	str	r2, [r3, #124]	; 0x7c
	ConfigPara.lpf_factor.Tpsfb = 0.8f;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <ParaInit+0x194>)
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <ParaInit+0x1d4>)
 8002326:	679a      	str	r2, [r3, #120]	; 0x78
	ConfigPara.lpf_factor.Ipsfb = 0.995f;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ParaInit+0x194>)
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <ParaInit+0x1d8>)
 800232c:	661a      	str	r2, [r3, #96]	; 0x60
	//ConfigPara.lpf_factor.Vout = 0.995f;		//This section is not mounted in slave PCB
	ConfigPara.lpf_factor.VBus = 0.995f;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <ParaInit+0x194>)
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <ParaInit+0x1d8>)
 8002332:	669a      	str	r2, [r3, #104]	; 0x68
	ConfigPara.lpf_factor.Iout = 0.995f;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <ParaInit+0x194>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <ParaInit+0x1d8>)
 8002338:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	2000029c 	.word	0x2000029c
 8002348:	447a0000 	.word	0x447a0000
 800234c:	466a6000 	.word	0x466a6000
 8002350:	3fdd70a4 	.word	0x3fdd70a4
 8002354:	42480000 	.word	0x42480000
 8002358:	459c4000 	.word	0x459c4000
 800235c:	3f99999a 	.word	0x3f99999a
 8002360:	469c4000 	.word	0x469c4000
 8002364:	40a00000 	.word	0x40a00000
 8002368:	4117c083 	.word	0x4117c083
 800236c:	c1116c8b 	.word	0xc1116c8b
 8002370:	3a5332ed 	.word	0x3a5332ed
 8002374:	3f23d70a 	.word	0x3f23d70a
 8002378:	43ba4148 	.word	0x43ba4148
 800237c:	bebd07c8 	.word	0xbebd07c8
 8002380:	463cbc00 	.word	0x463cbc00
 8002384:	3f4ccccd 	.word	0x3f4ccccd
 8002388:	3f7eb852 	.word	0x3f7eb852

0800238c <Tim7_Execution>:
* Function Description:
* Input:
* Return:
*/
void Tim7_Execution(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	error_display(); // Error display function
 8002390:	f001 fd94 	bl	8003ebc <error_display>
//	MCU_LIVE_ON;
    Parameter_Calculations();
 8002394:	f7ff fb22 	bl	80019dc <Parameter_Calculations>
    protectionMonitoring_DC();
 8002398:	f7ff fa76 	bl	8001888 <protectionMonitoring_DC>

	faultDetection(); // keep this enable to detect fault
 800239c:	f000 fdb6 	bl	8002f0c <faultDetection>
	slave_health();
 80023a0:	f000 fcb6 	bl	8002d10 <slave_health>
	DAC_Out();
 80023a4:	f7fe fddc 	bl	8000f60 <DAC_Out>
	turnOn_Scan();
 80023a8:	f000 f90c 	bl	80025c4 <turnOn_Scan>

	if(SoftStartFlag == 1){
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <Tim7_Execution+0x158>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d11a      	bne.n	80023ea <Tim7_Execution+0x5e>
		if((phase_diff.Dynamic == phase_diff.Fix) && (phase_diff.Fix > 0)  ){
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <Tim7_Execution+0x15c>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <Tim7_Execution+0x15c>)
 80023bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	d10f      	bne.n	80023ea <Tim7_Execution+0x5e>
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <Tim7_Execution+0x15c>)
 80023cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	dd07      	ble.n	80023ea <Tim7_Execution+0x5e>
			SoftStartFlag = 0;
 80023da:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <Tim7_Execution+0x158>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
			status1.bits.psfbFeedback = 1;
 80023e0:	4a42      	ldr	r2, [pc, #264]	; (80024ec <Tim7_Execution+0x160>)
 80023e2:	7813      	ldrb	r3, [r2, #0]
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	7013      	strb	r3, [r2, #0]
		}
	}

	if(Psfb_OnOffFlag == 1){
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <Tim7_Execution+0x164>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d124      	bne.n	800243c <Tim7_Execution+0xb0>
		softStartVariable(&phase_diff, 5000.0f, 4250.0f/7.0f , 4250.0f/7.0f);
 80023f2:	ed9f 1a40 	vldr	s2, [pc, #256]	; 80024f4 <Tim7_Execution+0x168>
 80023f6:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80024f4 <Tim7_Execution+0x168>
 80023fa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80024f8 <Tim7_Execution+0x16c>
 80023fe:	483a      	ldr	r0, [pc, #232]	; (80024e8 <Tim7_Execution+0x15c>)
 8002400:	f000 fd8b 	bl	8002f1a <softStartVariable>
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 1+ phase_diff.Dynamic;
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <Tim7_Execution+0x15c>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800240e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <Tim7_Execution+0x170>)
 8002414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002418:	ee17 2a90 	vmov	r2, s15
 800241c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 4250 + phase_diff.Dynamic;
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <Tim7_Execution+0x15c>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002500 <Tim7_Execution+0x174>
 800242a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <Tim7_Execution+0x170>)
 8002430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002434:	ee17 2a90 	vmov	r2, s15
 8002438:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

				/* Removing the AFE sine wave generation function as it is not needed now.
				 * Not removing from code because it maybe needed in future
				 */
//				if(HAL_GPIO_ReadPin(AFE_Switch_GPIO_Port,AFE_Switch_Pin) ==0 && PWMON_flag==1 && (status1.bits.sHealthStatus == 0))
				if(PWMON_flag==1 && (status1.bits.sHealthStatus == 0))
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <Tim7_Execution+0x178>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d149      	bne.n	80024d8 <Tim7_Execution+0x14c>
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <Tim7_Execution+0x160>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d142      	bne.n	80024d8 <Tim7_Execution+0x14c>
				{
					test_mode_count++;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <Tim7_Execution+0x17c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <Tim7_Execution+0x17c>)
 800245c:	701a      	strb	r2, [r3, #0]
					if(test_mode_count>=100)
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <Tim7_Execution+0x17c>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b63      	cmp	r3, #99	; 0x63
 8002464:	d902      	bls.n	800246c <Tim7_Execution+0xe0>
					{
						test_mode_count =0;
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <Tim7_Execution+0x17c>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
					}
					timer_period = HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR;
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <Tim7_Execution+0x170>)
 800246e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <Tim7_Execution+0x180>)
 8002474:	6013      	str	r3, [r2, #0]

					V_cmd = (R_sine_wave[test_mode_count]* mod_index+1) * (timer_period/2) ;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <Tim7_Execution+0x17c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4a25      	ldr	r2, [pc, #148]	; (8002510 <Tim7_Execution+0x184>)
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <Tim7_Execution+0x188>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <Tim7_Execution+0x180>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <Tim7_Execution+0x18c>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]
					//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, V_cmd*0.1);

					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP3xR = V_cmd;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <Tim7_Execution+0x18c>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <Tim7_Execution+0x170>)
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	ee17 2a90 	vmov	r2, s15
 80024be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP3xR = V_cmd;
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <Tim7_Execution+0x18c>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <Tim7_Execution+0x170>)
 80024ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80024d6:	e002      	b.n	80024de <Tim7_Execution+0x152>
				}
				else
				{
					dutyUpdate();
 80024d8:	f7ff fd5a 	bl	8001f90 <dutyUpdate>
				}
		#endif

//				MCU_LIVE_OFF;
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200004d4 	.word	0x200004d4
 80024e8:	200006b0 	.word	0x200006b0
 80024ec:	2000054c 	.word	0x2000054c
 80024f0:	200004d2 	.word	0x200004d2
 80024f4:	4417c925 	.word	0x4417c925
 80024f8:	459c4000 	.word	0x459c4000
 80024fc:	40016800 	.word	0x40016800
 8002500:	4584d000 	.word	0x4584d000
 8002504:	20000518 	.word	0x20000518
 8002508:	20000524 	.word	0x20000524
 800250c:	20000528 	.word	0x20000528
 8002510:	20000008 	.word	0x20000008
 8002514:	20000004 	.word	0x20000004
 8002518:	20000000 	.word	0x20000000

0800251c <TIM6_Execution>:
* Function Description:Low priority tasks execution in round robin algorithm
* Input:
* Return:
*/
void TIM6_Execution(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

	CNT_TIM6++; // Increment at every 50 mSec
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <TIM6_Execution+0x88>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <TIM6_Execution+0x88>)
 8002528:	6013      	str	r3, [r2, #0]
	if (CNT_TIM6%2 == 0){
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <TIM6_Execution+0x88>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <TIM6_Execution+0x20>
		mSec1_Flag = 1; // Every 1 mSec
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <TIM6_Execution+0x8c>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
	}
	if (CNT_TIM6%80 == 0){
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <TIM6_Execution+0x88>)
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <TIM6_Execution+0x90>)
 8002542:	fba3 2301 	umull	r2, r3, r3, r1
 8002546:	099a      	lsrs	r2, r3, #6
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1aca      	subs	r2, r1, r3
 8002552:	2a00      	cmp	r2, #0
 8002554:	d102      	bne.n	800255c <TIM6_Execution+0x40>
		mSec40_Flag = 1; // Every 40 mSec
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <TIM6_Execution+0x94>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
	}
	if (CNT_TIM6%2000 == 0){
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <TIM6_Execution+0x88>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <TIM6_Execution+0x98>)
 8002562:	fba3 1302 	umull	r1, r3, r3, r2
 8002566:	09db      	lsrs	r3, r3, #7
 8002568:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <TIM6_Execution+0x60>
		Sec1_Flag = 1; // Every 1 Sec
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <TIM6_Execution+0x9c>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
	}
	if(CNT_TIM6%100 == 0){
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <TIM6_Execution+0x88>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <TIM6_Execution+0xa0>)
 8002582:	fba3 1302 	umull	r1, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <TIM6_Execution+0x82>
		tempParameter_Calculations();
 8002594:	f7ff fafc 	bl	8001b90 <tempParameter_Calculations>
		mSec100_Flag = 1; //Every 100 mSec
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <TIM6_Execution+0xa4>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
	}
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000454 	.word	0x20000454
 80025a8:	20000450 	.word	0x20000450
 80025ac:	cccccccd 	.word	0xcccccccd
 80025b0:	20000451 	.word	0x20000451
 80025b4:	10624dd3 	.word	0x10624dd3
 80025b8:	20000452 	.word	0x20000452
 80025bc:	51eb851f 	.word	0x51eb851f
 80025c0:	20000453 	.word	0x20000453

080025c4 <turnOn_Scan>:
* Function Description: //Function to turn on the slave (SYNC pin will receive signal from master
* Input:
* Return:
*/
void turnOn_Scan(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0

//	g_cell_test_switch =GET_CELL_TEST_SWITCH;
	if (g_cell_test_switch ==0)		// CELL TEST MODE
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <turnOn_Scan+0x110>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <turnOn_Scan+0x22>
	{
		LED1_ON;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2120      	movs	r1, #32
 80025d4:	4840      	ldr	r0, [pc, #256]	; (80026d8 <turnOn_Scan+0x114>)
 80025d6:	f005 fbfb 	bl	8007dd0 <HAL_GPIO_WritePin>
		CELL_Mode = 1;		//Test mode enable
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <turnOn_Scan+0x118>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
		CELL_TEST();
 80025e0:	f7ff f804 	bl	80015ec <CELL_TEST>
 80025e4:	e060      	b.n	80026a8 <turnOn_Scan+0xe4>
	}

	else
	{
		CELL_Mode = 0;		// Normal mode of operation
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <turnOn_Scan+0x118>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
		LED1_OFF;
 80025ec:	2200      	movs	r2, #0
 80025ee:	2120      	movs	r1, #32
 80025f0:	4839      	ldr	r0, [pc, #228]	; (80026d8 <turnOn_Scan+0x114>)
 80025f2:	f005 fbed 	bl	8007dd0 <HAL_GPIO_WritePin>
		if((cmd.bits.psfb_on == 1) && (Psfb_OnOffFlag == 0) && (TurnONFlag == 0)  && (status1.bits.sHealthStatus == 0) )
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <turnOn_Scan+0x11c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <turnOn_Scan+0x68>
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <turnOn_Scan+0x120>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10f      	bne.n	800262c <turnOn_Scan+0x68>
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <turnOn_Scan+0x124>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <turnOn_Scan+0x68>
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <turnOn_Scan+0x128>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <turnOn_Scan+0x68>
		{
			Psfb_OnOffFlag = 1;
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <turnOn_Scan+0x120>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
			PSFBON();
 8002628:	f7ff f886 	bl	8001738 <PSFBON>
		}

		if((cmd.bits.system_on == 1) && (TurnONFlag == 0) && (status1.bits.psfbFeedback == 1)   && (status1.bits.sHealthStatus == 0) )
 800262c:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <turnOn_Scan+0x11c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d014      	beq.n	8002664 <turnOn_Scan+0xa0>
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <turnOn_Scan+0x124>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <turnOn_Scan+0xa0>
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <turnOn_Scan+0x128>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <turnOn_Scan+0xa0>
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <turnOn_Scan+0x128>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <turnOn_Scan+0xa0>
		{
			turnOn();
 800265e:	f000 f84b 	bl	80026f8 <turnOn>
 8002662:	e021      	b.n	80026a8 <turnOn_Scan+0xe4>
		}
		else if ((cmd.bits.system_on == 0 && TurnONFlag == 1 )  || (status1.bits.sHealthStatus != 0)  || ( (status1.bits.psfbFeedback == 1) && (cmd.bits.psfb_on == 0) )  )
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <turnOn_Scan+0x11c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <turnOn_Scan+0xb6>
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <turnOn_Scan+0x124>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d014      	beq.n	80026a4 <turnOn_Scan+0xe0>
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <turnOn_Scan+0x128>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <turnOn_Scan+0xe0>
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <turnOn_Scan+0x128>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <turnOn_Scan+0xe4>
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <turnOn_Scan+0x11c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <turnOn_Scan+0xe4>
		{
			turnOff();
 80026a4:	f000 f83c 	bl	8002720 <turnOff>
			//NOP;
		}
	}

//	g_reset_switch = GET_RESET_SWITCH;
    if (g_reset_switch ==0)        //fault reset through hardware switch for testing purpose
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <turnOn_Scan+0x12c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10e      	bne.n	80026ce <turnOn_Scan+0x10a>
    {
        fault_det++;
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <turnOn_Scan+0x130>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <turnOn_Scan+0x130>)
 80026b8:	6013      	str	r3, [r2, #0]
    	cmd.bits.fault_reset=1;
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <turnOn_Scan+0x11c>)
 80026bc:	7813      	ldrb	r3, [r2, #0]
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	7013      	strb	r3, [r2, #0]
    	LED2_OFF;
 80026c4:	2200      	movs	r2, #0
 80026c6:	2108      	movs	r1, #8
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <turnOn_Scan+0x114>)
 80026ca:	f005 fb81 	bl	8007dd0 <HAL_GPIO_WritePin>
    }
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000052e 	.word	0x2000052e
 80026d8:	48000400 	.word	0x48000400
 80026dc:	2000051c 	.word	0x2000051c
 80026e0:	20000548 	.word	0x20000548
 80026e4:	200004d2 	.word	0x200004d2
 80026e8:	200004d3 	.word	0x200004d3
 80026ec:	2000054c 	.word	0x2000054c
 80026f0:	2000052f 	.word	0x2000052f
 80026f4:	20000520 	.word	0x20000520

080026f8 <turnOn>:

void turnOn()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	TurnONFlag=1;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <turnOn+0x20>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
	if(cmd.bits.afe_pwm_mask == 1){
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <turnOn+0x24>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <turnOn+0x1c>
		PWMON();
 8002710:	f7ff f8a0 	bl	8001854 <PWMON>
	}
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200004d3 	.word	0x200004d3
 800271c:	20000548 	.word	0x20000548

08002720 <turnOff>:

void turnOff()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	cmd.bits.system_on = 0;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <turnOff+0x20>)
 8002726:	7813      	ldrb	r3, [r2, #0]
 8002728:	f36f 0300 	bfc	r3, #0, #1
 800272c:	7013      	strb	r3, [r2, #0]
	TurnONFlag = 0;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <turnOff+0x24>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
	PWMOFF();
 8002734:	f7ff f898 	bl	8001868 <PWMOFF>
	PSFBOFF();
 8002738:	f7ff f82e 	bl	8001798 <PSFBOFF>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000548 	.word	0x20000548
 8002744:	200004d3 	.word	0x200004d3

08002748 <reset_driver>:
#include "interface.h"
#include "error_display.h"
uint8_t fault_timer=0;

void reset_driver()
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(DRST_GPIO_Port, DRST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(DRST_GPIO_Port, DRST_Pin, GPIO_PIN_SET);
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <faultInit>:
 * We will check the parameter after calling the function
 * That will enable us to set the fault bit
 */
//Currently dummy values are given to the faults
void faultInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	//Over Idc (link current) parameters
	overlinkCurr.ovlCount = 0; //always initialized as 0
 800275c:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <faultInit+0x280>)
 800275e:	2200      	movs	r2, #0
 8002760:	801a      	strh	r2, [r3, #0]
	overlinkCurr.ovlFault = 0; //always initialized as 0
 8002762:	4b9d      	ldr	r3, [pc, #628]	; (80029d8 <faultInit+0x280>)
 8002764:	2200      	movs	r2, #0
 8002766:	805a      	strh	r2, [r3, #2]
	overlinkCurr.ovlResetCount = 0; //always initialized as 0
 8002768:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <faultInit+0x280>)
 800276a:	2200      	movs	r2, #0
 800276c:	809a      	strh	r2, [r3, #4]
	overlinkCurr.ovlNoOfReset = 3;
 800276e:	4b9a      	ldr	r3, [pc, #616]	; (80029d8 <faultInit+0x280>)
 8002770:	2203      	movs	r2, #3
 8002772:	80da      	strh	r2, [r3, #6]
	overlinkCurr.ovlFaultLatched = 0;
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <faultInit+0x280>)
 8002776:	2200      	movs	r2, #0
 8002778:	811a      	strh	r2, [r3, #8]
	overlinkCurr.ovlCoolDownCount = 0; //always initialized as 0
 800277a:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <faultInit+0x280>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
	overlinkCurr.threshold = 17.0f;
 8002780:	4b95      	ldr	r3, [pc, #596]	; (80029d8 <faultInit+0x280>)
 8002782:	2211      	movs	r2, #17
 8002784:	821a      	strh	r2, [r3, #16]
	overlinkCurr.threshold_time = 5.0f/1000.0f;
 8002786:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <faultInit+0x280>)
 8002788:	4a94      	ldr	r2, [pc, #592]	; (80029dc <faultInit+0x284>)
 800278a:	615a      	str	r2, [r3, #20]
	overlinkCurr.reset_threshold = 0; //Not applicable for current
 800278c:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <faultInit+0x280>)
 800278e:	2200      	movs	r2, #0
 8002790:	831a      	strh	r2, [r3, #24]
	overlinkCurr.reset_threshold_time = 0; //Not applicable for current
 8002792:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <faultInit+0x280>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
	overlinkCurr.no_of_reset = 0; //Not applicable for current
 800279a:	4b8f      	ldr	r3, [pc, #572]	; (80029d8 <faultInit+0x280>)
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overlinkCurr.autoreset = 0;  //Not applicable for current
 80027a2:	4b8d      	ldr	r3, [pc, #564]	; (80029d8 <faultInit+0x280>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]
	overlinkCurr.cooldown_enable = 1;
 80027aa:	4b8b      	ldr	r3, [pc, #556]	; (80029d8 <faultInit+0x280>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overlinkCurr.cooldown_time = 86400;
 80027b2:	4b89      	ldr	r3, [pc, #548]	; (80029d8 <faultInit+0x280>)
 80027b4:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <faultInit+0x288>)
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
	overlinkCurr.sampleFreq = 5000.0f;
 80027b8:	4b87      	ldr	r3, [pc, #540]	; (80029d8 <faultInit+0x280>)
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Over output current parameters
	overIout.ovlCount = 0; //always initialized as 0
 80027c0:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <faultInit+0x28c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	801a      	strh	r2, [r3, #0]
	overIout.ovlFault = 0; //always initialized as 0
 80027c6:	4b87      	ldr	r3, [pc, #540]	; (80029e4 <faultInit+0x28c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	805a      	strh	r2, [r3, #2]
	overIout.ovlResetCount = 0; //always initialized as 0
 80027cc:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <faultInit+0x28c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	809a      	strh	r2, [r3, #4]
	overIout.ovlNoOfReset = 3;
 80027d2:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <faultInit+0x28c>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	80da      	strh	r2, [r3, #6]
	overIout.ovlFaultLatched = 0;
 80027d8:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <faultInit+0x28c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	811a      	strh	r2, [r3, #8]
	overIout.ovlCoolDownCount = 0; //always initialized as 0
 80027de:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <faultInit+0x28c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
	overIout.threshold = 17.0f;
 80027e4:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <faultInit+0x28c>)
 80027e6:	2211      	movs	r2, #17
 80027e8:	821a      	strh	r2, [r3, #16]
	overIout.threshold_time = 5.0f/1000.0f;
 80027ea:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <faultInit+0x28c>)
 80027ec:	4a7b      	ldr	r2, [pc, #492]	; (80029dc <faultInit+0x284>)
 80027ee:	615a      	str	r2, [r3, #20]
	overIout.reset_threshold = 0; //Not applicable for current
 80027f0:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <faultInit+0x28c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	831a      	strh	r2, [r3, #24]
	overIout.reset_threshold_time = 0; //Not applicable for current
 80027f6:	4b7b      	ldr	r3, [pc, #492]	; (80029e4 <faultInit+0x28c>)
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
	overIout.no_of_reset = 0; //Not applicable for current
 80027fe:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <faultInit+0x28c>)
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overIout.autoreset = 0;  //Not applicable for current
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <faultInit+0x28c>)
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]
	overIout.cooldown_enable = 1;
 800280e:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <faultInit+0x28c>)
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overIout.cooldown_time = 86400;
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <faultInit+0x28c>)
 8002818:	4a71      	ldr	r2, [pc, #452]	; (80029e0 <faultInit+0x288>)
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
	overIout.sampleFreq = 5000.0f;
 800281c:	4b71      	ldr	r3, [pc, #452]	; (80029e4 <faultInit+0x28c>)
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Over Vdc (link voltage) parameters
	overlinkVolt.ovlCount = 0;  //always initialized as 0
 8002824:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <faultInit+0x290>)
 8002826:	2200      	movs	r2, #0
 8002828:	801a      	strh	r2, [r3, #0]
	overlinkVolt.ovlFault = 0; //always initialized as 0
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <faultInit+0x290>)
 800282c:	2200      	movs	r2, #0
 800282e:	805a      	strh	r2, [r3, #2]
	overlinkVolt.ovlResetCount = 0;
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <faultInit+0x290>)
 8002832:	2200      	movs	r2, #0
 8002834:	809a      	strh	r2, [r3, #4]
	overlinkVolt.ovlNoOfReset = 3;
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <faultInit+0x290>)
 8002838:	2203      	movs	r2, #3
 800283a:	80da      	strh	r2, [r3, #6]
	overlinkVolt.ovlFaultLatched = 0;
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <faultInit+0x290>)
 800283e:	2200      	movs	r2, #0
 8002840:	811a      	strh	r2, [r3, #8]
	overlinkVolt.ovlCoolDownCount = 0; //always initialized as 0
 8002842:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <faultInit+0x290>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
	overlinkVolt.threshold = 1190.0f;
 8002848:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <faultInit+0x290>)
 800284a:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800284e:	821a      	strh	r2, [r3, #16]
	overlinkVolt.threshold_time = 5.0f/1000.0f;
 8002850:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <faultInit+0x290>)
 8002852:	4a62      	ldr	r2, [pc, #392]	; (80029dc <faultInit+0x284>)
 8002854:	615a      	str	r2, [r3, #20]
	overlinkVolt.reset_threshold = 900; //TBD
 8002856:	4b64      	ldr	r3, [pc, #400]	; (80029e8 <faultInit+0x290>)
 8002858:	f44f 7261 	mov.w	r2, #900	; 0x384
 800285c:	831a      	strh	r2, [r3, #24]
	overlinkVolt.reset_threshold_time =5.0f/1000.0f;
 800285e:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <faultInit+0x290>)
 8002860:	4a5e      	ldr	r2, [pc, #376]	; (80029dc <faultInit+0x284>)
 8002862:	61da      	str	r2, [r3, #28]
	overlinkVolt.no_of_reset = 0;
 8002864:	4b60      	ldr	r3, [pc, #384]	; (80029e8 <faultInit+0x290>)
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overlinkVolt.autoreset = 0;
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <faultInit+0x290>)
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]
	overlinkVolt.cooldown_enable = 1;
 8002874:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <faultInit+0x290>)
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overlinkVolt.cooldown_time = 86400;
 800287c:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <faultInit+0x290>)
 800287e:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <faultInit+0x288>)
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
	overlinkVolt.sampleFreq = 5000.0f;
 8002882:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <faultInit+0x290>)
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Under Vdc (link voltage) parameters
	underlinkVolt.underLCount = 0; //always initialized as 0
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <faultInit+0x294>)
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]
	underlinkVolt.underLFault = 0; //always initialized as 0
 8002890:	4b56      	ldr	r3, [pc, #344]	; (80029ec <faultInit+0x294>)
 8002892:	2200      	movs	r2, #0
 8002894:	805a      	strh	r2, [r3, #2]
	underlinkVolt.underLResetCount = 0; //always initialized as 0
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <faultInit+0x294>)
 8002898:	2200      	movs	r2, #0
 800289a:	809a      	strh	r2, [r3, #4]
	underlinkVolt.underLNoOfReset = 3;
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <faultInit+0x294>)
 800289e:	2203      	movs	r2, #3
 80028a0:	80da      	strh	r2, [r3, #6]
	underlinkVolt.underLFaultLatched = 0;
 80028a2:	4b52      	ldr	r3, [pc, #328]	; (80029ec <faultInit+0x294>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	811a      	strh	r2, [r3, #8]
	underlinkVolt.underLCoolDownCount = 0;
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <faultInit+0x294>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	815a      	strh	r2, [r3, #10]
	underlinkVolt.threshold = 90; //TBD
 80028ae:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <faultInit+0x294>)
 80028b0:	225a      	movs	r2, #90	; 0x5a
 80028b2:	819a      	strh	r2, [r3, #12]
	underlinkVolt.threshold_time = 5.0f/1000.0f;
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <faultInit+0x294>)
 80028b6:	4a49      	ldr	r2, [pc, #292]	; (80029dc <faultInit+0x284>)
 80028b8:	611a      	str	r2, [r3, #16]
	underlinkVolt.reset_threshold = 95; //TBD
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <faultInit+0x294>)
 80028bc:	225f      	movs	r2, #95	; 0x5f
 80028be:	829a      	strh	r2, [r3, #20]
	underlinkVolt.reset_threshold_time = 5.0f/1000.0f;
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <faultInit+0x294>)
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <faultInit+0x284>)
 80028c4:	619a      	str	r2, [r3, #24]
	underlinkVolt.no_of_reset = 3;
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <faultInit+0x294>)
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	underlinkVolt.autoreset = 0;
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <faultInit+0x294>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
	underlinkVolt.cooldown_enable = 1;
 80028d4:	4b45      	ldr	r3, [pc, #276]	; (80029ec <faultInit+0x294>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	775a      	strb	r2, [r3, #29]
	underlinkVolt.cooldown_time = 86400;
 80028da:	4b44      	ldr	r3, [pc, #272]	; (80029ec <faultInit+0x294>)
 80028dc:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <faultInit+0x288>)
 80028de:	621a      	str	r2, [r3, #32]
	underlinkVolt.sampleFreq = 5000.0f;
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <faultInit+0x294>)
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	84da      	strh	r2, [r3, #38]	; 0x26
//	overtimedIout.cooldown_enable = 1;
//	overtimedIout.cooldown_time = 1000;
//	overtimedIout.sampleFreq = 5000.0f;

// Over diode temperature parameters
	overDiodeTemp.ovlCount = 0; //always initialized as 0
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <faultInit+0x298>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	801a      	strh	r2, [r3, #0]
	overDiodeTemp.ovlFault = 0; //always initialized as 0
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <faultInit+0x298>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	805a      	strh	r2, [r3, #2]
	overDiodeTemp.ovlResetCount = 0; //always initialized as 0
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <faultInit+0x298>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	809a      	strh	r2, [r3, #4]
	overDiodeTemp.ovlNoOfReset = 3;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <faultInit+0x298>)
 80028fc:	2203      	movs	r2, #3
 80028fe:	80da      	strh	r2, [r3, #6]
	overDiodeTemp.ovlFaultLatched = 0;
 8002900:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <faultInit+0x298>)
 8002902:	2200      	movs	r2, #0
 8002904:	811a      	strh	r2, [r3, #8]
	overDiodeTemp.ovlCoolDownCount = 0;
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <faultInit+0x298>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
	overDiodeTemp.threshold =  90;
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <faultInit+0x298>)
 800290e:	225a      	movs	r2, #90	; 0x5a
 8002910:	821a      	strh	r2, [r3, #16]
	overDiodeTemp.threshold_time = 1000; // 1/40*5
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <faultInit+0x298>)
 8002914:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <faultInit+0x29c>)
 8002916:	615a      	str	r2, [r3, #20]
	overDiodeTemp.reset_threshold = 80;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <faultInit+0x298>)
 800291a:	2250      	movs	r2, #80	; 0x50
 800291c:	831a      	strh	r2, [r3, #24]
	overDiodeTemp.reset_threshold_time = 1000; // 1/40*5
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <faultInit+0x298>)
 8002920:	4a34      	ldr	r2, [pc, #208]	; (80029f4 <faultInit+0x29c>)
 8002922:	61da      	str	r2, [r3, #28]
	overDiodeTemp.no_of_reset = 0;
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <faultInit+0x298>)
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overDiodeTemp.autoreset = 0;
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <faultInit+0x298>)
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
	overDiodeTemp.cooldown_enable = 1;
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <faultInit+0x298>)
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overDiodeTemp.cooldown_time = 1000;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <faultInit+0x298>)
 800293e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
	overDiodeTemp.sampleFreq = 40.0f;
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <faultInit+0x298>)
 8002946:	2228      	movs	r2, #40	; 0x28
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over psfb temperature parameters
	overPsfbTemp.ovlCount = 0; //always initialized as 0
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <faultInit+0x2a0>)
 800294c:	2200      	movs	r2, #0
 800294e:	801a      	strh	r2, [r3, #0]
	overPsfbTemp.ovlFault = 0; //always initialized as 0
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <faultInit+0x2a0>)
 8002952:	2200      	movs	r2, #0
 8002954:	805a      	strh	r2, [r3, #2]
	overPsfbTemp.ovlResetCount = 0; //always initialized as 0
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <faultInit+0x2a0>)
 8002958:	2200      	movs	r2, #0
 800295a:	809a      	strh	r2, [r3, #4]
	overPsfbTemp.ovlNoOfReset = 3;
 800295c:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <faultInit+0x2a0>)
 800295e:	2203      	movs	r2, #3
 8002960:	80da      	strh	r2, [r3, #6]
	overPsfbTemp.ovlFaultLatched = 0;
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <faultInit+0x2a0>)
 8002964:	2200      	movs	r2, #0
 8002966:	811a      	strh	r2, [r3, #8]
	overPsfbTemp.ovlCoolDownCount = 0;
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <faultInit+0x2a0>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
	overPsfbTemp.threshold = 90;
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <faultInit+0x2a0>)
 8002970:	225a      	movs	r2, #90	; 0x5a
 8002972:	821a      	strh	r2, [r3, #16]
	overPsfbTemp.threshold_time = 1000; // 1/40*5
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <faultInit+0x2a0>)
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <faultInit+0x29c>)
 8002978:	615a      	str	r2, [r3, #20]
	overPsfbTemp.reset_threshold = 80;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <faultInit+0x2a0>)
 800297c:	2250      	movs	r2, #80	; 0x50
 800297e:	831a      	strh	r2, [r3, #24]
	overPsfbTemp.reset_threshold_time = 1000; // 1/40*5
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <faultInit+0x2a0>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <faultInit+0x29c>)
 8002984:	61da      	str	r2, [r3, #28]
	overPsfbTemp.no_of_reset = 0;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <faultInit+0x2a0>)
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overPsfbTemp.autoreset = 0;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <faultInit+0x2a0>)
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2020 	strb.w	r2, [r3, #32]
	overPsfbTemp.cooldown_enable = 1;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <faultInit+0x2a0>)
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overPsfbTemp.cooldown_time = 1000;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <faultInit+0x2a0>)
 80029a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
	overPsfbTemp.sampleFreq = 40.0f;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <faultInit+0x2a0>)
 80029a8:	2228      	movs	r2, #40	; 0x28
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over AFE temperature parameters
	overAfeTemp.ovlCount = 0; //always initialized as 0
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <faultInit+0x2a4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	801a      	strh	r2, [r3, #0]
	overAfeTemp.ovlFault = 0; //always initialized as 0
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <faultInit+0x2a4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	805a      	strh	r2, [r3, #2]
	overAfeTemp.ovlResetCount = 0; //always initialized as 0
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <faultInit+0x2a4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	809a      	strh	r2, [r3, #4]
	overAfeTemp.ovlNoOfReset = 3;
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <faultInit+0x2a4>)
 80029c0:	2203      	movs	r2, #3
 80029c2:	80da      	strh	r2, [r3, #6]
	overAfeTemp.ovlFaultLatched = 0;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <faultInit+0x2a4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	811a      	strh	r2, [r3, #8]
	overAfeTemp.ovlCoolDownCount = 0;
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <faultInit+0x2a4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
	overAfeTemp.threshold = 90;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <faultInit+0x2a4>)
 80029d2:	225a      	movs	r2, #90	; 0x5a
 80029d4:	821a      	strh	r2, [r3, #16]
 80029d6:	e013      	b.n	8002a00 <faultInit+0x2a8>
 80029d8:	20000550 	.word	0x20000550
 80029dc:	3ba3d70a 	.word	0x3ba3d70a
 80029e0:	00015180 	.word	0x00015180
 80029e4:	200005a8 	.word	0x200005a8
 80029e8:	2000057c 	.word	0x2000057c
 80029ec:	20000684 	.word	0x20000684
 80029f0:	200005d4 	.word	0x200005d4
 80029f4:	447a0000 	.word	0x447a0000
 80029f8:	20000600 	.word	0x20000600
 80029fc:	2000062c 	.word	0x2000062c
	overAfeTemp.threshold_time = 1000; // 1/40*5
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <faultInit+0x34c>)
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <faultInit+0x350>)
 8002a04:	615a      	str	r2, [r3, #20]
	overAfeTemp.reset_threshold = 80;
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <faultInit+0x34c>)
 8002a08:	2250      	movs	r2, #80	; 0x50
 8002a0a:	831a      	strh	r2, [r3, #24]
	overAfeTemp.reset_threshold_time = 1000; // 1/40*5
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <faultInit+0x34c>)
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <faultInit+0x350>)
 8002a10:	61da      	str	r2, [r3, #28]
	overAfeTemp.no_of_reset = 0;
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <faultInit+0x34c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overAfeTemp.autoreset = 0;
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <faultInit+0x34c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
	overAfeTemp.cooldown_enable = 1;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <faultInit+0x34c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overAfeTemp.cooldown_time = 1000;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <faultInit+0x34c>)
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
	overAfeTemp.sampleFreq = 40.0f;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <faultInit+0x34c>)
 8002a34:	2228      	movs	r2, #40	; 0x28
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over Trafo temperature parameters
	overTrafoTemp.ovlCount = 0; //always initialized as 0
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <faultInit+0x354>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
	overTrafoTemp.ovlFault = 0; //always initialized as 0
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <faultInit+0x354>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	805a      	strh	r2, [r3, #2]
	overTrafoTemp.ovlResetCount = 0; //always initialized as 0
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <faultInit+0x354>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	809a      	strh	r2, [r3, #4]
	overTrafoTemp.ovlNoOfReset = 3;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <faultInit+0x354>)
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	80da      	strh	r2, [r3, #6]
	overTrafoTemp.ovlFaultLatched = 0;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <faultInit+0x354>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	811a      	strh	r2, [r3, #8]
	overTrafoTemp.ovlCoolDownCount = 0;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <faultInit+0x354>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
	overTrafoTemp.threshold = 90;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <faultInit+0x354>)
 8002a5e:	225a      	movs	r2, #90	; 0x5a
 8002a60:	821a      	strh	r2, [r3, #16]
	overTrafoTemp.threshold_time = 1000; // 1/40*5
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <faultInit+0x354>)
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <faultInit+0x350>)
 8002a66:	615a      	str	r2, [r3, #20]
	overTrafoTemp.reset_threshold = 80;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <faultInit+0x354>)
 8002a6a:	2250      	movs	r2, #80	; 0x50
 8002a6c:	831a      	strh	r2, [r3, #24]
	overTrafoTemp.reset_threshold_time = 1000; // 1/40*5
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <faultInit+0x354>)
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <faultInit+0x350>)
 8002a72:	61da      	str	r2, [r3, #28]
	overTrafoTemp.no_of_reset = 0;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <faultInit+0x354>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overTrafoTemp.autoreset = 0;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <faultInit+0x354>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]
	overTrafoTemp.cooldown_enable = 1;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <faultInit+0x354>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overTrafoTemp.cooldown_time = 1000;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <faultInit+0x354>)
 8002a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
	overTrafoTemp.sampleFreq = 40.0f;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <faultInit+0x354>)
 8002a96:	2228      	movs	r2, #40	; 0x28
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	2000062c 	.word	0x2000062c
 8002aa8:	447a0000 	.word	0x447a0000
 8002aac:	20000658 	.word	0x20000658

08002ab0 <check_over_limit>:


void check_over_limit(ovLFault_t *fhand, float value)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	ed87 0a00 	vstr	s0, [r7]


	if(fhand->ovlFault!=1){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	885b      	ldrh	r3, [r3, #2]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d033      	beq.n	8002b2c <check_over_limit+0x7c>
	//check if the quantity is above the threshold
		if(value > fhand->threshold){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8a1b      	ldrh	r3, [r3, #16]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	ed97 7a00 	vldr	s14, [r7]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	dd06      	ble.n	8002aec <check_over_limit+0x3c>
			fhand->ovlCount = fhand->ovlCount + 1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e002      	b.n	8002af2 <check_over_limit+0x42>
		}else{
			fhand->ovlCount = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
		}


		//check if the quantity is above the threshold for given time

		if(fhand->ovlCount > (fhand->sampleFreq*fhand->threshold_time)){
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd48      	ble.n	8002bb0 <check_over_limit+0x100>
			fhand->ovlCount = 0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]
			fhand->ovlFault = 1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	805a      	strh	r2, [r3, #2]
 8002b2a:	e041      	b.n	8002bb0 <check_over_limit+0x100>
					}

	}else{
		//try auto reset if the fault is not latched
		if(fhand->autoreset && (!fhand->ovlFaultLatched)){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03c      	beq.n	8002bb0 <check_over_limit+0x100>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	891b      	ldrh	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d138      	bne.n	8002bb0 <check_over_limit+0x100>
		 //check if the voltage is below the reset threshold
			if(value < fhand->reset_threshold){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8b1b      	ldrh	r3, [r3, #24]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4a:	ed97 7a00 	vldr	s14, [r7]
 8002b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	d506      	bpl.n	8002b66 <check_over_limit+0xb6>
				fhand->ovlResetCount = fhand->ovlResetCount + 1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	809a      	strh	r2, [r3, #4]
 8002b64:	e002      	b.n	8002b6c <check_over_limit+0xbc>
			}else{
				fhand->ovlResetCount =0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	809a      	strh	r2, [r3, #4]
			}
			//check if the quantity is below the reset threshold for given time
			if(fhand->ovlResetCount > (fhand->sampleFreq*fhand->reset_threshold_time)){
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	889b      	ldrh	r3, [r3, #4]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	dd0b      	ble.n	8002bb0 <check_over_limit+0x100>
				fhand->ovlResetCount = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	809a      	strh	r2, [r3, #4]
				fhand->ovlFault = 0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	805a      	strh	r2, [r3, #2]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset + 1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	88db      	ldrh	r3, [r3, #6]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	80da      	strh	r2, [r3, #6]
	//cool down time means that "no_of_reset" will be reduced by one for every given time
	//this is to prevent the fault accumulation.
	//example: if one over voltage fault occurred today and next one occurred previous week
	//with COOLDOWN_ENABLE "no_of_reset" will be 1
	//without COOLDOWN_ENABLE "no_of_reset" will be 2
	if(fhand->cooldown_enable){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01c      	beq.n	8002bf4 <check_over_limit+0x144>
		if(fhand->ovlNoOfReset > 0){
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <check_over_limit+0x144>
			fhand->ovlCoolDownCount = fhand->ovlCoolDownCount + 1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
			if(fhand->ovlCoolDownCount > (fhand->sampleFreq*fhand->cooldown_time)){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d908      	bls.n	8002bf4 <check_over_limit+0x144>
				fhand->ovlCoolDownCount = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset - 1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	88db      	ldrh	r3, [r3, #6]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	80da      	strh	r2, [r3, #6]
			}
		}
	}
	//if the fault is reset for given number of times, latch the fault
	if(fhand->ovlNoOfReset > fhand->no_of_reset){
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	88da      	ldrh	r2, [r3, #6]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d905      	bls.n	8002c10 <check_over_limit+0x160>
		fhand->ovlNoOfReset = 0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	80da      	strh	r2, [r3, #6]
		fhand->ovlFaultLatched = 1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	811a      	strh	r2, [r3, #8]
	}
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <check_over_limitI>:
			fhand->underLFaultLatched = 1;
		}
}

void check_over_limitI(ovLFault_t *fhand, float value)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	ed87 0a00 	vstr	s0, [r7]
	if(fhand->ovlFault!=1){
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	885b      	ldrh	r3, [r3, #2]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d038      	beq.n	8002ca2 <check_over_limitI+0x86>
	//check if the quantity is above the threshold
		if(value > fhand->threshold){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8a1b      	ldrh	r3, [r3, #16]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	ed97 7a00 	vldr	s14, [r7]
 8002c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	dd06      	ble.n	8002c58 <check_over_limitI+0x3c>
			fhand->ovlCount = fhand->ovlCount + 1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e002      	b.n	8002c5e <check_over_limitI+0x42>
		}else{
			fhand->ovlCount = 0;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
		}

		//check if the quantity is above the threshold for given time
		if(fhand->ovlCount > (fhand->sampleFreq*fhand->threshold_time)){
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	dd0b      	ble.n	8002ca2 <check_over_limitI+0x86>
			fhand->ovlCount = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
			fhand->ovlFault = 1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	805a      	strh	r2, [r3, #2]
			fhand->ovlNoOfReset += 1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	88db      	ldrh	r3, [r3, #6]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	80da      	strh	r2, [r3, #6]
			//cool down time means that "no_of_reset" will be reduced by one for every given time
			//this is to prevent the fault accumulation.
			//example: if one over voltage fault occurred today and next one occurred previous week
			//with COOLDOWN_ENABLE "no_of_reset" will be 1
			//without COOLDOWN_ENABLE "no_of_reset" will be 2
	if(fhand->cooldown_enable){
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01c      	beq.n	8002ce6 <check_over_limitI+0xca>
		if(fhand->ovlNoOfReset > 0){
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	88db      	ldrh	r3, [r3, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d018      	beq.n	8002ce6 <check_over_limitI+0xca>
			fhand->ovlCoolDownCount = fhand->ovlCoolDownCount + 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
			if(fhand->ovlCoolDownCount > (fhand->sampleFreq*fhand->cooldown_time)){
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d908      	bls.n	8002ce6 <check_over_limitI+0xca>
				fhand->ovlCoolDownCount = 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset - 1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	88db      	ldrh	r3, [r3, #6]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	80da      	strh	r2, [r3, #6]
			}
		}
	}

	//if the fault is reset for given number of times, latch the fault
	if(fhand->ovlNoOfReset > fhand->no_of_reset){
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	88da      	ldrh	r2, [r3, #6]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d905      	bls.n	8002d02 <check_over_limitI+0xe6>
		fhand->ovlNoOfReset = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	80da      	strh	r2, [r3, #6]
		fhand->ovlFaultLatched = 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	811a      	strh	r2, [r3, #8]
	}
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <slave_health>:

void slave_health()
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

	if(fault1.byte != 0|| /*fault2.byte != 0 || fault3.byte != 0|| fault4.byte != 0 ||*/ fault5.byte != 0 /*|| fault6.byte != 0 || fault7.byte != 0*/)
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <slave_health+0x44>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <slave_health+0x14>
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <slave_health+0x48>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d011      	beq.n	8002d48 <slave_health+0x38>
	{
		status1.bits.sHealthStatus = 1;
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <slave_health+0x4c>)
 8002d26:	7813      	ldrb	r3, [r2, #0]
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	7013      	strb	r3, [r2, #0]
		fault_timer++;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <slave_health+0x50>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <slave_health+0x50>)
 8002d38:	701a      	strb	r2, [r3, #0]
		if (fault_timer > 250)
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <slave_health+0x50>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d40:	d902      	bls.n	8002d48 <slave_health+0x38>
		{
			//LED2_TOGGLE;
			fault_timer = 0;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <slave_health+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000530 	.word	0x20000530
 8002d58:	20000540 	.word	0x20000540
 8002d5c:	2000054c 	.word	0x2000054c
 8002d60:	200006ad 	.word	0x200006ad

08002d64 <manual_fault_reset>:
/*
 * This function will try to reset the fault if the faults are no longer present.
 * whenever cmd.bits.fault_reset = 1; this function will be executed once
 */
void manual_fault_reset(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	status1.bits.sHealthStatus = 0;
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <manual_fault_reset+0x164>)
 8002d6a:	7813      	ldrb	r3, [r2, #0]
 8002d6c:	f36f 0300 	bfc	r3, #0, #1
 8002d70:	7013      	strb	r3, [r2, #0]
	sHealthStatus = 0;
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <manual_fault_reset+0x168>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	cmd.bits.fault_reset = 0;
 8002d78:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <manual_fault_reset+0x16c>)
 8002d7a:	7813      	ldrb	r3, [r2, #0]
 8002d7c:	f36f 0341 	bfc	r3, #1, #1
 8002d80:	7013      	strb	r3, [r2, #0]
	turnOff();
 8002d82:	f7ff fccd 	bl	8002720 <turnOff>
	LED2_OFF;
 8002d86:	2200      	movs	r2, #0
 8002d88:	2108      	movs	r1, #8
 8002d8a:	4852      	ldr	r0, [pc, #328]	; (8002ed4 <manual_fault_reset+0x170>)
 8002d8c:	f005 f820 	bl	8007dd0 <HAL_GPIO_WritePin>
	if (fault5.byte!= 0)
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <manual_fault_reset+0x174>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <manual_fault_reset+0x6e>
	{
	reset_driver(); //reset the driver
 8002d98:	f7ff fcd6 	bl	8002748 <reset_driver>
	fault5.byte = 0;
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <manual_fault_reset+0x174>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	remove_error_from_list(18);
 8002da2:	2012      	movs	r0, #18
 8002da4:	f001 f822 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(19);
 8002da8:	2013      	movs	r0, #19
 8002daa:	f001 f81f 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(20);
 8002dae:	2014      	movs	r0, #20
 8002db0:	f001 f81c 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(21);
 8002db4:	2015      	movs	r0, #21
 8002db6:	f001 f819 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(22);
 8002dba:	2016      	movs	r0, #22
 8002dbc:	f001 f816 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(23);
 8002dc0:	2017      	movs	r0, #23
 8002dc2:	f001 f813 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(24);
 8002dc6:	2018      	movs	r0, #24
 8002dc8:	f001 f810 	bl	8003dec <remove_error_from_list>
	remove_error_from_list(25);
 8002dcc:	2019      	movs	r0, #25
 8002dce:	f001 f80d 	bl	8003dec <remove_error_from_list>
	}
	if(fault1.bits.over_Ilink == 1){ //check if fault is present
 8002dd2:	4b42      	ldr	r3, [pc, #264]	; (8002edc <manual_fault_reset+0x178>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <manual_fault_reset+0x88>
		overlinkCurr.ovlFault = 0;
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <manual_fault_reset+0x17c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f001 f800 	bl	8003dec <remove_error_from_list>
	}
	if(fault1.bits.over_Vlink == 1){
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <manual_fault_reset+0x178>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <manual_fault_reset+0xa2>
		overlinkVolt.ovlFault = 0;
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <manual_fault_reset+0x180>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(2);
 8002e00:	2002      	movs	r0, #2
 8002e02:	f000 fff3 	bl	8003dec <remove_error_from_list>
	}
		if(fault2.bits.under_Vout == 1){
		underVout.underLFault = 0;
	}
	*/
	if(fault1.bits.over_Iout == 1){
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <manual_fault_reset+0x178>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <manual_fault_reset+0xbc>
		overIout.ovlFault = 0;
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <manual_fault_reset+0x184>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(3);
 8002e1a:	2003      	movs	r0, #3
 8002e1c:	f000 ffe6 	bl	8003dec <remove_error_from_list>

//	if(fault1.bits.overTimed_Iout == 1){
//		overtimedIout.ovlFault = 0;
//	}

	if(fault2.bits.underVlink == 1){
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <manual_fault_reset+0x188>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <manual_fault_reset+0xd6>
		underlinkVolt.underLFault = 0;
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <manual_fault_reset+0x18c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(5);
 8002e34:	2005      	movs	r0, #5
 8002e36:	f000 ffd9 	bl	8003dec <remove_error_from_list>
	}

	if(fault4.bits.overTemp_diode == 1){
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <manual_fault_reset+0xf0>
		overDiodeTemp.ovlFault = 0;
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <manual_fault_reset+0x194>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(17);
 8002e4e:	2011      	movs	r0, #17
 8002e50:	f000 ffcc 	bl	8003dec <remove_error_from_list>
	}
	if(fault4.bits.overTemp_afe == 1){
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <manual_fault_reset+0x10a>
		overAfeTemp.ovlFault = 0;
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <manual_fault_reset+0x198>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(14);
 8002e68:	200e      	movs	r0, #14
 8002e6a:	f000 ffbf 	bl	8003dec <remove_error_from_list>
	}
	if(fault4.bits.overTemp_psfb == 1){
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <manual_fault_reset+0x124>
		overPsfbTemp.ovlFault = 0;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <manual_fault_reset+0x19c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(16);
 8002e82:	2010      	movs	r0, #16
 8002e84:	f000 ffb2 	bl	8003dec <remove_error_from_list>
	}
	if(fault4.bits.overTemp_trafo == 1){
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <manual_fault_reset+0x13e>
		overTrafoTemp.ovlFault = 0;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <manual_fault_reset+0x1a0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(15);
 8002e9c:	200f      	movs	r0, #15
 8002e9e:	f000 ffa5 	bl	8003dec <remove_error_from_list>
	}
	if(fault3.bits.driver_not_ready == 1){
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <manual_fault_reset+0x1a4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <manual_fault_reset+0x160>
		reset_driver();
 8002eb0:	f7ff fc4a 	bl	8002748 <reset_driver>
		fault3.bits.driver_not_ready= 0;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <manual_fault_reset+0x1a4>)
 8002eb6:	7813      	ldrb	r3, [r2, #0]
 8002eb8:	f36f 0382 	bfc	r3, #2, #1
 8002ebc:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(8);
 8002ebe:	2008      	movs	r0, #8
 8002ec0:	f000 ff94 	bl	8003dec <remove_error_from_list>
	}
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000054c 	.word	0x2000054c
 8002ecc:	200006ac 	.word	0x200006ac
 8002ed0:	20000548 	.word	0x20000548
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	20000540 	.word	0x20000540
 8002edc:	20000530 	.word	0x20000530
 8002ee0:	20000550 	.word	0x20000550
 8002ee4:	2000057c 	.word	0x2000057c
 8002ee8:	200005a8 	.word	0x200005a8
 8002eec:	20000534 	.word	0x20000534
 8002ef0:	20000684 	.word	0x20000684
 8002ef4:	2000053c 	.word	0x2000053c
 8002ef8:	200005d4 	.word	0x200005d4
 8002efc:	2000062c 	.word	0x2000062c
 8002f00:	20000600 	.word	0x20000600
 8002f04:	20000658 	.word	0x20000658
 8002f08:	20000538 	.word	0x20000538

08002f0c <faultDetection>:

void faultDetection(void){
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	}
	if((HAL_GPIO_ReadPin(OCFm_GPIO_Port, OCFm_Pin) == 0) && fault7.bits.ocf_m == 0){
		fault7.bits.ocf_m = 1;
		add_error_to_list(26);
	}*/
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <softStartVariable>:
/*
* Function Description: To give soft start to variables
* Input:
* Return:
*/
void softStartVariable(softStart_Structure *Temp, float sampleFreq, float Positive_SlwRate, float Negative_SlwRate){
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f26:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f2a:	ed87 1a00 	vstr	s2, [r7]
	float positiveStepSize = (float)Positive_SlwRate/sampleFreq;
 8002f2e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f32:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float negativeStepSize = (float)Negative_SlwRate/sampleFreq;
 8002f3e:	edd7 6a00 	vldr	s13, [r7]
 8002f42:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	edc7 7a04 	vstr	s15, [r7, #16]

	if(Temp -> Dynamic <= (Temp -> Fix - positiveStepSize*2.0f)){
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	d80a      	bhi.n	8002f86 <softStartVariable+0x6c>
		Temp -> Dynamic = Temp -> Dynamic + positiveStepSize;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	ed93 7a00 	vldr	s14, [r3]
 8002f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	edc3 7a00 	vstr	s15, [r3]
	}else if(Temp -> Dynamic >= (Temp -> Fix + negativeStepSize*2.0f)){
	Temp -> Dynamic = Temp -> Dynamic - negativeStepSize;
 }else {
	Temp -> Dynamic = Temp -> Fix;
 }
}
 8002f84:	e01f      	b.n	8002fc6 <softStartVariable+0xac>
	}else if(Temp -> Dynamic >= (Temp -> Fix + negativeStepSize*2.0f)){
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	db0a      	blt.n	8002fbe <softStartVariable+0xa4>
	Temp -> Dynamic = Temp -> Dynamic - negativeStepSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	ed93 7a00 	vldr	s14, [r3]
 8002fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	edc3 7a00 	vstr	s15, [r3]
}
 8002fbc:	e003      	b.n	8002fc6 <softStartVariable+0xac>
	Temp -> Dynamic = Temp -> Fix;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_UART_RxCpltCallback>:

extern UART_HandleTypeDef huart5;

/*Receive data interrupt*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART5)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_UART_RxCpltCallback+0x54>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11c      	bne.n	8003020 <HAL_UART_RxCpltCallback+0x4c>
	{
		RxInterruptFlag = SET;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_UART_RxCpltCallback+0x58>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
		ModbusRx[DataCounter++] = uartRxData;
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_UART_RxCpltCallback+0x5c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	b2d1      	uxtb	r1, r2
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <HAL_UART_RxCpltCallback+0x5c>)
 8002ff6:	7011      	strb	r1, [r2, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_UART_RxCpltCallback+0x60>)
 8002ffc:	7819      	ldrb	r1, [r3, #0]
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <HAL_UART_RxCpltCallback+0x64>)
 8003000:	5499      	strb	r1, [r3, r2]
		if(DataCounter >= BUFFERSIZE)
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_UART_RxCpltCallback+0x5c>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b18      	cmp	r3, #24
 8003008:	d902      	bls.n	8003010 <HAL_UART_RxCpltCallback+0x3c>
		{
			DataCounter  = 0;
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_UART_RxCpltCallback+0x5c>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart5 , &uartRxData , 1);
 8003010:	2201      	movs	r2, #1
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <HAL_UART_RxCpltCallback+0x60>)
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <HAL_UART_RxCpltCallback+0x68>)
 8003016:	f008 feeb 	bl	800bdf0 <HAL_UART_Receive_IT>
		uartTimeCounter = 0;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_UART_RxCpltCallback+0x6c>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
	}
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40005000 	.word	0x40005000
 800302c:	200006ec 	.word	0x200006ec
 8003030:	200006eb 	.word	0x200006eb
 8003034:	200006ea 	.word	0x200006ea
 8003038:	200006f0 	.word	0x200006f0
 800303c:	20000bac 	.word	0x20000bac
 8003040:	200006ed 	.word	0x200006ed

08003044 <transmitDataMake>:


/*calls the corresponding function according to the received function command*/
void transmitDataMake(char *msg, uint8_t Lenght)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
	switch(msg[1])
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3301      	adds	r3, #1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d847      	bhi.n	80030ec <transmitDataMake+0xa8>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <transmitDataMake+0x20>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030ed 	.word	0x080030ed
 800306c:	080030b1 	.word	0x080030b1
 8003070:	080030ed 	.word	0x080030ed
 8003074:	080030c9 	.word	0x080030c9
 8003078:	080030bd 	.word	0x080030bd
 800307c:	080030ed 	.word	0x080030ed
 8003080:	080030ed 	.word	0x080030ed
 8003084:	080030ed 	.word	0x080030ed
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030ed 	.word	0x080030ed
 8003090:	080030ed 	.word	0x080030ed
 8003094:	080030ed 	.word	0x080030ed
 8003098:	080030ed 	.word	0x080030ed
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030e1 	.word	0x080030e1
	{
	case ReadCoil:
		makePacket_01(msg, Lenght);
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8b3 	bl	8003214 <makePacket_01>
		break;
 80030ae:	e01d      	b.n	80030ec <transmitDataMake+0xa8>

	case ReadHoldingRegister:
		makePacket_03(msg, Lenght);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f97d 	bl	80033b4 <makePacket_03>
		break;
 80030ba:	e017      	b.n	80030ec <transmitDataMake+0xa8>

	case WriteSingleRegister:
		makePacket_06(msg, Lenght);
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fa2f 	bl	8003524 <makePacket_06>
		break;
 80030c6:	e011      	b.n	80030ec <transmitDataMake+0xa8>

	case WriteSingleCoil:
		makePacket_05(msg, Lenght);
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f9f7 	bl	80034c0 <makePacket_05>
		break;
 80030d2:	e00b      	b.n	80030ec <transmitDataMake+0xa8>

	case WriteMultipleCoils:
		makePacket_15(msg, Lenght);
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	4619      	mov	r1, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa51 	bl	8003580 <makePacket_15>
		break;
 80030de:	e005      	b.n	80030ec <transmitDataMake+0xa8>

	case WriteMultipleResisters:
		makePacket_16(msg, Lenght);
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 faaf 	bl	8003648 <makePacket_16>
		break;
 80030ea:	bf00      	nop
	}

}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <uartDataHandler>:

/*Runs when data retrieval is complete and check CRC*/
void uartDataHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
	uint8_t tempCounter;
	uint16_t CRCValue;

	if(uartPacketComplatedFlag == SET)     //Data receiving is finished
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <uartDataHandler+0x9c>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d141      	bne.n	8003186 <uartDataHandler+0x92>
	{
		uartPacketComplatedFlag = RESET;
 8003102:	4b23      	ldr	r3, [pc, #140]	; (8003190 <uartDataHandler+0x9c>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
	    memcpy(tempModbusRx, ModbusRx, DataCounter + 1);
 8003108:	4b22      	ldr	r3, [pc, #136]	; (8003194 <uartDataHandler+0xa0>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	461a      	mov	r2, r3
 8003110:	4921      	ldr	r1, [pc, #132]	; (8003198 <uartDataHandler+0xa4>)
 8003112:	4822      	ldr	r0, [pc, #136]	; (800319c <uartDataHandler+0xa8>)
 8003114:	f00b f880 	bl	800e218 <memcpy>
	    tempCounter = DataCounter;
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <uartDataHandler+0xa0>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	71fb      	strb	r3, [r7, #7]
		DataCounter = 0;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <uartDataHandler+0xa0>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
		memset(ModbusRx, 0, BUFFERSIZE);
 8003124:	2219      	movs	r2, #25
 8003126:	2100      	movs	r1, #0
 8003128:	481b      	ldr	r0, [pc, #108]	; (8003198 <uartDataHandler+0xa4>)
 800312a:	f00b f883 	bl	800e234 <memset>
		memset(ModbusTx, 0, BUFFERSIZE);
 800312e:	2219      	movs	r2, #25
 8003130:	2100      	movs	r1, #0
 8003132:	481b      	ldr	r0, [pc, #108]	; (80031a0 <uartDataHandler+0xac>)
 8003134:	f00b f87e 	bl	800e234 <memset>

		/*CRC Check*/
		CRCValue = MODBUS_CRC16(tempModbusRx, tempCounter - 2);
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	3b02      	subs	r3, #2
 800313c:	b2db      	uxtb	r3, r3
 800313e:	4619      	mov	r1, r3
 8003140:	4816      	ldr	r0, [pc, #88]	; (800319c <uartDataHandler+0xa8>)
 8003142:	f000 fb13 	bl	800376c <MODBUS_CRC16>
 8003146:	4603      	mov	r3, r0
 8003148:	80bb      	strh	r3, [r7, #4]
		rxCRC = (tempModbusRx[tempCounter -1] << 8) | (tempModbusRx[tempCounter - 2]);
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <uartDataHandler+0xa8>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	b21a      	sxth	r2, r3
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	3b02      	subs	r3, #2
 800315a:	4910      	ldr	r1, [pc, #64]	; (800319c <uartDataHandler+0xa8>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	b21b      	sxth	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b21b      	sxth	r3, r3
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <uartDataHandler+0xb0>)
 8003168:	801a      	strh	r2, [r3, #0]

		/*If the calculated CRC value and the received CRC value are equal and the Slave ID is correct, respond to the receiving data.  */
		if(rxCRC == CRCValue && tempModbusRx[0] == SLAVEID)
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <uartDataHandler+0xb0>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	88ba      	ldrh	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d108      	bne.n	8003186 <uartDataHandler+0x92>
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <uartDataHandler+0xa8>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d104      	bne.n	8003186 <uartDataHandler+0x92>
		{
			transmitDataMake(&tempModbusRx[0], tempCounter);
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	4619      	mov	r1, r3
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <uartDataHandler+0xa8>)
 8003182:	f7ff ff5f 	bl	8003044 <transmitDataMake>
		}

	}
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200006ee 	.word	0x200006ee
 8003194:	200006eb 	.word	0x200006eb
 8003198:	200006f0 	.word	0x200006f0
 800319c:	2000070c 	.word	0x2000070c
 80031a0:	20000728 	.word	0x20000728
 80031a4:	20000742 	.word	0x20000742

080031a8 <uartTimer>:

/* This function should be called in systick timer */
void uartTimer(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
	if (RxInterruptFlag == SET)
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <uartTimer+0x38>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d110      	bne.n	80031d6 <uartTimer+0x2e>
	{
		if(uartTimeCounter++ > 100)
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <uartTimer+0x3c>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	b2d1      	uxtb	r1, r2
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <uartTimer+0x3c>)
 80031be:	7011      	strb	r1, [r2, #0]
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d908      	bls.n	80031d6 <uartTimer+0x2e>
		{

			RxInterruptFlag = RESET;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <uartTimer+0x38>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
			uartTimeCounter = 0;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <uartTimer+0x3c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
			uartPacketComplatedFlag = SET;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <uartTimer+0x40>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	200006ec 	.word	0x200006ec
 80031e4:	200006ed 	.word	0x200006ed
 80031e8:	200006ee 	.word	0x200006ee

080031ec <sendMessage>:

void sendMessage(char *msg, uint8_t len)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(&huart5, (uint8_t *)msg, len);
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <sendMessage+0x24>)
 8003202:	f008 fd61 	bl	800bcc8 <HAL_UART_Transmit_IT>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000bac 	.word	0x20000bac

08003214 <makePacket_01>:
/*****Modbus Function*****/
//The function are used to respond to receiving modbus data.

/*Send coil data*/
void makePacket_01(char *msg, uint8_t Lenght)
{
 8003214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003218:	b089      	sub	sp, #36	; 0x24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]
 8003222:	466b      	mov	r3, sp
 8003224:	461e      	mov	r6, r3
	uint16_t RegAddress, NumberCoils, NumberByte, CRCValue;
	RegAddress = (msg[2] << 8) | (msg[3]);	//Starting address of the coils to be read
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3302      	adds	r3, #2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b21a      	sxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3303      	adds	r3, #3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b21b      	sxth	r3, r3
 8003238:	4313      	orrs	r3, r2
 800323a:	b21b      	sxth	r3, r3
 800323c:	837b      	strh	r3, [r7, #26]
	NumberCoils = (msg[4] << 8) | (msg[5]); //Number of coils to be read
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	b21a      	sxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3305      	adds	r3, #5
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b21b      	sxth	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b21b      	sxth	r3, r3
 8003254:	833b      	strh	r3, [r7, #24]
	NumberByte = findByte(NumberCoils);		//Data byte to be transmit
 8003256:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fa62 	bl	8003724 <findByte>
 8003260:	4603      	mov	r3, r0
 8003262:	82fb      	strh	r3, [r7, #22]

	uint8_t tempCoil[NumberByte];
 8003264:	8af9      	ldrh	r1, [r7, #22]
 8003266:	460b      	mov	r3, r1
 8003268:	3b01      	subs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	b28b      	uxth	r3, r1
 800326e:	2200      	movs	r2, #0
 8003270:	4698      	mov	r8, r3
 8003272:	4691      	mov	r9, r2
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003280:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003284:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003288:	b28b      	uxth	r3, r1
 800328a:	2200      	movs	r2, #0
 800328c:	461c      	mov	r4, r3
 800328e:	4615      	mov	r5, r2
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	00eb      	lsls	r3, r5, #3
 800329a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329e:	00e2      	lsls	r2, r4, #3
 80032a0:	460b      	mov	r3, r1
 80032a2:	3307      	adds	r3, #7
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	ebad 0d03 	sub.w	sp, sp, r3
 80032ac:	466b      	mov	r3, sp
 80032ae:	3300      	adds	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
	uint8_t CoilCount, i = 0, ByteCount = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	77bb      	strb	r3, [r7, #30]
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]

	ModbusTx[0] = msg[0];
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <makePacket_01+0x198>)
 80032c0:	701a      	strb	r2, [r3, #0]
	ModbusTx[1] = msg[1];
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	785a      	ldrb	r2, [r3, #1]
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <makePacket_01+0x198>)
 80032c8:	705a      	strb	r2, [r3, #1]
	ModbusTx[2] = NumberByte;
 80032ca:	8afb      	ldrh	r3, [r7, #22]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <makePacket_01+0x198>)
 80032d0:	709a      	strb	r2, [r3, #2]


	for(CoilCount = 0; CoilCount < NumberCoils; CoilCount++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	777b      	strb	r3, [r7, #29]
 80032d6:	e027      	b.n	8003328 <makePacket_01+0x114>
	{
			if( CoilCount % 8 == 0 && CoilCount != 0)
 80032d8:	7f7b      	ldrb	r3, [r7, #29]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <makePacket_01+0xe0>
 80032e4:	7f7b      	ldrb	r3, [r7, #29]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <makePacket_01+0xe0>
			{
				ByteCount++;
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
 80032ec:	3301      	adds	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
				i = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77bb      	strb	r3, [r7, #30]
			}
			tempCoil[ByteCount] |= (ModbusCoil[RegAddress + CoilCount] << i);
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	b25a      	sxtb	r2, r3
 80032fc:	8b79      	ldrh	r1, [r7, #26]
 80032fe:	7f7b      	ldrb	r3, [r7, #29]
 8003300:	440b      	add	r3, r1
 8003302:	492b      	ldr	r1, [pc, #172]	; (80033b0 <makePacket_01+0x19c>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	4619      	mov	r1, r3
 8003308:	7fbb      	ldrb	r3, [r7, #30]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	b25b      	sxtb	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b25a      	sxtb	r2, r3
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	b2d1      	uxtb	r1, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	54d1      	strb	r1, [r2, r3]
			i++;
 800331c:	7fbb      	ldrb	r3, [r7, #30]
 800331e:	3301      	adds	r3, #1
 8003320:	77bb      	strb	r3, [r7, #30]
	for(CoilCount = 0; CoilCount < NumberCoils; CoilCount++)
 8003322:	7f7b      	ldrb	r3, [r7, #29]
 8003324:	3301      	adds	r3, #1
 8003326:	777b      	strb	r3, [r7, #29]
 8003328:	7f7b      	ldrb	r3, [r7, #29]
 800332a:	b29b      	uxth	r3, r3
 800332c:	8b3a      	ldrh	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d8d2      	bhi.n	80032d8 <makePacket_01+0xc4>
	}

	for(i = 0; i < ByteCount + 1; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	77bb      	strb	r3, [r7, #30]
 8003336:	e009      	b.n	800334c <makePacket_01+0x138>
	{
		ModbusTx[3 + i] = tempCoil[i];
 8003338:	7fba      	ldrb	r2, [r7, #30]
 800333a:	7fbb      	ldrb	r3, [r7, #30]
 800333c:	3303      	adds	r3, #3
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	5c89      	ldrb	r1, [r1, r2]
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <makePacket_01+0x198>)
 8003344:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < ByteCount + 1; i++)
 8003346:	7fbb      	ldrb	r3, [r7, #30]
 8003348:	3301      	adds	r3, #1
 800334a:	77bb      	strb	r3, [r7, #30]
 800334c:	7ffa      	ldrb	r2, [r7, #31]
 800334e:	7fbb      	ldrb	r3, [r7, #30]
 8003350:	429a      	cmp	r2, r3
 8003352:	d2f1      	bcs.n	8003338 <makePacket_01+0x124>
	}

	/*Calculating the CRC value of the data to be sent*/
	CRCValue = MODBUS_CRC16(ModbusTx, 3 + i);
 8003354:	7fbb      	ldrb	r3, [r7, #30]
 8003356:	3303      	adds	r3, #3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	4813      	ldr	r0, [pc, #76]	; (80033ac <makePacket_01+0x198>)
 800335e:	f000 fa05 	bl	800376c <MODBUS_CRC16>
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
	ModbusTx[3 + i] = (CRCValue & 0x00FF);
 8003366:	7fbb      	ldrb	r3, [r7, #30]
 8003368:	3303      	adds	r3, #3
 800336a:	897a      	ldrh	r2, [r7, #10]
 800336c:	b2d1      	uxtb	r1, r2
 800336e:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <makePacket_01+0x198>)
 8003370:	54d1      	strb	r1, [r2, r3]
	ModbusTx[4 + i] = (CRCValue >> 8);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b29a      	uxth	r2, r3
 8003378:	7fbb      	ldrb	r3, [r7, #30]
 800337a:	3304      	adds	r3, #4
 800337c:	b2d1      	uxtb	r1, r2
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <makePacket_01+0x198>)
 8003380:	54d1      	strb	r1, [r2, r3]
	/**************************************************/

	sendMessage(ModbusTx, 5 + i); //Send response data
 8003382:	7fbb      	ldrb	r3, [r7, #30]
 8003384:	3305      	adds	r3, #5
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	4808      	ldr	r0, [pc, #32]	; (80033ac <makePacket_01+0x198>)
 800338c:	f7ff ff2e 	bl	80031ec <sendMessage>
	memset(tempCoil, 0, 8 * ByteCount); //Clear tempCoil array
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	461a      	mov	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f00a ff4b 	bl	800e234 <memset>
 800339e:	46b5      	mov	sp, r6
}
 80033a0:	bf00      	nop
 80033a2:	3724      	adds	r7, #36	; 0x24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033aa:	bf00      	nop
 80033ac:	20000728 	.word	0x20000728
 80033b0:	200006cc 	.word	0x200006cc

080033b4 <makePacket_03>:

/*Send register data*/
void makePacket_03(char *msg, uint8_t Lenght)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
	uint8_t i, m = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73bb      	strb	r3, [r7, #14]

	uint16_t RegAddress = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	81bb      	strh	r3, [r7, #12]
	uint16_t NumberOfReg = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	817b      	strh	r3, [r7, #10]
	uint16_t CRCValue;

	RegAddress = (msg[2] << 8) | (msg[3]);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3302      	adds	r3, #2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	b21a      	sxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3303      	adds	r3, #3
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b21b      	sxth	r3, r3
 80033de:	4313      	orrs	r3, r2
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	81bb      	strh	r3, [r7, #12]
	NumberOfReg = (msg[4] << 8) | (msg[5]);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	b21a      	sxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3305      	adds	r3, #5
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	817b      	strh	r3, [r7, #10]
	ModbusTx[0] = msg[0];
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <makePacket_03+0x104>)
 8003402:	701a      	strb	r2, [r3, #0]
	ModbusTx[1] = msg[1];
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	785a      	ldrb	r2, [r3, #1]
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <makePacket_03+0x104>)
 800340a:	705a      	strb	r2, [r3, #1]
	ModbusTx[2] = (NumberOfReg * 2);
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <makePacket_03+0x104>)
 8003416:	709a      	strb	r2, [r3, #2]

	for(i = 0; i < NumberOfReg * 2; i += 2)
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e01d      	b.n	800345a <makePacket_03+0xa6>
	{
		ModbusTx[3 + i] = (uint8_t)(ModbusRegister[RegAddress + m] >> 8);
 800341e:	89ba      	ldrh	r2, [r7, #12]
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	4413      	add	r3, r2
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <makePacket_03+0x108>)
 8003426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29a      	uxth	r2, r3
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	3303      	adds	r3, #3
 8003432:	b2d1      	uxtb	r1, r2
 8003434:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <makePacket_03+0x104>)
 8003436:	54d1      	strb	r1, [r2, r3]
		ModbusTx[4 + i] = (uint8_t)(ModbusRegister[RegAddress + m] & 0x00FF);
 8003438:	89ba      	ldrh	r2, [r7, #12]
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	4413      	add	r3, r2
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <makePacket_03+0x108>)
 8003440:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	3304      	adds	r3, #4
 8003448:	b2d1      	uxtb	r1, r2
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <makePacket_03+0x104>)
 800344c:	54d1      	strb	r1, [r2, r3]
		m++;
 800344e:	7bbb      	ldrb	r3, [r7, #14]
 8003450:	3301      	adds	r3, #1
 8003452:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < NumberOfReg * 2; i += 2)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	3302      	adds	r3, #2
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	897b      	ldrh	r3, [r7, #10]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	429a      	cmp	r2, r3
 8003462:	dbdc      	blt.n	800341e <makePacket_03+0x6a>
	}

	//CRC Calculate
	CRCValue = MODBUS_CRC16(ModbusTx, 3 + (NumberOfReg * 2 ));
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3303      	adds	r3, #3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	4811      	ldr	r0, [pc, #68]	; (80034b8 <makePacket_03+0x104>)
 8003474:	f000 f97a 	bl	800376c <MODBUS_CRC16>
 8003478:	4603      	mov	r3, r0
 800347a:	813b      	strh	r3, [r7, #8]
	ModbusTx[4 + (NumberOfReg * 2 )] = (CRCValue >> 8);
 800347c:	893b      	ldrh	r3, [r7, #8]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	b29a      	uxth	r2, r3
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	3302      	adds	r3, #2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	b2d1      	uxtb	r1, r2
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <makePacket_03+0x104>)
 800348c:	54d1      	strb	r1, [r2, r3]
	ModbusTx[3 + (NumberOfReg * 2 )] = (CRCValue & 0x00FF);
 800348e:	897b      	ldrh	r3, [r7, #10]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3303      	adds	r3, #3
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	b2d1      	uxtb	r1, r2
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <makePacket_03+0x104>)
 800349a:	54d1      	strb	r1, [r2, r3]
	/********************************************************/
	sendMessage(ModbusTx, 5 + (NumberOfReg * 2 ));
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3305      	adds	r3, #5
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	4803      	ldr	r0, [pc, #12]	; (80034b8 <makePacket_03+0x104>)
 80034ac:	f7ff fe9e 	bl	80031ec <sendMessage>
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000728 	.word	0x20000728
 80034bc:	200006b8 	.word	0x200006b8

080034c0 <makePacket_05>:

/*Write single coil*/
void makePacket_05(char *msg, uint8_t Lenght)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
	uint16_t RegAddress, RegValue;
	RegAddress = (msg[2] << 8) | (msg[3]);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3302      	adds	r3, #2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3303      	adds	r3, #3
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b21b      	sxth	r3, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	81fb      	strh	r3, [r7, #14]
	RegValue = (msg[4] << 8) | (msg[5]);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	b21a      	sxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3305      	adds	r3, #5
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	81bb      	strh	r3, [r7, #12]

	ModbusCoil[RegAddress] = (bool)RegValue;
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	89ba      	ldrh	r2, [r7, #12]
 8003500:	2a00      	cmp	r2, #0
 8003502:	bf14      	ite	ne
 8003504:	2201      	movne	r2, #1
 8003506:	2200      	moveq	r2, #0
 8003508:	b2d1      	uxtb	r1, r2
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <makePacket_05+0x60>)
 800350c:	54d1      	strb	r1, [r2, r3]

	sendMessage(msg, Lenght);
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fe6a 	bl	80031ec <sendMessage>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200006cc 	.word	0x200006cc

08003524 <makePacket_06>:

/*Write single register*/
void makePacket_06(char *msg, uint8_t Lenght)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
	uint16_t RegAddress, RegValue;
	RegAddress = (msg[2] << 8) | (msg[3]);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3302      	adds	r3, #2
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	b21a      	sxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3303      	adds	r3, #3
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b21b      	sxth	r3, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	b21b      	sxth	r3, r3
 8003546:	81fb      	strh	r3, [r7, #14]
	RegValue = (msg[4] << 8) | (msg[5]);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	b21a      	sxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3305      	adds	r3, #5
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b21b      	sxth	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b21b      	sxth	r3, r3
 800355e:	81bb      	strh	r3, [r7, #12]

	ModbusRegister[RegAddress] = RegValue;
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	4906      	ldr	r1, [pc, #24]	; (800357c <makePacket_06+0x58>)
 8003564:	89ba      	ldrh	r2, [r7, #12]
 8003566:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	sendMessage(msg, Lenght);
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe3c 	bl	80031ec <sendMessage>

}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	200006b8 	.word	0x200006b8

08003580 <makePacket_15>:

/*Write multiple coils*/
void makePacket_15(char *msg, uint8_t Lenght)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
	uint16_t NumberOfCoils, CRCValue;
	uint8_t i,m,k;
	//uint16_t NumberOfByte, RegAddress; -> not used
	//RegAddress = (msg[2] << 8) | (msg[3]);

	NumberOfCoils = (msg[4] << 8) | (msg[5]);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	b21a      	sxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3305      	adds	r3, #5
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	817b      	strh	r3, [r7, #10]

	//NumberOfByte = msg[6];

	for(i = 0; i < NumberOfCoils; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e028      	b.n	80035fc <makePacket_15+0x7c>
	{
		ModbusCoil[i] = (msg[7 + m] & (0x01 << k)) ;
 80035aa:	7bbb      	ldrb	r3, [r7, #14]
 80035ac:	3307      	adds	r3, #7
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	7b7b      	ldrb	r3, [r7, #13]
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	ea01 0203 	and.w	r2, r1, r3
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2201      	movne	r2, #1
 80035cc:	2200      	moveq	r2, #0
 80035ce:	b2d1      	uxtb	r1, r2
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <makePacket_15+0xc0>)
 80035d2:	54d1      	strb	r1, [r2, r3]

		k++;
 80035d4:	7b7b      	ldrb	r3, [r7, #13]
 80035d6:	3301      	adds	r3, #1
 80035d8:	737b      	strb	r3, [r7, #13]
		if(k % 8 == 0 && k != 0)
 80035da:	7b7b      	ldrb	r3, [r7, #13]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <makePacket_15+0x76>
 80035e6:	7b7b      	ldrb	r3, [r7, #13]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <makePacket_15+0x76>
		{
			m++;
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73bb      	strb	r3, [r7, #14]
			k = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	737b      	strb	r3, [r7, #13]
	for(i = 0; i < NumberOfCoils; i++)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	3301      	adds	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	897a      	ldrh	r2, [r7, #10]
 8003602:	429a      	cmp	r2, r3
 8003604:	d8d1      	bhi.n	80035aa <makePacket_15+0x2a>
		}
	}

	memcpy(ModbusTx, msg, 6);
 8003606:	2206      	movs	r2, #6
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	480e      	ldr	r0, [pc, #56]	; (8003644 <makePacket_15+0xc4>)
 800360c:	f00a fe04 	bl	800e218 <memcpy>

	CRCValue = MODBUS_CRC16(ModbusTx, 6);
 8003610:	2106      	movs	r1, #6
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <makePacket_15+0xc4>)
 8003614:	f000 f8aa 	bl	800376c <MODBUS_CRC16>
 8003618:	4603      	mov	r3, r0
 800361a:	813b      	strh	r3, [r7, #8]
	ModbusTx[6] = (CRCValue & 0x00FF);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <makePacket_15+0xc4>)
 8003622:	719a      	strb	r2, [r3, #6]
	ModbusTx[7] = (CRCValue >> 8);
 8003624:	893b      	ldrh	r3, [r7, #8]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	b29b      	uxth	r3, r3
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <makePacket_15+0xc4>)
 800362e:	71da      	strb	r2, [r3, #7]
	sendMessage(ModbusTx, 8);
 8003630:	2108      	movs	r1, #8
 8003632:	4804      	ldr	r0, [pc, #16]	; (8003644 <makePacket_15+0xc4>)
 8003634:	f7ff fdda 	bl	80031ec <sendMessage>
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200006cc 	.word	0x200006cc
 8003644:	20000728 	.word	0x20000728

08003648 <makePacket_16>:


/*Write multiple registers*/
void makePacket_16(char *msg, uint8_t Lenght)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003658:	482f      	ldr	r0, [pc, #188]	; (8003718 <makePacket_16+0xd0>)
 800365a:	f004 fbd1 	bl	8007e00 <HAL_GPIO_TogglePin>
	uint16_t RegAddress, NumberOfReg, CRCValue;
	uint8_t i,m = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	73bb      	strb	r3, [r7, #14]
	RegAddress = (msg[2] << 8) | (msg[3]);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3302      	adds	r3, #2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	b21a      	sxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3303      	adds	r3, #3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b21b      	sxth	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b21b      	sxth	r3, r3
 8003678:	81bb      	strh	r3, [r7, #12]
	NumberOfReg = (msg[4] << 8) | (msg[5]);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3305      	adds	r3, #5
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b21b      	sxth	r3, r3
 8003690:	817b      	strh	r3, [r7, #10]

	for(i = 0; i < NumberOfReg; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e01d      	b.n	80036d4 <makePacket_16+0x8c>
	{
		ModbusRegister[RegAddress + i] = (uint16_t)((uint16_t)msg[7 + m] << 8) | (msg[8 + m]);
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	3307      	adds	r3, #7
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	b299      	uxth	r1, r3
 80036aa:	7bbb      	ldrb	r3, [r7, #14]
 80036ac:	3308      	adds	r3, #8
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	89b8      	ldrh	r0, [r7, #12]
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	4403      	add	r3, r0
 80036be:	430a      	orrs	r2, r1
 80036c0:	b291      	uxth	r1, r2
 80036c2:	4a16      	ldr	r2, [pc, #88]	; (800371c <makePacket_16+0xd4>)
 80036c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		m += 2;
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	3302      	adds	r3, #2
 80036cc:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < NumberOfReg; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	897a      	ldrh	r2, [r7, #10]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d8dc      	bhi.n	8003698 <makePacket_16+0x50>
	}

    memcpy(ModbusTx, msg, 6);
 80036de:	2206      	movs	r2, #6
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	480f      	ldr	r0, [pc, #60]	; (8003720 <makePacket_16+0xd8>)
 80036e4:	f00a fd98 	bl	800e218 <memcpy>

	CRCValue = MODBUS_CRC16(ModbusTx, 6);
 80036e8:	2106      	movs	r1, #6
 80036ea:	480d      	ldr	r0, [pc, #52]	; (8003720 <makePacket_16+0xd8>)
 80036ec:	f000 f83e 	bl	800376c <MODBUS_CRC16>
 80036f0:	4603      	mov	r3, r0
 80036f2:	813b      	strh	r3, [r7, #8]
	ModbusTx[6] = (CRCValue & 0x00FF);
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <makePacket_16+0xd8>)
 80036fa:	719a      	strb	r2, [r3, #6]
	ModbusTx[7] = (CRCValue >> 8);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <makePacket_16+0xd8>)
 8003706:	71da      	strb	r2, [r3, #7]
	sendMessage(ModbusTx, 8);
 8003708:	2108      	movs	r1, #8
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <makePacket_16+0xd8>)
 800370c:	f7ff fd6e 	bl	80031ec <sendMessage>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	48000c00 	.word	0x48000c00
 800371c:	200006b8 	.word	0x200006b8
 8003720:	20000728 	.word	0x20000728

08003724 <findByte>:

uint8_t findByte(int16_t NumberOfCoil)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t NumberOfByte = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]

	while(NumberOfCoil >= 0)
 8003732:	e00c      	b.n	800374e <findByte+0x2a>
	{
		NumberOfCoil -= 8;
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	3b08      	subs	r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	80fb      	strh	r3, [r7, #6]

		NumberOfByte++;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	73fb      	strb	r3, [r7, #15]
		if(NumberOfCoil < 0)
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db04      	blt.n	8003758 <findByte+0x34>
	while(NumberOfCoil >= 0)
 800374e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003752:	2b00      	cmp	r3, #0
 8003754:	daee      	bge.n	8003734 <findByte+0x10>
 8003756:	e000      	b.n	800375a <findByte+0x36>
		{
			break;
 8003758:	bf00      	nop
		}
	}
	return NumberOfByte;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	b2db      	uxtb	r3, r3
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <MODBUS_CRC16>:

uint16_t MODBUS_CRC16(char *buf, uint8_t len )
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
	static const uint16_t table[2] = { 0x0000, 0xA001 };
	uint16_t crc = 0xFFFF;
 8003778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377c:	82fb      	strh	r3, [r7, #22]
	unsigned int i = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
	char bit = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
	unsigned int xor = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

	for( i = 0; i < len; i++ )
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e021      	b.n	80037d4 <MODBUS_CRC16+0x68>
	{
		crc ^= buf[i];
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b29a      	uxth	r2, r3
 800379a:	8afb      	ldrh	r3, [r7, #22]
 800379c:	4053      	eors	r3, r2
 800379e:	82fb      	strh	r3, [r7, #22]

		for( bit = 0; bit < 8; bit++ )
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e010      	b.n	80037c8 <MODBUS_CRC16+0x5c>
		{
			xor = crc & 0x01;
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	60bb      	str	r3, [r7, #8]
			crc >>= 1;
 80037ae:	8afb      	ldrh	r3, [r7, #22]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	82fb      	strh	r3, [r7, #22]
			crc ^= table[xor];
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <MODBUS_CRC16+0x80>)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80037bc:	8afb      	ldrh	r3, [r7, #22]
 80037be:	4053      	eors	r3, r2
 80037c0:	82fb      	strh	r3, [r7, #22]
		for( bit = 0; bit < 8; bit++ )
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3301      	adds	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b07      	cmp	r3, #7
 80037cc:	d9eb      	bls.n	80037a6 <MODBUS_CRC16+0x3a>
	for( i = 0; i < len; i++ )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3d9      	bcc.n	8003790 <MODBUS_CRC16+0x24>
		}
	}

	return crc;
 80037dc:	8afb      	ldrh	r3, [r7, #22]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	0800ea3c 	.word	0x0800ea3c

080037f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2220      	movs	r2, #32
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f00a fd13 	bl	800e234 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800380e:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003810:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003818:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800381c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800381e:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <MX_ADC1_Init+0x100>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003838:	2204      	movs	r2, #4
 800383a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <MX_ADC1_Init+0x100>)
 800383e:	2200      	movs	r2, #0
 8003840:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003844:	2200      	movs	r2, #0
 8003846:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8003848:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <MX_ADC1_Init+0x100>)
 800384a:	2202      	movs	r2, #2
 800384c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003858:	2200      	movs	r2, #0
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <MX_ADC1_Init+0x100>)
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_ADC1_Init+0x100>)
 800386c:	2200      	movs	r2, #0
 800386e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003878:	481d      	ldr	r0, [pc, #116]	; (80038f0 <MX_ADC1_Init+0x100>)
 800387a:	f002 f8a9 	bl	80059d0 <HAL_ADC_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003884:	f001 f974 	bl	8004b70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	4619      	mov	r1, r3
 8003892:	4817      	ldr	r0, [pc, #92]	; (80038f0 <MX_ADC1_Init+0x100>)
 8003894:	f003 f8da 	bl	8006a4c <HAL_ADCEx_MultiModeConfigChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800389e:	f001 f967 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <MX_ADC1_Init+0x104>)
 80038a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038a6:	2306      	movs	r3, #6
 80038a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038ae:	237f      	movs	r3, #127	; 0x7f
 80038b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038b2:	2304      	movs	r3, #4
 80038b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	480c      	ldr	r0, [pc, #48]	; (80038f0 <MX_ADC1_Init+0x100>)
 80038c0:	f002 fb34 	bl	8005f2c <HAL_ADC_ConfigChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80038ca:	f001 f951 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038ce:	230c      	movs	r3, #12
 80038d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4806      	ldr	r0, [pc, #24]	; (80038f0 <MX_ADC1_Init+0x100>)
 80038d8:	f002 fb28 	bl	8005f2c <HAL_ADC_ConfigChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80038e2:	f001 f945 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	3730      	adds	r7, #48	; 0x30
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000744 	.word	0x20000744
 80038f4:	04300002 	.word	0x04300002

080038f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b09e      	sub	sp, #120	; 0x78
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	2254      	movs	r2, #84	; 0x54
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f00a fc8b 	bl	800e234 <memset>
  if(adcHandle->Instance==ADC1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003926:	d15f      	bne.n	80039e8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800392e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003932:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4618      	mov	r0, r3
 800393a:	f007 f8e9 	bl	800ab10 <HAL_RCCEx_PeriphCLKConfig>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003944:	f001 f914 	bl	8004b70 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 800394e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_ADC_MspInit+0xf8>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ZCP_Pin|ZCN_Pin;
 8003978:	2303      	movs	r3, #3
 800397a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800397c:	2303      	movs	r3, #3
 800397e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003988:	4619      	mov	r1, r3
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f004 f885 	bl	8007a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_ADC_MspInit+0x100>)
 8003996:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 800399a:	2205      	movs	r2, #5
 800399c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039cc:	4809      	ldr	r0, [pc, #36]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039ce:	f003 fd33 	bl	8007438 <HAL_DMA_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80039d8:	f001 f8ca 	bl	8004b70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_ADC_MspInit+0xfc>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80039e8:	bf00      	nop
 80039ea:	3778      	adds	r7, #120	; 0x78
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	200007b0 	.word	0x200007b0
 80039f8:	40020008 	.word	0x40020008

080039fc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003a02:	463b      	mov	r3, r7
 8003a04:	2230      	movs	r2, #48	; 0x30
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f00a fc13 	bl	800e234 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <MX_DAC1_Init+0x80>)
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <MX_DAC1_Init+0x84>)
 8003a12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003a14:	4819      	ldr	r0, [pc, #100]	; (8003a7c <MX_DAC1_Init+0x80>)
 8003a16:	f003 fa30 	bl	8006e7a <HAL_DAC_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003a20:	f001 f8a6 	bl	8004b70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003a24:	2302      	movs	r3, #2
 8003a26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a48:	463b      	mov	r3, r7
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	480b      	ldr	r0, [pc, #44]	; (8003a7c <MX_DAC1_Init+0x80>)
 8003a50:	f003 fb30 	bl	80070b4 <HAL_DAC_ConfigChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003a5a:	f001 f889 	bl	8004b70 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003a5e:	463b      	mov	r3, r7
 8003a60:	2210      	movs	r2, #16
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_DAC1_Init+0x80>)
 8003a66:	f003 fb25 	bl	80070b4 <HAL_DAC_ConfigChannel>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8003a70:	f001 f87e 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3730      	adds	r7, #48	; 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000810 	.word	0x20000810
 8003a80:	50000800 	.word	0x50000800

08003a84 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_DAC_MspInit+0x84>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12c      	bne.n	8003b00 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_DAC_MspInit+0x88>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_Pin|DAC2_Pin;
 8003ad6:	2330      	movs	r3, #48	; 0x30
 8003ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ada:	2303      	movs	r3, #3
 8003adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aec:	f003 ffd6 	bl	8007a9c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2036      	movs	r0, #54	; 0x36
 8003af6:	f003 f98c 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003afa:	2036      	movs	r0, #54	; 0x36
 8003afc:	f003 f9a3 	bl	8006e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	50000800 	.word	0x50000800
 8003b0c:	40021000 	.word	0x40021000

08003b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6493      	str	r3, [r2, #72]	; 0x48
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6493      	str	r3, [r2, #72]	; 0x48
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <MX_DMA_Init+0x50>)
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	200b      	movs	r0, #11
 8003b4c:	f003 f961 	bl	8006e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b50:	200b      	movs	r0, #11
 8003b52:	f003 f978 	bl	8006e46 <HAL_NVIC_EnableIRQ>

}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <one>:
//uint8_t error_list[total_errors]= {99,23,56,78,45,12};
uint8_t error_list[total_errors] = {99};
uint8_t display_digit[2];
uint8_t count_error = 0;

void one(void) {
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <two>:

void two(void) {
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <three>:

void three(void) {
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <four>:

void four(void) {
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <five>:

void five(void) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <six>:

void six(void) {
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <seven>:

void seven(void) {
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <eight>:

void eight(void) {
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <nine>:

void nine(void) {
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <zero>:

void zero(void) {
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <no_error>:

void no_error(void) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <digit_1>:

void digit_1(uint8_t number) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
//  HAL_GPIO_WritePin(Digit_2_GPIO_Port, Digit_2_Pin, 1);
//  HAL_GPIO_WritePin(Digit_1_GPIO_Port, Digit_1_Pin, 0);
  switch (number)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	dc1b      	bgt.n	8003c48 <digit_1+0x48>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db3d      	blt.n	8003c90 <digit_1+0x90>
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d83b      	bhi.n	8003c90 <digit_1+0x90>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <digit_1+0x20>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c5b 	.word	0x08003c5b
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c73 	.word	0x08003c73
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c7f 	.word	0x08003c7f
 8003c48:	2b63      	cmp	r3, #99	; 0x63
 8003c4a:	d01e      	beq.n	8003c8a <digit_1+0x8a>
	case 8: eight(); break;
	case 9: nine(); break;
	case 0: zero(); break;
	case 99: no_error(); break;
  }
}
 8003c4c:	e020      	b.n	8003c90 <digit_1+0x90>
	case 1: one(); break;
 8003c4e:	f7ff ff89 	bl	8003b64 <one>
 8003c52:	e01d      	b.n	8003c90 <digit_1+0x90>
	case 2: two(); break;
 8003c54:	f7ff ff8d 	bl	8003b72 <two>
 8003c58:	e01a      	b.n	8003c90 <digit_1+0x90>
	case 3: three(); break;
 8003c5a:	f7ff ff91 	bl	8003b80 <three>
 8003c5e:	e017      	b.n	8003c90 <digit_1+0x90>
	case 4: four(); break;
 8003c60:	f7ff ff95 	bl	8003b8e <four>
 8003c64:	e014      	b.n	8003c90 <digit_1+0x90>
	case 5: five(); break;
 8003c66:	f7ff ff99 	bl	8003b9c <five>
 8003c6a:	e011      	b.n	8003c90 <digit_1+0x90>
	case 6: six(); break;
 8003c6c:	f7ff ff9d 	bl	8003baa <six>
 8003c70:	e00e      	b.n	8003c90 <digit_1+0x90>
	case 7: seven(); break;
 8003c72:	f7ff ffa1 	bl	8003bb8 <seven>
 8003c76:	e00b      	b.n	8003c90 <digit_1+0x90>
	case 8: eight(); break;
 8003c78:	f7ff ffa5 	bl	8003bc6 <eight>
 8003c7c:	e008      	b.n	8003c90 <digit_1+0x90>
	case 9: nine(); break;
 8003c7e:	f7ff ffa9 	bl	8003bd4 <nine>
 8003c82:	e005      	b.n	8003c90 <digit_1+0x90>
	case 0: zero(); break;
 8003c84:	f7ff ffad 	bl	8003be2 <zero>
 8003c88:	e002      	b.n	8003c90 <digit_1+0x90>
	case 99: no_error(); break;
 8003c8a:	f7ff ffb1 	bl	8003bf0 <no_error>
 8003c8e:	bf00      	nop
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <digit_2>:

void digit_2(uint8_t number) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
//  HAL_GPIO_WritePin(Digit_2_GPIO_Port, Digit_2_Pin, 0);
//  HAL_GPIO_WritePin(Digit_1_GPIO_Port, Digit_1_Pin, 1);
  switch (number)
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	dc1b      	bgt.n	8003ce0 <digit_2+0x48>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db3d      	blt.n	8003d28 <digit_2+0x90>
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d83b      	bhi.n	8003d28 <digit_2+0x90>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <digit_2+0x20>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003cff 	.word	0x08003cff
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d11 	.word	0x08003d11
 8003cdc:	08003d17 	.word	0x08003d17
 8003ce0:	2b63      	cmp	r3, #99	; 0x63
 8003ce2:	d01e      	beq.n	8003d22 <digit_2+0x8a>
	case 8: eight(); break;
	case 9: nine(); break;
	case 0: zero(); break;
	case 99: no_error(); break;
  }
}
 8003ce4:	e020      	b.n	8003d28 <digit_2+0x90>
	case 1: one(); break;
 8003ce6:	f7ff ff3d 	bl	8003b64 <one>
 8003cea:	e01d      	b.n	8003d28 <digit_2+0x90>
	case 2: two(); break;
 8003cec:	f7ff ff41 	bl	8003b72 <two>
 8003cf0:	e01a      	b.n	8003d28 <digit_2+0x90>
	case 3: three(); break;
 8003cf2:	f7ff ff45 	bl	8003b80 <three>
 8003cf6:	e017      	b.n	8003d28 <digit_2+0x90>
	case 4: four(); break;
 8003cf8:	f7ff ff49 	bl	8003b8e <four>
 8003cfc:	e014      	b.n	8003d28 <digit_2+0x90>
	case 5: five(); break;
 8003cfe:	f7ff ff4d 	bl	8003b9c <five>
 8003d02:	e011      	b.n	8003d28 <digit_2+0x90>
	case 6: six(); break;
 8003d04:	f7ff ff51 	bl	8003baa <six>
 8003d08:	e00e      	b.n	8003d28 <digit_2+0x90>
	case 7: seven(); break;
 8003d0a:	f7ff ff55 	bl	8003bb8 <seven>
 8003d0e:	e00b      	b.n	8003d28 <digit_2+0x90>
	case 8: eight(); break;
 8003d10:	f7ff ff59 	bl	8003bc6 <eight>
 8003d14:	e008      	b.n	8003d28 <digit_2+0x90>
	case 9: nine(); break;
 8003d16:	f7ff ff5d 	bl	8003bd4 <nine>
 8003d1a:	e005      	b.n	8003d28 <digit_2+0x90>
	case 0: zero(); break;
 8003d1c:	f7ff ff61 	bl	8003be2 <zero>
 8003d20:	e002      	b.n	8003d28 <digit_2+0x90>
	case 99: no_error(); break;
 8003d22:	f7ff ff65 	bl	8003bf0 <no_error>
 8003d26:	bf00      	nop
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <get_error_list_length>:
 * the array until it encounters a zero value or reaches the end of the array.
 *
 * @param error_list The error list array to calculate the length of.
 * @return The length of the error list array.
 */
uint8_t get_error_list_length(uint8_t error_list[]) {
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint8_t count = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73bb      	strb	r3, [r7, #14]
 8003d40:	e00b      	b.n	8003d5a <get_error_list_length+0x2a>
    if (error_list[i] == 0) {
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <get_error_list_length+0x32>
      break;
    }
    count++;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3301      	adds	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003d54:	7bbb      	ldrb	r3, [r7, #14]
 8003d56:	3301      	adds	r3, #1
 8003d58:	73bb      	strb	r3, [r7, #14]
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	2b1c      	cmp	r3, #28
 8003d5e:	d9f0      	bls.n	8003d42 <get_error_list_length+0x12>
 8003d60:	e000      	b.n	8003d64 <get_error_list_length+0x34>
      break;
 8003d62:	bf00      	nop
  }
  return count;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <check_errorlist>:

uint8_t check_errorlist(uint8_t error_code) {
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e00a      	b.n	8003d9a <check_errorlist+0x26>
    if (error_list[i] == error_code) {
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <check_errorlist+0x3c>)
 8003d88:	5cd3      	ldrb	r3, [r2, r3]
 8003d8a:	79fa      	ldrb	r2, [r7, #7]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d101      	bne.n	8003d94 <check_errorlist+0x20>
      return 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e006      	b.n	8003da2 <check_errorlist+0x2e>
  for (uint8_t i = 0; i < total_errors; i++) {
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	3301      	adds	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b1c      	cmp	r3, #28
 8003d9e:	d9f1      	bls.n	8003d84 <check_errorlist+0x10>
    }
  }
  return 1;
 8003da0:	2301      	movs	r3, #1
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000198 	.word	0x20000198

08003db4 <add_error_to_list>:
 * This function adds a new error code to the end of the error list array.
 *
 * @param new_error The new error code to be added to the error list array.
 * @return None
 */
void add_error_to_list(uint8_t new_error) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  if (check_errorlist(new_error)) {
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ffd7 	bl	8003d74 <check_errorlist>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <add_error_to_list+0x2a>
    uint8_t length = get_error_list_length(error_list);
 8003dcc:	4806      	ldr	r0, [pc, #24]	; (8003de8 <add_error_to_list+0x34>)
 8003dce:	f7ff ffaf 	bl	8003d30 <get_error_list_length>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
    error_list[length] = new_error;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <add_error_to_list+0x34>)
 8003dda:	79fa      	ldrb	r2, [r7, #7]
 8003ddc:	54ca      	strb	r2, [r1, r3]
  }
  else{}
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000198 	.word	0x20000198

08003dec <remove_error_from_list>:
 * the removed error code.
 *
 * @param error_to_remove The error code to be removed from the error list array.
 * @return None
 */
void remove_error_from_list(uint8_t error_to_remove) {
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  uint8_t pos, j, i, found = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	733b      	strb	r3, [r7, #12]

  for (i = 0; i < total_errors; i++) {
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	737b      	strb	r3, [r7, #13]
 8003dfe:	e00d      	b.n	8003e1c <remove_error_from_list+0x30>
    if (error_list[i] == error_to_remove) {
 8003e00:	7b7b      	ldrb	r3, [r7, #13]
 8003e02:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <remove_error_from_list+0x70>)
 8003e04:	5cd3      	ldrb	r3, [r2, r3]
 8003e06:	79fa      	ldrb	r2, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d104      	bne.n	8003e16 <remove_error_from_list+0x2a>
      found = 1;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	733b      	strb	r3, [r7, #12]
      pos = i;
 8003e10:	7b7b      	ldrb	r3, [r7, #13]
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e005      	b.n	8003e22 <remove_error_from_list+0x36>
  for (i = 0; i < total_errors; i++) {
 8003e16:	7b7b      	ldrb	r3, [r7, #13]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	737b      	strb	r3, [r7, #13]
 8003e1c:	7b7b      	ldrb	r3, [r7, #13]
 8003e1e:	2b1c      	cmp	r3, #28
 8003e20:	d9ee      	bls.n	8003e00 <remove_error_from_list+0x14>
    }
  }
  if (found == 1) {
 8003e22:	7b3b      	ldrb	r3, [r7, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d113      	bne.n	8003e50 <remove_error_from_list+0x64>
    for (j = pos; j < total_errors - 1; j++) {
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	73bb      	strb	r3, [r7, #14]
 8003e2c:	e009      	b.n	8003e42 <remove_error_from_list+0x56>
    	error_list[j] = error_list[j + 1];
 8003e2e:	7bbb      	ldrb	r3, [r7, #14]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	7bbb      	ldrb	r3, [r7, #14]
 8003e34:	4909      	ldr	r1, [pc, #36]	; (8003e5c <remove_error_from_list+0x70>)
 8003e36:	5c89      	ldrb	r1, [r1, r2]
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <remove_error_from_list+0x70>)
 8003e3a:	54d1      	strb	r1, [r2, r3]
    for (j = pos; j < total_errors - 1; j++) {
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	73bb      	strb	r3, [r7, #14]
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b1b      	cmp	r3, #27
 8003e46:	d9f2      	bls.n	8003e2e <remove_error_from_list+0x42>
    }
    error_list[j] = 0;
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <remove_error_from_list+0x70>)
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	54d1      	strb	r1, [r2, r3]
  }
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	20000198 	.word	0x20000198

08003e60 <saprate_digit>:
 * This function separates a two-digit number into its individual digits
 *
 * @param number The two-digit number to be separated.
 * @return None
 */
void saprate_digit(uint8_t number) {
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if (number == 99) {
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	2b63      	cmp	r3, #99	; 0x63
 8003e6e:	d106      	bne.n	8003e7e <saprate_digit+0x1e>
	  display_digit[1] = 99;
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <saprate_digit+0x54>)
 8003e72:	2263      	movs	r2, #99	; 0x63
 8003e74:	705a      	strb	r2, [r3, #1]
	  display_digit[0] = 99;
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <saprate_digit+0x54>)
 8003e78:	2263      	movs	r2, #99	; 0x63
 8003e7a:	701a      	strb	r2, [r3, #0]
  } else {
	  display_digit[1] = number % 10;
	  display_digit[0] = number / 10;
  }
}
 8003e7c:	e014      	b.n	8003ea8 <saprate_digit+0x48>
	  display_digit[1] = number % 10;
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <saprate_digit+0x58>)
 8003e82:	fba3 1302 	umull	r1, r3, r3, r2
 8003e86:	08d9      	lsrs	r1, r3, #3
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <saprate_digit+0x54>)
 8003e96:	705a      	strb	r2, [r3, #1]
	  display_digit[0] = number / 10;
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <saprate_digit+0x58>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <saprate_digit+0x54>)
 8003ea6:	701a      	strb	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000828 	.word	0x20000828
 8003eb8:	cccccccd 	.word	0xcccccccd

08003ebc <error_display>:
 * by alternating between two digits. It uses a toggle flag to determine which
 * digit to display on each invocation.
 *
 * @return None
 */
void error_display() {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0

  if (toggleFlag == 0)
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <error_display+0x3c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <error_display+0x18>
	  digit_1(display_digit[0]);
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <error_display+0x40>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fe97 	bl	8003c00 <digit_1>
 8003ed2:	e008      	b.n	8003ee6 <error_display+0x2a>
  else if (toggleFlag == 1)
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <error_display+0x3c>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d104      	bne.n	8003ee6 <error_display+0x2a>
	  digit_2(display_digit[1]);
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <error_display+0x40>)
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fed9 	bl	8003c98 <digit_2>

  toggleFlag ^= 1; // Toggling the flag
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <error_display+0x3c>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4b01      	ldr	r3, [pc, #4]	; (8003ef8 <error_display+0x3c>)
 8003ef2:	701a      	strb	r2, [r3, #0]

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000824 	.word	0x20000824
 8003efc:	20000828 	.word	0x20000828

08003f00 <display_errors>:
 *
 * This function displays errors from an error list array on a segmented display.
 *
 * @return None
 */
void display_errors() {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  uint8_t error_list_length;
    error_list_length = get_error_list_length(error_list);
 8003f06:	4811      	ldr	r0, [pc, #68]	; (8003f4c <display_errors+0x4c>)
 8003f08:	f7ff ff12 	bl	8003d30 <get_error_list_length>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
    if (error_list_length != 0) {
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <display_errors+0x42>
    	saprate_digit(error_list[count_error]);
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <display_errors+0x50>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <display_errors+0x4c>)
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff9d 	bl	8003e60 <saprate_digit>
      count_error++;
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <display_errors+0x50>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <display_errors+0x50>)
 8003f30:	701a      	strb	r2, [r3, #0]
      if (error_list_length == count_error) {
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <display_errors+0x50>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	79fa      	ldrb	r2, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d102      	bne.n	8003f42 <display_errors+0x42>
        count_error = 0;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <display_errors+0x50>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000198 	.word	0x20000198
 8003f50:	2000082a 	.word	0x2000082a

08003f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	; 0x30
 8003f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f6a:	4b9d      	ldr	r3, [pc, #628]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a9c      	ldr	r2, [pc, #624]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f70:	f043 0310 	orr.w	r3, r3, #16
 8003f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f76:	4b9a      	ldr	r3, [pc, #616]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f82:	4b97      	ldr	r3, [pc, #604]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8e:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f9a:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	4a90      	ldr	r2, [pc, #576]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fa0:	f043 0320 	orr.w	r3, r3, #32
 8003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa6:	4b8e      	ldr	r3, [pc, #568]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	4a8a      	ldr	r2, [pc, #552]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	4b82      	ldr	r3, [pc, #520]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003fe8:	f043 0308 	orr.w	r3, r3, #8
 8003fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <MX_GPIO_Init+0x28c>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_PC_Pin|DO1_Pin|DO2_Pin|ID3_Pin, GPIO_PIN_RESET);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f24e 0108 	movw	r1, #57352	; 0xe008
 8004000:	4878      	ldr	r0, [pc, #480]	; (80041e4 <MX_GPIO_Init+0x290>)
 8004002:	f003 fee5 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_DRIVER_Pin|ID6_Pin, GPIO_PIN_RESET);
 8004006:	2200      	movs	r2, #0
 8004008:	f242 0110 	movw	r1, #8208	; 0x2010
 800400c:	4876      	ldr	r0, [pc, #472]	; (80041e8 <MX_GPIO_Init+0x294>)
 800400e:	f003 fedf 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSP_PRECHARGE_MOSFET_GPIO_Port, DSP_PRECHARGE_MOSFET_Pin, GPIO_PIN_RESET);
 8004012:	2200      	movs	r2, #0
 8004014:	2104      	movs	r1, #4
 8004016:	4875      	ldr	r0, [pc, #468]	; (80041ec <MX_GPIO_Init+0x298>)
 8004018:	f003 feda 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_OP_Pin|SPARE_PC_Pin|ID5_Pin, GPIO_PIN_RESET);
 800401c:	2200      	movs	r2, #0
 800401e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004026:	f003 fed3 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ID4_Pin|ID0_Pin|ID1_Pin|ID2_Pin, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8004030:	486f      	ldr	r0, [pc, #444]	; (80041f0 <MX_GPIO_Init+0x29c>)
 8004032:	f003 fecd 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SP_OP3_Pin|SP_OP2_Pin|SP_OP1_Pin, GPIO_PIN_RESET);
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800403c:	486d      	ldr	r0, [pc, #436]	; (80041f4 <MX_GPIO_Init+0x2a0>)
 800403e:	f003 fec7 	bl	8007dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_PC_Pin|DO1_Pin|DO2_Pin|ID3_Pin;
 8004042:	f24e 0308 	movw	r3, #57352	; 0xe008
 8004046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004048:	2301      	movs	r3, #1
 800404a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800404c:	2302      	movs	r3, #2
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4862      	ldr	r0, [pc, #392]	; (80041e4 <MX_GPIO_Init+0x290>)
 800405c:	f003 fd1e 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_FLTAFE_Pin;
 8004060:	2310      	movs	r3, #16
 8004062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004064:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800406a:	2302      	movs	r3, #2
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSP_FLTAFE_GPIO_Port, &GPIO_InitStruct);
 800406e:	f107 031c 	add.w	r3, r7, #28
 8004072:	4619      	mov	r1, r3
 8004074:	485b      	ldr	r0, [pc, #364]	; (80041e4 <MX_GPIO_Init+0x290>)
 8004076:	f003 fd11 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RESET_DRIVER_Pin|ID6_Pin;
 800407a:	f242 0310 	movw	r3, #8208	; 0x2010
 800407e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004080:	2301      	movs	r3, #1
 8004082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004084:	2302      	movs	r3, #2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	4619      	mov	r1, r3
 8004092:	4855      	ldr	r0, [pc, #340]	; (80041e8 <MX_GPIO_Init+0x294>)
 8004094:	f003 fd02 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_DIODE_Pin;
 8004098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800409e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040a4:	2302      	movs	r3, #2
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ERROR_DIODE_GPIO_Port, &GPIO_InitStruct);
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	4619      	mov	r1, r3
 80040ae:	484f      	ldr	r0, [pc, #316]	; (80041ec <MX_GPIO_Init+0x298>)
 80040b0:	f003 fcf4 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_FLTPSFB_Pin;
 80040b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSP_FLTPSFB_GPIO_Port, &GPIO_InitStruct);
 80040c4:	f107 031c 	add.w	r3, r7, #28
 80040c8:	4619      	mov	r1, r3
 80040ca:	4848      	ldr	r0, [pc, #288]	; (80041ec <MX_GPIO_Init+0x298>)
 80040cc:	f003 fce6 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DSP_RDYAFE_Pin|DSP_RDYPSFB_Pin|DI1_Pin|DI2_Pin;
 80040d0:	f240 3303 	movw	r3, #771	; 0x303
 80040d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d6:	2300      	movs	r3, #0
 80040d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040da:	2302      	movs	r3, #2
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040de:	f107 031c 	add.w	r3, r7, #28
 80040e2:	4619      	mov	r1, r3
 80040e4:	4840      	ldr	r0, [pc, #256]	; (80041e8 <MX_GPIO_Init+0x294>)
 80040e6:	f003 fcd9 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ERROR_MASTER_Pin|DSP_PRECHARGEFLT_Pin;
 80040ea:	230c      	movs	r3, #12
 80040ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040f4:	2302      	movs	r3, #2
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	4619      	mov	r1, r3
 80040fe:	483a      	ldr	r0, [pc, #232]	; (80041e8 <MX_GPIO_Init+0x294>)
 8004100:	f003 fccc 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_PRECHARGE_MOSFET_Pin;
 8004104:	2304      	movs	r3, #4
 8004106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004108:	2301      	movs	r3, #1
 800410a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800410c:	2302      	movs	r3, #2
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004110:	2300      	movs	r3, #0
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSP_PRECHARGE_MOSFET_GPIO_Port, &GPIO_InitStruct);
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	4619      	mov	r1, r3
 800411a:	4834      	ldr	r0, [pc, #208]	; (80041ec <MX_GPIO_Init+0x298>)
 800411c:	f003 fcbe 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_OP_Pin|SPARE_PC_Pin|ID5_Pin;
 8004120:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8004124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004126:	2301      	movs	r3, #1
 8004128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800412a:	2302      	movs	r3, #2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004132:	f107 031c 	add.w	r3, r7, #28
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800413c:	f003 fcae 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ID4_Pin|ID0_Pin|ID1_Pin|ID2_Pin;
 8004140:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004146:	2301      	movs	r3, #1
 8004148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800414a:	2302      	movs	r3, #2
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414e:	2300      	movs	r3, #0
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004152:	f107 031c 	add.w	r3, r7, #28
 8004156:	4619      	mov	r1, r3
 8004158:	4825      	ldr	r0, [pc, #148]	; (80041f0 <MX_GPIO_Init+0x29c>)
 800415a:	f003 fc9f 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SP_OP3_Pin|SP_OP2_Pin|SP_OP1_Pin;
 800415e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8004162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004164:	2301      	movs	r3, #1
 8004166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004168:	2302      	movs	r3, #2
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	4619      	mov	r1, r3
 8004176:	481f      	ldr	r0, [pc, #124]	; (80041f4 <MX_GPIO_Init+0x2a0>)
 8004178:	f003 fc90 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = SP_IN3_Pin|SP_IN2_Pin|SP_IN1_Pin|SW1_Pin
 800417c:	f24e 03f9 	movw	r3, #57593	; 0xe0f9
 8004180:	61fb      	str	r3, [r7, #28]
                          |SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin
                          |SW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004182:	2300      	movs	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004186:	2302      	movs	r3, #2
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800418a:	f107 031c 	add.w	r3, r7, #28
 800418e:	4619      	mov	r1, r3
 8004190:	4818      	ldr	r0, [pc, #96]	; (80041f4 <MX_GPIO_Init+0x2a0>)
 8004192:	f003 fc83 	bl	8007a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	2008      	movs	r0, #8
 800419c:	f002 fe39 	bl	8006e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80041a0:	2008      	movs	r0, #8
 80041a2:	f002 fe50 	bl	8006e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	2009      	movs	r0, #9
 80041ac:	f002 fe31 	bl	8006e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80041b0:	2009      	movs	r0, #9
 80041b2:	f002 fe48 	bl	8006e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2100      	movs	r1, #0
 80041ba:	200a      	movs	r0, #10
 80041bc:	f002 fe29 	bl	8006e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80041c0:	200a      	movs	r0, #10
 80041c2:	f002 fe40 	bl	8006e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	2028      	movs	r0, #40	; 0x28
 80041cc:	f002 fe21 	bl	8006e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041d0:	2028      	movs	r0, #40	; 0x28
 80041d2:	f002 fe38 	bl	8006e46 <HAL_NVIC_EnableIRQ>

}
 80041d6:	bf00      	nop
 80041d8:	3730      	adds	r7, #48	; 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	48001000 	.word	0x48001000
 80041e8:	48000800 	.word	0x48000800
 80041ec:	48001400 	.word	0x48001400
 80041f0:	48000400 	.word	0x48000400
 80041f4:	48000c00 	.word	0x48000c00

080041f8 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b0b8      	sub	sp, #224	; 0xe0
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80041fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800420c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
 800421c:	615a      	str	r2, [r3, #20]
 800421e:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8004220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004224:	2260      	movs	r2, #96	; 0x60
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f00a f803 	bl	800e234 <memset>
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800422e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004232:	2224      	movs	r2, #36	; 0x24
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f009 fffc 	bl	800e234 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800423c:	f107 0310 	add.w	r3, r7, #16
 8004240:	2220      	movs	r2, #32
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f009 fff5 	bl	800e234 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8004254:	4bc7      	ldr	r3, [pc, #796]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004256:	4ac8      	ldr	r2, [pc, #800]	; (8004578 <MX_HRTIM1_Init+0x380>)
 8004258:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800425a:	4bc6      	ldr	r3, [pc, #792]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8004260:	4bc4      	ldr	r3, [pc, #784]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8004266:	48c3      	ldr	r0, [pc, #780]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004268:	f003 fe08 	bl	8007e7c <HAL_HRTIM_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 8004272:	f000 fc7d 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8004276:	210c      	movs	r1, #12
 8004278:	48be      	ldr	r0, [pc, #760]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800427a:	f003 fecf 	bl	800801c <HAL_HRTIM_DLLCalibrationStart>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 8004284:	f000 fc74 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8004288:	210a      	movs	r1, #10
 800428a:	48ba      	ldr	r0, [pc, #744]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800428c:	f003 ff1e 	bl	80080cc <HAL_HRTIM_PollForDLLCalibration>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_HRTIM1_Init+0xa2>
  {
    Error_Handler();
 8004296:	f000 fc6b 	bl	8004b70 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 800429a:	f64f 73df 	movw	r3, #65503	; 0xffdf
 800429e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80042ae:	2308      	movs	r3, #8
 80042b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80042b4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80042b8:	461a      	mov	r2, r3
 80042ba:	2100      	movs	r1, #0
 80042bc:	48ad      	ldr	r0, [pc, #692]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80042be:	f003 ff39 	bl	8008134 <HAL_HRTIM_TimeBaseConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 80042c8:	f000 fc52 	bl	8004b70 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80042d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80042dc:	461a      	mov	r2, r3
 80042de:	2100      	movs	r1, #0
 80042e0:	48a4      	ldr	r0, [pc, #656]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80042e2:	f003 ffdc 	bl	800829e <HAL_HRTIM_WaveformTimerControl>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_HRTIM1_Init+0xf8>
  {
    Error_Handler();
 80042ec:	f000 fc40 	bl	8004b70 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80042f8:	2300      	movs	r3, #0
 80042fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80042fc:	2300      	movs	r3, #0
 80042fe:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8004300:	2301      	movs	r3, #1
 8004302:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8004304:	2300      	movs	r3, #0
 8004306:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8004308:	2300      	movs	r3, #0
 800430a:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800430c:	2300      	movs	r3, #0
 800430e:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8004310:	2300      	movs	r3, #0
 8004312:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8004314:	2300      	movs	r3, #0
 8004316:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8004318:	2300      	movs	r3, #0
 800431a:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8004364:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004368:	461a      	mov	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	4881      	ldr	r0, [pc, #516]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800436e:	f003 ff09 	bl	8008184 <HAL_HRTIM_WaveformTimerConfig>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_HRTIM1_Init+0x184>
  {
    Error_Handler();
 8004378:	f000 fbfa 	bl	8004b70 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800437c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_UPDATE;
 8004384:	2302      	movs	r3, #2
 8004386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800438a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438e:	461a      	mov	r2, r3
 8004390:	2101      	movs	r1, #1
 8004392:	4878      	ldr	r0, [pc, #480]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004394:	f003 fef6 	bl	8008184 <HAL_HRTIM_WaveformTimerConfig>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_HRTIM1_Init+0x1aa>
  {
    Error_Handler();
 800439e:	f000 fbe7 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80043a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043a6:	461a      	mov	r2, r3
 80043a8:	2102      	movs	r1, #2
 80043aa:	4872      	ldr	r0, [pc, #456]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80043ac:	f003 feea 	bl	8008184 <HAL_HRTIM_WaveformTimerConfig>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_HRTIM1_Init+0x1c2>
  {
    Error_Handler();
 80043b6:	f000 fbdb 	bl	8004b70 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80043c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043c4:	461a      	mov	r2, r3
 80043c6:	2103      	movs	r1, #3
 80043c8:	486a      	ldr	r0, [pc, #424]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80043ca:	f003 fedb 	bl	8008184 <HAL_HRTIM_WaveformTimerConfig>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <MX_HRTIM1_Init+0x1e0>
  {
    Error_Handler();
 80043d4:	f000 fbcc 	bl	8004b70 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80043e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043e8:	461a      	mov	r2, r3
 80043ea:	2104      	movs	r1, #4
 80043ec:	4861      	ldr	r0, [pc, #388]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80043ee:	f003 fec9 	bl	8008184 <HAL_HRTIM_WaveformTimerConfig>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_HRTIM1_Init+0x204>
  {
    Error_Handler();
 80043f8:	f000 fbba 	bl	8004b70 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV4;
 80043fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingValue = 500;
 8004402:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8004408:	2300      	movs	r3, #0
 800440a:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800440c:	2300      	movs	r3, #0
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8004410:	2300      	movs	r3, #0
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingValue = 500;
 8004414:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 800441a:	2300      	movs	r3, #0
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800441e:	2300      	movs	r3, #0
 8004420:	64fb      	str	r3, [r7, #76]	; 0x4c
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8004422:	2300      	movs	r3, #0
 8004424:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8004426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800442a:	461a      	mov	r2, r3
 800442c:	2101      	movs	r1, #1
 800442e:	4851      	ldr	r0, [pc, #324]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004430:	f003 ff68 	bl	8008304 <HAL_HRTIM_DeadTimeConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_HRTIM1_Init+0x246>
  {
    Error_Handler();
 800443a:	f000 fb99 	bl	8004b70 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV2;
 800443e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004442:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingValue = 435;
 8004444:	f240 13b3 	movw	r3, #435	; 0x1b3
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 435;
 800444a:	f240 13b3 	movw	r3, #435	; 0x1b3
 800444e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8004450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004454:	461a      	mov	r2, r3
 8004456:	2102      	movs	r1, #2
 8004458:	4846      	ldr	r0, [pc, #280]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800445a:	f003 ff53 	bl	8008304 <HAL_HRTIM_DeadTimeConfig>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_HRTIM1_Init+0x270>
  {
    Error_Handler();
 8004464:	f000 fb84 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 8004468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800446c:	461a      	mov	r2, r3
 800446e:	2103      	movs	r1, #3
 8004470:	4840      	ldr	r0, [pc, #256]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004472:	f003 ff47 	bl	8008304 <HAL_HRTIM_DeadTimeConfig>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_HRTIM1_Init+0x288>
  {
    Error_Handler();
 800447c:	f000 fb78 	bl	8004b70 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8004490:	2300      	movs	r3, #0
 8004492:	623b      	str	r3, [r7, #32]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8004498:	2300      	movs	r3, #0
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800449c:	2300      	movs	r3, #0
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	2201      	movs	r2, #1
 80044a6:	2100      	movs	r1, #0
 80044a8:	4832      	ldr	r0, [pc, #200]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80044aa:	f004 f919 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_HRTIM1_Init+0x2c0>
  {
    Error_Handler();
 80044b4:	f000 fb5c 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	2204      	movs	r2, #4
 80044be:	2101      	movs	r1, #1
 80044c0:	482c      	ldr	r0, [pc, #176]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80044c2:	f004 f90d 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_HRTIM1_Init+0x2d8>
  {
    Error_Handler();
 80044cc:	f000 fb50 	bl	8004b70 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80044d0:	2308      	movs	r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80044d4:	2310      	movs	r3, #16
 80044d6:	61bb      	str	r3, [r7, #24]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	2210      	movs	r2, #16
 80044de:	2102      	movs	r1, #2
 80044e0:	4824      	ldr	r0, [pc, #144]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80044e2:	f004 f8fd 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_HRTIM1_Init+0x2f8>
  {
    Error_Handler();
 80044ec:	f000 fb40 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	2240      	movs	r2, #64	; 0x40
 80044f6:	2103      	movs	r1, #3
 80044f8:	481e      	ldr	r0, [pc, #120]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 80044fa:	f004 f8f1 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_HRTIM1_Init+0x310>
  {
    Error_Handler();
 8004504:	f000 fb34 	bl	8004b70 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	2202      	movs	r2, #2
 8004516:	2100      	movs	r1, #0
 8004518:	4816      	ldr	r0, [pc, #88]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800451a:	f004 f8e1 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_HRTIM1_Init+0x330>
  {
    Error_Handler();
 8004524:	f000 fb24 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	2208      	movs	r2, #8
 800452e:	2101      	movs	r1, #1
 8004530:	4810      	ldr	r0, [pc, #64]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004532:	f004 f8d5 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_HRTIM1_Init+0x348>
  {
    Error_Handler();
 800453c:	f000 fb18 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	2220      	movs	r2, #32
 8004546:	2102      	movs	r1, #2
 8004548:	480a      	ldr	r0, [pc, #40]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 800454a:	f004 f8c9 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_HRTIM1_Init+0x360>
  {
    Error_Handler();
 8004554:	f000 fb0c 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	2103      	movs	r1, #3
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <MX_HRTIM1_Init+0x37c>)
 8004562:	f004 f8bd 	bl	80086e0 <HAL_HRTIM_WaveformOutputConfig>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <MX_HRTIM1_Init+0x384>
  {
    Error_Handler();
 800456c:	f000 fb00 	bl	8004b70 <Error_Handler>
 8004570:	e004      	b.n	800457c <MX_HRTIM1_Init+0x384>
 8004572:	bf00      	nop
 8004574:	2000082c 	.word	0x2000082c
 8004578:	40016800 	.word	0x40016800
  }
  pTimeBaseCfg.Period = 34000;
 800457c:	f248 43d0 	movw	r3, #34000	; 0x84d0
 8004580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8004584:	2305      	movs	r3, #5
 8004586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800458a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800458e:	461a      	mov	r2, r3
 8004590:	2101      	movs	r1, #1
 8004592:	4866      	ldr	r0, [pc, #408]	; (800472c <MX_HRTIM1_Init+0x534>)
 8004594:	f003 fdce 	bl	8008134 <HAL_HRTIM_TimeBaseConfig>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_HRTIM1_Init+0x3aa>
  {
    Error_Handler();
 800459e:	f000 fae7 	bl	8004b70 <Error_Handler>
  }
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_GREATER;
 80045a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80045b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80045b4:	461a      	mov	r2, r3
 80045b6:	2101      	movs	r1, #1
 80045b8:	485c      	ldr	r0, [pc, #368]	; (800472c <MX_HRTIM1_Init+0x534>)
 80045ba:	f003 fe70 	bl	800829e <HAL_HRTIM_WaveformTimerControl>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_HRTIM1_Init+0x3d0>
  {
    Error_Handler();
 80045c4:	f000 fad4 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	2201      	movs	r2, #1
 80045d0:	2101      	movs	r1, #1
 80045d2:	4856      	ldr	r0, [pc, #344]	; (800472c <MX_HRTIM1_Init+0x534>)
 80045d4:	f003 ff16 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_HRTIM1_Init+0x3ea>
  {
    Error_Handler();
 80045de:	f000 fac7 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3;
 80045e2:	2303      	movs	r3, #3
 80045e4:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2204      	movs	r2, #4
 80045ea:	2101      	movs	r1, #1
 80045ec:	484f      	ldr	r0, [pc, #316]	; (800472c <MX_HRTIM1_Init+0x534>)
 80045ee:	f003 ff09 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_HRTIM1_Init+0x404>
  {
    Error_Handler();
 80045f8:	f000 faba 	bl	8004b70 <Error_Handler>
  }
  pTimeBaseCfg.Period = 8500;
 80045fc:	f242 1334 	movw	r3, #8500	; 0x2134
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8004604:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004608:	461a      	mov	r2, r3
 800460a:	2102      	movs	r1, #2
 800460c:	4847      	ldr	r0, [pc, #284]	; (800472c <MX_HRTIM1_Init+0x534>)
 800460e:	f003 fd91 	bl	8008134 <HAL_HRTIM_TimeBaseConfig>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_HRTIM1_Init+0x424>
  {
    Error_Handler();
 8004618:	f000 faaa 	bl	8004b70 <Error_Handler>
  }
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8004622:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004626:	461a      	mov	r2, r3
 8004628:	2102      	movs	r1, #2
 800462a:	4840      	ldr	r0, [pc, #256]	; (800472c <MX_HRTIM1_Init+0x534>)
 800462c:	f003 fe37 	bl	800829e <HAL_HRTIM_WaveformTimerControl>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_HRTIM1_Init+0x442>
  {
    Error_Handler();
 8004636:	f000 fa9b 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2201      	movs	r2, #1
 8004642:	2102      	movs	r1, #2
 8004644:	4839      	ldr	r0, [pc, #228]	; (800472c <MX_HRTIM1_Init+0x534>)
 8004646:	f003 fedd 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_HRTIM1_Init+0x45c>
  {
    Error_Handler();
 8004650:	f000 fa8e 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 8004654:	f241 039a 	movw	r3, #4250	; 0x109a
 8004658:	607b      	str	r3, [r7, #4]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	2202      	movs	r2, #2
 8004666:	2102      	movs	r1, #2
 8004668:	4830      	ldr	r0, [pc, #192]	; (800472c <MX_HRTIM1_Init+0x534>)
 800466a:	f003 fecb 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_HRTIM1_Init+0x480>
  {
    Error_Handler();
 8004674:	f000 fa7c 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8004678:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800467c:	461a      	mov	r2, r3
 800467e:	2103      	movs	r1, #3
 8004680:	482a      	ldr	r0, [pc, #168]	; (800472c <MX_HRTIM1_Init+0x534>)
 8004682:	f003 fd57 	bl	8008134 <HAL_HRTIM_TimeBaseConfig>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_HRTIM1_Init+0x498>
  {
    Error_Handler();
 800468c:	f000 fa70 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8004690:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004694:	461a      	mov	r2, r3
 8004696:	2103      	movs	r1, #3
 8004698:	4824      	ldr	r0, [pc, #144]	; (800472c <MX_HRTIM1_Init+0x534>)
 800469a:	f003 fe00 	bl	800829e <HAL_HRTIM_WaveformTimerControl>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_HRTIM1_Init+0x4b0>
  {
    Error_Handler();
 80046a4:	f000 fa64 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	2201      	movs	r2, #1
 80046b0:	2103      	movs	r1, #3
 80046b2:	481e      	ldr	r0, [pc, #120]	; (800472c <MX_HRTIM1_Init+0x534>)
 80046b4:	f003 fea6 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_HRTIM1_Init+0x4ca>
  {
    Error_Handler();
 80046be:	f000 fa57 	bl	8004b70 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 80046c2:	f241 039a 	movw	r3, #4250	; 0x109a
 80046c6:	607b      	str	r3, [r7, #4]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	2202      	movs	r2, #2
 80046cc:	2103      	movs	r1, #3
 80046ce:	4817      	ldr	r0, [pc, #92]	; (800472c <MX_HRTIM1_Init+0x534>)
 80046d0:	f003 fe98 	bl	8008404 <HAL_HRTIM_WaveformCompareConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_HRTIM1_Init+0x4e6>
  {
    Error_Handler();
 80046da:	f000 fa49 	bl	8004b70 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 80046de:	f64f 73df 	movw	r3, #65503	; 0xffdf
 80046e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80046ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80046f0:	461a      	mov	r2, r3
 80046f2:	2104      	movs	r1, #4
 80046f4:	480d      	ldr	r0, [pc, #52]	; (800472c <MX_HRTIM1_Init+0x534>)
 80046f6:	f003 fd1d 	bl	8008134 <HAL_HRTIM_TimeBaseConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_HRTIM1_Init+0x50c>
  {
    Error_Handler();
 8004700:	f000 fa36 	bl	8004b70 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8004704:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004708:	461a      	mov	r2, r3
 800470a:	2104      	movs	r1, #4
 800470c:	4807      	ldr	r0, [pc, #28]	; (800472c <MX_HRTIM1_Init+0x534>)
 800470e:	f003 fdc6 	bl	800829e <HAL_HRTIM_WaveformTimerControl>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_HRTIM1_Init+0x524>
  {
    Error_Handler();
 8004718:	f000 fa2a 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800471c:	4803      	ldr	r0, [pc, #12]	; (800472c <MX_HRTIM1_Init+0x534>)
 800471e:	f000 f827 	bl	8004770 <HAL_HRTIM_MspPostInit>

}
 8004722:	bf00      	nop
 8004724:	37e0      	adds	r7, #224	; 0xe0
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000082c 	.word	0x2000082c

08004730 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <HAL_HRTIM_MspInit+0x38>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10b      	bne.n	800475a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_HRTIM_MspInit+0x3c>)
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <HAL_HRTIM_MspInit+0x3c>)
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474c:	6613      	str	r3, [r2, #96]	; 0x60
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_HRTIM_MspInit+0x3c>)
 8004750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40016800 	.word	0x40016800
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004778:	f107 0314 	add.w	r3, r7, #20
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_HRTIM_MspPostInit+0xa0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d13a      	bne.n	8004808 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047aa:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_HRTIM_MspPostInit+0xa4>)
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = PSFBH1_Pin|PSFBL1_Pin|PSFBH2_Pin|PSFBL2_Pin;
 80047c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80047c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	2302      	movs	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d0:	2303      	movs	r3, #3
 80047d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80047d4:	230d      	movs	r3, #13
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	4619      	mov	r1, r3
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <HAL_HRTIM_MspPostInit+0xa8>)
 80047e0:	f003 f95c 	bl	8007a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|AFEL1_Pin|AFEH2_Pin|AFEL2_Pin;
 80047e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80047e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	2302      	movs	r3, #2
 80047ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f2:	2303      	movs	r3, #3
 80047f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80047f6:	230d      	movs	r3, #13
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fa:	f107 0314 	add.w	r3, r7, #20
 80047fe:	4619      	mov	r1, r3
 8004800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004804:	f003 f94a 	bl	8007a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8004808:	bf00      	nop
 800480a:	3728      	adds	r7, #40	; 0x28
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40016800 	.word	0x40016800
 8004814:	40021000 	.word	0x40021000
 8004818:	48000400 	.word	0x48000400

0800481c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <MX_I2C4_Init+0x74>)
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <MX_I2C4_Init+0x78>)
 8004824:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30A0A7FB;
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <MX_I2C4_Init+0x74>)
 8004828:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <MX_I2C4_Init+0x7c>)
 800482a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <MX_I2C4_Init+0x74>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <MX_I2C4_Init+0x74>)
 8004834:	2201      	movs	r2, #1
 8004836:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <MX_I2C4_Init+0x74>)
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <MX_I2C4_Init+0x74>)
 8004840:	2200      	movs	r2, #0
 8004842:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <MX_I2C4_Init+0x74>)
 8004846:	2200      	movs	r2, #0
 8004848:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <MX_I2C4_Init+0x74>)
 800484c:	2200      	movs	r2, #0
 800484e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <MX_I2C4_Init+0x74>)
 8004852:	2200      	movs	r2, #0
 8004854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004856:	480e      	ldr	r0, [pc, #56]	; (8004890 <MX_I2C4_Init+0x74>)
 8004858:	f004 fc68 	bl	800912c <HAL_I2C_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004862:	f000 f985 	bl	8004b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004866:	2100      	movs	r1, #0
 8004868:	4809      	ldr	r0, [pc, #36]	; (8004890 <MX_I2C4_Init+0x74>)
 800486a:	f005 fad7 	bl	8009e1c <HAL_I2CEx_ConfigAnalogFilter>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004874:	f000 f97c 	bl	8004b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004878:	2100      	movs	r1, #0
 800487a:	4805      	ldr	r0, [pc, #20]	; (8004890 <MX_I2C4_Init+0x74>)
 800487c:	f005 fb19 	bl	8009eb2 <HAL_I2CEx_ConfigDigitalFilter>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8004886:	f000 f973 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000928 	.word	0x20000928
 8004894:	40008400 	.word	0x40008400
 8004898:	30a0a7fb 	.word	0x30a0a7fb

0800489c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b09e      	sub	sp, #120	; 0x78
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	2254      	movs	r2, #84	; 0x54
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f009 fcb9 	bl	800e234 <memset>
  if(i2cHandle->Instance==I2C4)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <HAL_I2C_MspInit+0xa8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d136      	bne.n	800493a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80048cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	4618      	mov	r0, r3
 80048dc:	f006 f918 	bl	800ab10 <HAL_RCCEx_PeriphCLKConfig>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80048e6:	f000 f943 	bl	8004b70 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_I2C_MspInit+0xac>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	4a16      	ldr	r2, [pc, #88]	; (8004948 <HAL_I2C_MspInit+0xac>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_I2C_MspInit+0xac>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004902:	23c0      	movs	r3, #192	; 0xc0
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004906:	2312      	movs	r3, #18
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800490e:	2300      	movs	r3, #0
 8004910:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8004912:	2308      	movs	r3, #8
 8004914:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004916:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800491a:	4619      	mov	r1, r3
 800491c:	480b      	ldr	r0, [pc, #44]	; (800494c <HAL_I2C_MspInit+0xb0>)
 800491e:	f003 f8bd 	bl	8007a9c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_I2C_MspInit+0xac>)
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <HAL_I2C_MspInit+0xac>)
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_I2C_MspInit+0xac>)
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800493a:	bf00      	nop
 800493c:	3778      	adds	r7, #120	; 0x78
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40008400 	.word	0x40008400
 8004948:	40021000 	.word	0x40021000
 800494c:	48000800 	.word	0x48000800

08004950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004954:	f000 fd89 	bl	800546a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004958:	f000 f8b4 	bl	8004ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800495c:	f7ff fafa 	bl	8003f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8004960:	f7ff f8d6 	bl	8003b10 <MX_DMA_Init>
  MX_HRTIM1_Init();
 8004964:	f7ff fc48 	bl	80041f8 <MX_HRTIM1_Init>
  MX_TIM7_Init();
 8004968:	f000 fb4a 	bl	8005000 <MX_TIM7_Init>
  MX_DAC1_Init();
 800496c:	f7ff f846 	bl	80039fc <MX_DAC1_Init>
  MX_I2C4_Init();
 8004970:	f7ff ff54 	bl	800481c <MX_I2C4_Init>
  MX_SPI4_Init();
 8004974:	f000 f902 	bl	8004b7c <MX_SPI4_Init>
  MX_UART4_Init();
 8004978:	f000 fbf2 	bl	8005160 <MX_UART4_Init>
  MX_UART5_Init();
 800497c:	f000 fc3c 	bl	80051f8 <MX_UART5_Init>
  MX_TIM1_Init();
 8004980:	f000 fa66 	bl	8004e50 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004984:	f000 fab8 	bl	8004ef8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8004988:	f000 fb04 	bl	8004f94 <MX_TIM6_Init>
  MX_ADC1_Init();
 800498c:	f7fe ff30 	bl	80037f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  para_load();
 8004990:	f7fc fbfc 	bl	800118c <para_load>

	// Define ManualSlaveNo for Testing.
#ifdef ManualSlaveNo
	u8Slavenumber=1;
#else
	u8Slavenumber = SlaveBoardNum();
 8004994:	f000 f8e0 	bl	8004b58 <SlaveBoardNum>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <main+0x13c>)
 800499e:	801a      	strh	r2, [r3, #0]
	if(u8Slavenumber == 0 || u8Slavenumber > 39 ){
 80049a0:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <main+0x13c>)
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <main+0x60>
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <main+0x13c>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	2b27      	cmp	r3, #39	; 0x27
 80049ae:	d907      	bls.n	80049c0 <main+0x70>
		fault7.bits.cellAddress_fault = 1;
 80049b0:	4a37      	ldr	r2, [pc, #220]	; (8004a90 <main+0x140>)
 80049b2:	7813      	ldrb	r3, [r2, #0]
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	7013      	strb	r3, [r2, #0]
		add_error_to_list(28);
 80049ba:	201c      	movs	r0, #28
 80049bc:	f7ff f9fa 	bl	8003db4 <add_error_to_list>
#endif

//	CAN2_Identification();
//	MX_FDCAN1_Init();
//	MX_FDCAN2_Init();
	ControlInit(); // peripheral Initialization
 80049c0:	f7fd fb86 	bl	80020d0 <ControlInit>
	turnOff(); // Ensuring the Turning off of AFE and PSFB pulses
 80049c4:	f7fd feac 	bl	8002720 <turnOff>

	phaseShift_Pwm(); // Phase Shift Selection based on Slave Number Selected.
 80049c8:	f7fd fa7c 	bl	8001ec4 <phaseShift_Pwm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart5 , &uartRxData , 1);
 80049cc:	2201      	movs	r2, #1
 80049ce:	4931      	ldr	r1, [pc, #196]	; (8004a94 <main+0x144>)
 80049d0:	4831      	ldr	r0, [pc, #196]	; (8004a98 <main+0x148>)
 80049d2:	f007 fa0d 	bl	800bdf0 <HAL_UART_Receive_IT>
	ModbusRegister[0] = 20;
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <main+0x14c>)
 80049d8:	2214      	movs	r2, #20
 80049da:	801a      	strh	r2, [r3, #0]
	ModbusRegister[1] = 15;
 80049dc:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <main+0x14c>)
 80049de:	220f      	movs	r2, #15
 80049e0:	805a      	strh	r2, [r3, #2]
	ModbusRegister[2] = 20;
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <main+0x14c>)
 80049e4:	2214      	movs	r2, #20
 80049e6:	809a      	strh	r2, [r3, #4]
	ModbusRegister[3] = 4;
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <main+0x14c>)
 80049ea:	2204      	movs	r2, #4
 80049ec:	80da      	strh	r2, [r3, #6]
	ModbusRegister[4] = 5;
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <main+0x14c>)
 80049f0:	2205      	movs	r2, #5
 80049f2:	811a      	strh	r2, [r3, #8]
	ModbusRegister[5] = 6;
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <main+0x14c>)
 80049f6:	2206      	movs	r2, #6
 80049f8:	815a      	strh	r2, [r3, #10]
	while (1)
	{
		if(cmd.bits.fault_reset == 1){
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <main+0x150>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <main+0xbc>
		//	NVIC_SystemReset();	// System reset
			manual_fault_reset(); // Manual reset of Fault over command from Master
 8004a08:	f7fe f9ac 	bl	8002d64 <manual_fault_reset>

		}

		if (mSec1_Flag==1){
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <main+0x154>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d104      	bne.n	8004a1e <main+0xce>
			getDigiIn();
 8004a14:	f7fc fbee 	bl	80011f4 <getDigiIn>
	//			}
	//			else
	//			{
	//			}
			//CAN_DATA_XCHANGING(); // Exchange of Data between the Master and Slave
			mSec1_Flag=0;
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <main+0x154>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
		}

		//Task Executed at every 40 mSec
		if (mSec40_Flag==1){
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <main+0x158>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10a      	bne.n	8004a3c <main+0xec>
			}
			else
			{
	//				API_CAN_HEARTBEAT_CELL0139_MASTER01(DISCONNECT);
			}
			u8teamlastvalue=u8MASTER1_STATUS;
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <main+0x15c>)
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <main+0x160>)
 8004a2c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
	//				API_CAN2_HEARTBEAT_CELL0139_MASTER01(DISCONNECT);
			}
			u8teamlastvalue_CAN2=u8MASTER1_STATUS_CAN2;
 8004a2e:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <main+0x164>)
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <main+0x168>)
 8004a34:	701a      	strb	r2, [r3, #0]
			}
			else
			{

			}*/
			mSec40_Flag=0;
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <main+0x158>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
		}
		//Task Executed at every 100 mSec
		if (mSec100_Flag==1){
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <main+0x16c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d102      	bne.n	8004a4a <main+0xfa>
			mSec100_Flag=0;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <main+0x16c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
	//			CAN_DATA_XCHANGING();
		}

		// Task Executed at every 1 Sec
		if(Sec1_Flag==1){
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <main+0x170>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d118      	bne.n	8004a84 <main+0x134>
			display_errors(); // show error in display
 8004a52:	f7ff fa55 	bl	8003f00 <display_errors>
			u8MASTER1_STATUS=0;
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <main+0x15c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
			u8MASTER1_STATUS_CAN2=0;
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <main+0x164>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
			Sec1_Flag=0;
 8004a62:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <main+0x170>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
			if(cmd.bits.Parameter_Save == 1)
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <main+0x150>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <main+0x134>
			{
				cmd.bits.Parameter_Save=0;
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <main+0x150>)
 8004a78:	7813      	ldrb	r3, [r2, #0]
 8004a7a:	f36f 1345 	bfc	r3, #5, #1
 8004a7e:	7013      	strb	r3, [r2, #0]
				para_save();
 8004a80:	f7fc fbac 	bl	80011dc <para_save>
	//	  PSFBOFF();
	//	  HAL_Delay(1000);
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
		uartDataHandler();
 8004a84:	f7fe fb36 	bl	80030f4 <uartDataHandler>
	{
 8004a88:	e7b7      	b.n	80049fa <main+0xaa>
 8004a8a:	bf00      	nop
 8004a8c:	2000097e 	.word	0x2000097e
 8004a90:	20000544 	.word	0x20000544
 8004a94:	200006ea 	.word	0x200006ea
 8004a98:	20000bac 	.word	0x20000bac
 8004a9c:	200006b8 	.word	0x200006b8
 8004aa0:	20000548 	.word	0x20000548
 8004aa4:	20000450 	.word	0x20000450
 8004aa8:	20000451 	.word	0x20000451
 8004aac:	2000097c 	.word	0x2000097c
 8004ab0:	20000980 	.word	0x20000980
 8004ab4:	2000097d 	.word	0x2000097d
 8004ab8:	20000981 	.word	0x20000981
 8004abc:	20000453 	.word	0x20000453
 8004ac0:	20000452 	.word	0x20000452

08004ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b094      	sub	sp, #80	; 0x50
 8004ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aca:	f107 0318 	add.w	r3, r7, #24
 8004ace:	2238      	movs	r2, #56	; 0x38
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f009 fbae 	bl	800e234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f005 fa30 	bl	8009f4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004af4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004af6:	2302      	movs	r3, #2
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004afa:	2303      	movs	r3, #3
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004afe:	2306      	movs	r3, #6
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004b02:	2355      	movs	r3, #85	; 0x55
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b06:	2302      	movs	r3, #2
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b12:	f107 0318 	add.w	r3, r7, #24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f005 facc 	bl	800a0b4 <HAL_RCC_OscConfig>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004b22:	f000 f825 	bl	8004b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b26:	230f      	movs	r3, #15
 8004b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f005 fdc9 	bl	800a6d8 <HAL_RCC_ClockConfig>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004b4c:	f000 f810 	bl	8004b70 <Error_Handler>
  }
}
 8004b50:	bf00      	nop
 8004b52:	3750      	adds	r7, #80	; 0x50
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SlaveBoardNum>:

/* USER CODE BEGIN 4 */
uint16_t SlaveBoardNum(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
	/*Read bits from GPIO and return from here with Hex Number*/
	uint16_t u16Slavenumber=generate_address();
 8004b5e:	f7fc fce7 	bl	8001530 <generate_address>
 8004b62:	4603      	mov	r3, r0
 8004b64:	80fb      	strh	r3, [r7, #6]
	return u16Slavenumber;
 8004b66:	88fb      	ldrh	r3, [r7, #6]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b74:	b672      	cpsid	i
}
 8004b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b78:	e7fe      	b.n	8004b78 <Error_Handler+0x8>
	...

08004b7c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004b82:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <MX_SPI4_Init+0x78>)
 8004b84:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b8c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b94:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004b96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b9a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bae:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bca:	2207      	movs	r2, #7
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <MX_SPI4_Init+0x74>)
 8004bdc:	f006 f9e6 	bl	800afac <HAL_SPI_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8004be6:	f7ff ffc3 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000984 	.word	0x20000984
 8004bf4:	40013c00 	.word	0x40013c00

08004bf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_SPI_MspInit+0x7c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d127      	bne.n	8004c6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c24:	6613      	str	r3, [r2, #96]	; 0x60
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c38:	f043 0310 	orr.w	r3, r3, #16
 8004c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_SPI_MspInit+0x80>)
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SCLK_PC_Pin|SDO_PC_Pin|SDI_PC_Pin;
 8004c4a:	2364      	movs	r3, #100	; 0x64
 8004c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004c5a:	2305      	movs	r3, #5
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <HAL_SPI_MspInit+0x84>)
 8004c66:	f002 ff19 	bl	8007a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40013c00 	.word	0x40013c00
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	48001000 	.word	0x48001000

08004c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6613      	str	r3, [r2, #96]	; 0x60
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_MspInit+0x4c>)
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_MspInit+0x4c>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <HAL_MspInit+0x4c>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_MspInit+0x4c>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8004cb6:	f000 fc5d 	bl	8005574 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8004cba:	2002      	movs	r0, #2
 8004cbc:	f000 fc46 	bl	800554c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004cc0:	f005 f9e8 	bl	800a094 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cd4:	e7fe      	b.n	8004cd4 <NMI_Handler+0x4>

08004cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cda:	e7fe      	b.n	8004cda <HardFault_Handler+0x4>

08004cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ce0:	e7fe      	b.n	8004ce0 <MemManage_Handler+0x4>

08004ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ce6:	e7fe      	b.n	8004ce6 <BusFault_Handler+0x4>

08004ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cec:	e7fe      	b.n	8004cec <UsageFault_Handler+0x4>

08004cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  uartTimer();
 8004d1c:	f7fe fa44 	bl	80031a8 <uartTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d20:	f000 fbf6 	bl	8005510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ERROR_MASTER_Pin);
 8004d2c:	2004      	movs	r0, #4
 8004d2e:	f003 f881 	bl	8007e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_PRECHARGEFLT_Pin);
 8004d3a:	2008      	movs	r0, #8
 8004d3c:	f003 f87a 	bl	8007e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_FLTAFE_Pin);
 8004d48:	2010      	movs	r0, #16
 8004d4a:	f003 f873 	bl	8007e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  fault5.bits.B1F1_fault = 1;
 8004d4e:	4a06      	ldr	r2, [pc, #24]	; (8004d68 <EXTI4_IRQHandler+0x24>)
 8004d50:	7813      	ldrb	r3, [r2, #0]
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	7013      	strb	r3, [r2, #0]
  turnOff();
 8004d58:	f7fd fce2 	bl	8002720 <turnOff>
  add_error_to_list(18);
 8004d5c:	2012      	movs	r0, #18
 8004d5e:	f7ff f829 	bl	8003db4 <add_error_to_list>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000540 	.word	0x20000540

08004d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <DMA1_Channel1_IRQHandler+0x10>)
 8004d72:	f002 fd44 	bl	80077fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200007b0 	.word	0x200007b0

08004d80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004d86:	f006 fa8b 	bl	800b2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200009e8 	.word	0x200009e8

08004d94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d98:	4802      	ldr	r0, [pc, #8]	; (8004da4 <TIM4_IRQHandler+0x10>)
 8004d9a:	f006 fa81 	bl	800b2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000a34 	.word	0x20000a34

08004da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_FLTPSFB_Pin);
 8004dac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004db0:	f003 f840 	bl	8007e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  fault5.bits.B2F1_fault = 1;
 8004db4:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <EXTI15_10_IRQHandler+0x24>)
 8004db6:	7813      	ldrb	r3, [r2, #0]
 8004db8:	f043 0310 	orr.w	r3, r3, #16
 8004dbc:	7013      	strb	r3, [r2, #0]
  turnOff();
 8004dbe:	f7fd fcaf 	bl	8002720 <turnOff>
  add_error_to_list(22);
 8004dc2:	2016      	movs	r0, #22
 8004dc4:	f7fe fff6 	bl	8003db4 <add_error_to_list>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000540 	.word	0x20000540

08004dd0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004dd4:	4802      	ldr	r0, [pc, #8]	; (8004de0 <UART5_IRQHandler+0x10>)
 8004dd6:	f007 f857 	bl	800be88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000bac 	.word	0x20000bac

08004de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004de8:	4804      	ldr	r0, [pc, #16]	; (8004dfc <TIM6_DAC_IRQHandler+0x18>)
 8004dea:	f006 fa59 	bl	800b2a0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004dee:	4804      	ldr	r0, [pc, #16]	; (8004e00 <TIM6_DAC_IRQHandler+0x1c>)
 8004df0:	f002 f8d2 	bl	8006f98 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  TIM6_Execution();
 8004df4:	f7fd fb92 	bl	800251c <TIM6_Execution>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000a80 	.word	0x20000a80
 8004e00:	20000810 	.word	0x20000810

08004e04 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e08:	4805      	ldr	r0, [pc, #20]	; (8004e20 <TIM7_DAC_IRQHandler+0x1c>)
 8004e0a:	f006 fa49 	bl	800b2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Adc1_Buffer,ADC1_BUFFER_SIZE); //Start ADC1
 8004e0e:	2210      	movs	r2, #16
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <TIM7_DAC_IRQHandler+0x20>)
 8004e12:	4805      	ldr	r0, [pc, #20]	; (8004e28 <TIM7_DAC_IRQHandler+0x24>)
 8004e14:	f000 ff98 	bl	8005d48 <HAL_ADC_Start_DMA>
  Tim7_Execution();
 8004e18:	f7fd fab8 	bl	800238c <Tim7_Execution>
  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000acc 	.word	0x20000acc
 8004e24:	200001e4 	.word	0x200001e4
 8004e28:	20000744 	.word	0x20000744

08004e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <SystemInit+0x20>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <SystemInit+0x20>)
 8004e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e70:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <MX_TIM1_Init+0xa4>)
 8004e72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e8e:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e94:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e9a:	4815      	ldr	r0, [pc, #84]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004e9c:	f006 f931 	bl	800b102 <HAL_TIM_Base_Init>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004ea6:	f7ff fe63 	bl	8004b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	480e      	ldr	r0, [pc, #56]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004eb8:	f006 fb42 	bl	800b540 <HAL_TIM_ConfigClockSource>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004ec2:	f7ff fe55 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4806      	ldr	r0, [pc, #24]	; (8004ef0 <MX_TIM1_Init+0xa0>)
 8004ed8:	f006 fdca 	bl	800ba70 <HAL_TIMEx_MasterConfigSynchronization>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004ee2:	f7ff fe45 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200009e8 	.word	0x200009e8
 8004ef4:	40012c00 	.word	0x40012c00

08004ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004efe:	f107 0310 	add.w	r3, r7, #16
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	609a      	str	r2, [r3, #8]
 8004f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
 8004f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <MX_TIM4_Init+0x98>)
 8004f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f30:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004f3c:	4813      	ldr	r0, [pc, #76]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f3e:	f006 f8e0 	bl	800b102 <HAL_TIM_Base_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004f48:	f7ff fe12 	bl	8004b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004f52:	f107 0310 	add.w	r3, r7, #16
 8004f56:	4619      	mov	r1, r3
 8004f58:	480c      	ldr	r0, [pc, #48]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f5a:	f006 faf1 	bl	800b540 <HAL_TIM_ConfigClockSource>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004f64:	f7ff fe04 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4805      	ldr	r0, [pc, #20]	; (8004f8c <MX_TIM4_Init+0x94>)
 8004f76:	f006 fd7b 	bl	800ba70 <HAL_TIMEx_MasterConfigSynchronization>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004f80:	f7ff fdf6 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000a34 	.word	0x20000a34
 8004f90:	40000800 	.word	0x40000800

08004f94 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004fa4:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fa6:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <MX_TIM6_Init+0x68>)
 8004fa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004fc4:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fc6:	f006 f89c 	bl	800b102 <HAL_TIM_Base_Init>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004fd0:	f7ff fdce 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4805      	ldr	r0, [pc, #20]	; (8004ff8 <MX_TIM6_Init+0x64>)
 8004fe2:	f006 fd45 	bl	800ba70 <HAL_TIMEx_MasterConfigSynchronization>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004fec:	f7ff fdc0 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000a80 	.word	0x20000a80
 8004ffc:	40001000 	.word	0x40001000

08005000 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <MX_TIM7_Init+0x64>)
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <MX_TIM7_Init+0x68>)
 8005014:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <MX_TIM7_Init+0x64>)
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <MX_TIM7_Init+0x64>)
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <MX_TIM7_Init+0x64>)
 8005024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005028:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <MX_TIM7_Init+0x64>)
 800502c:	2200      	movs	r2, #0
 800502e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005030:	480c      	ldr	r0, [pc, #48]	; (8005064 <MX_TIM7_Init+0x64>)
 8005032:	f006 f866 	bl	800b102 <HAL_TIM_Base_Init>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800503c:	f7ff fd98 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4805      	ldr	r0, [pc, #20]	; (8005064 <MX_TIM7_Init+0x64>)
 800504e:	f006 fd0f 	bl	800ba70 <HAL_TIMEx_MasterConfigSynchronization>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005058:	f7ff fd8a 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000acc 	.word	0x20000acc
 8005068:	40001400 	.word	0x40001400

0800506c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a34      	ldr	r2, [pc, #208]	; (800514c <HAL_TIM_Base_MspInit+0xe0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d114      	bne.n	80050a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	4a33      	ldr	r2, [pc, #204]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 8005084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005088:	6613      	str	r3, [r2, #96]	; 0x60
 800508a:	4b31      	ldr	r3, [pc, #196]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	2019      	movs	r0, #25
 800509c:	f001 feb9 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80050a0:	2019      	movs	r0, #25
 80050a2:	f001 fed0 	bl	8006e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80050a6:	e04c      	b.n	8005142 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a29      	ldr	r2, [pc, #164]	; (8005154 <HAL_TIM_Base_MspInit+0xe8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d114      	bne.n	80050dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	4a26      	ldr	r2, [pc, #152]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050b8:	f043 0304 	orr.w	r3, r3, #4
 80050bc:	6593      	str	r3, [r2, #88]	; 0x58
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	201e      	movs	r0, #30
 80050d0:	f001 fe9f 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80050d4:	201e      	movs	r0, #30
 80050d6:	f001 feb6 	bl	8006e46 <HAL_NVIC_EnableIRQ>
}
 80050da:	e032      	b.n	8005142 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <HAL_TIM_Base_MspInit+0xec>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d114      	bne.n	8005110 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050e6:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050ec:	f043 0310 	orr.w	r3, r3, #16
 80050f0:	6593      	str	r3, [r2, #88]	; 0x58
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	2036      	movs	r0, #54	; 0x36
 8005104:	f001 fe85 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005108:	2036      	movs	r0, #54	; 0x36
 800510a:	f001 fe9c 	bl	8006e46 <HAL_NVIC_EnableIRQ>
}
 800510e:	e018      	b.n	8005142 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a11      	ldr	r2, [pc, #68]	; (800515c <HAL_TIM_Base_MspInit+0xf0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d113      	bne.n	8005142 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_TIM_Base_MspInit+0xe4>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	2037      	movs	r0, #55	; 0x37
 8005138:	f001 fe6b 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800513c:	2037      	movs	r0, #55	; 0x37
 800513e:	f001 fe82 	bl	8006e46 <HAL_NVIC_EnableIRQ>
}
 8005142:	bf00      	nop
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40021000 	.word	0x40021000
 8005154:	40000800 	.word	0x40000800
 8005158:	40001000 	.word	0x40001000
 800515c:	40001400 	.word	0x40001400

08005160 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <MX_UART4_Init+0x90>)
 8005166:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <MX_UART4_Init+0x94>)
 8005168:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800516a:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <MX_UART4_Init+0x90>)
 800516c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005170:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005172:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <MX_UART4_Init+0x90>)
 8005174:	2200      	movs	r2, #0
 8005176:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <MX_UART4_Init+0x90>)
 800517a:	2200      	movs	r2, #0
 800517c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <MX_UART4_Init+0x90>)
 8005180:	2200      	movs	r2, #0
 8005182:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <MX_UART4_Init+0x90>)
 8005186:	220c      	movs	r2, #12
 8005188:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <MX_UART4_Init+0x90>)
 800518c:	2200      	movs	r2, #0
 800518e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <MX_UART4_Init+0x90>)
 8005192:	2200      	movs	r2, #0
 8005194:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <MX_UART4_Init+0x90>)
 8005198:	2200      	movs	r2, #0
 800519a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <MX_UART4_Init+0x90>)
 800519e:	2200      	movs	r2, #0
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <MX_UART4_Init+0x90>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80051a8:	4811      	ldr	r0, [pc, #68]	; (80051f0 <MX_UART4_Init+0x90>)
 80051aa:	f006 fd3d 	bl	800bc28 <HAL_UART_Init>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80051b4:	f7ff fcdc 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051b8:	2100      	movs	r1, #0
 80051ba:	480d      	ldr	r0, [pc, #52]	; (80051f0 <MX_UART4_Init+0x90>)
 80051bc:	f008 ff3d 	bl	800e03a <HAL_UARTEx_SetTxFifoThreshold>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80051c6:	f7ff fcd3 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051ca:	2100      	movs	r1, #0
 80051cc:	4808      	ldr	r0, [pc, #32]	; (80051f0 <MX_UART4_Init+0x90>)
 80051ce:	f008 ff72 	bl	800e0b6 <HAL_UARTEx_SetRxFifoThreshold>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80051d8:	f7ff fcca 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80051dc:	4804      	ldr	r0, [pc, #16]	; (80051f0 <MX_UART4_Init+0x90>)
 80051de:	f008 fef3 	bl	800dfc8 <HAL_UARTEx_DisableFifoMode>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80051e8:	f7ff fcc2 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80051ec:	bf00      	nop
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000b18 	.word	0x20000b18
 80051f4:	40004c00 	.word	0x40004c00

080051f8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <MX_UART5_Init+0x90>)
 80051fe:	4a23      	ldr	r2, [pc, #140]	; (800528c <MX_UART5_Init+0x94>)
 8005200:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <MX_UART5_Init+0x90>)
 8005204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005208:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <MX_UART5_Init+0x90>)
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <MX_UART5_Init+0x90>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <MX_UART5_Init+0x90>)
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800521c:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <MX_UART5_Init+0x90>)
 800521e:	220c      	movs	r2, #12
 8005220:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005222:	4b19      	ldr	r3, [pc, #100]	; (8005288 <MX_UART5_Init+0x90>)
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <MX_UART5_Init+0x90>)
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <MX_UART5_Init+0x90>)
 8005230:	2200      	movs	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <MX_UART5_Init+0x90>)
 8005236:	2200      	movs	r2, #0
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <MX_UART5_Init+0x90>)
 800523c:	2200      	movs	r2, #0
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005240:	4811      	ldr	r0, [pc, #68]	; (8005288 <MX_UART5_Init+0x90>)
 8005242:	f006 fcf1 	bl	800bc28 <HAL_UART_Init>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800524c:	f7ff fc90 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005250:	2100      	movs	r1, #0
 8005252:	480d      	ldr	r0, [pc, #52]	; (8005288 <MX_UART5_Init+0x90>)
 8005254:	f008 fef1 	bl	800e03a <HAL_UARTEx_SetTxFifoThreshold>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800525e:	f7ff fc87 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005262:	2100      	movs	r1, #0
 8005264:	4808      	ldr	r0, [pc, #32]	; (8005288 <MX_UART5_Init+0x90>)
 8005266:	f008 ff26 	bl	800e0b6 <HAL_UARTEx_SetRxFifoThreshold>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005270:	f7ff fc7e 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8005274:	4804      	ldr	r0, [pc, #16]	; (8005288 <MX_UART5_Init+0x90>)
 8005276:	f008 fea7 	bl	800dfc8 <HAL_UARTEx_DisableFifoMode>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005280:	f7ff fc76 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000bac 	.word	0x20000bac
 800528c:	40005000 	.word	0x40005000

08005290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0a2      	sub	sp, #136	; 0x88
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052a8:	f107 0320 	add.w	r3, r7, #32
 80052ac:	2254      	movs	r2, #84	; 0x54
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f008 ffbf 	bl	800e234 <memset>
  if(uartHandle->Instance==UART4)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a52      	ldr	r2, [pc, #328]	; (8005404 <HAL_UART_MspInit+0x174>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d139      	bne.n	8005334 <HAL_UART_MspInit+0xa4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80052c0:	2308      	movs	r3, #8
 80052c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80052c4:	2300      	movs	r3, #0
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052c8:	f107 0320 	add.w	r3, r7, #32
 80052cc:	4618      	mov	r0, r3
 80052ce:	f005 fc1f 	bl	800ab10 <HAL_RCCEx_PeriphCLKConfig>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80052d8:	f7ff fc4a 	bl	8004b70 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80052dc:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <HAL_UART_MspInit+0x178>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	4a49      	ldr	r2, [pc, #292]	; (8005408 <HAL_UART_MspInit+0x178>)
 80052e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052e6:	6593      	str	r3, [r2, #88]	; 0x58
 80052e8:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_UART_MspInit+0x178>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f4:	4b44      	ldr	r3, [pc, #272]	; (8005408 <HAL_UART_MspInit+0x178>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	4a43      	ldr	r2, [pc, #268]	; (8005408 <HAL_UART_MspInit+0x178>)
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005300:	4b41      	ldr	r3, [pc, #260]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TXD_M_Pin|RXD_M_Pin;
 800530c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005310:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005312:	2302      	movs	r3, #2
 8005314:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005316:	2300      	movs	r3, #0
 8005318:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005320:	2305      	movs	r3, #5
 8005322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005326:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800532a:	4619      	mov	r1, r3
 800532c:	4837      	ldr	r0, [pc, #220]	; (800540c <HAL_UART_MspInit+0x17c>)
 800532e:	f002 fbb5 	bl	8007a9c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8005332:	e063      	b.n	80053fc <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a35      	ldr	r2, [pc, #212]	; (8005410 <HAL_UART_MspInit+0x180>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d15e      	bne.n	80053fc <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800533e:	2310      	movs	r3, #16
 8005340:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005346:	f107 0320 	add.w	r3, r7, #32
 800534a:	4618      	mov	r0, r3
 800534c:	f005 fbe0 	bl	800ab10 <HAL_RCCEx_PeriphCLKConfig>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005356:	f7ff fc0b 	bl	8004b70 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_UART_MspInit+0x178>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
 8005366:	4b28      	ldr	r3, [pc, #160]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005372:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	4a24      	ldr	r2, [pc, #144]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005378:	f043 0304 	orr.w	r3, r3, #4
 800537c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <HAL_UART_MspInit+0x178>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <HAL_UART_MspInit+0x178>)
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TXD_D_Pin;
 80053a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80053b6:	2305      	movs	r3, #5
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(TXD_D_GPIO_Port, &GPIO_InitStruct);
 80053bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053c0:	4619      	mov	r1, r3
 80053c2:	4812      	ldr	r0, [pc, #72]	; (800540c <HAL_UART_MspInit+0x17c>)
 80053c4:	f002 fb6a 	bl	8007a9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RXD_D_Pin;
 80053c8:	2304      	movs	r3, #4
 80053ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053cc:	2302      	movs	r3, #2
 80053ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80053da:	2305      	movs	r3, #5
 80053dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(RXD_D_GPIO_Port, &GPIO_InitStruct);
 80053e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053e4:	4619      	mov	r1, r3
 80053e6:	480b      	ldr	r0, [pc, #44]	; (8005414 <HAL_UART_MspInit+0x184>)
 80053e8:	f002 fb58 	bl	8007a9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	2035      	movs	r0, #53	; 0x35
 80053f2:	f001 fd0e 	bl	8006e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80053f6:	2035      	movs	r0, #53	; 0x35
 80053f8:	f001 fd25 	bl	8006e46 <HAL_NVIC_EnableIRQ>
}
 80053fc:	bf00      	nop
 80053fe:	3788      	adds	r7, #136	; 0x88
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40004c00 	.word	0x40004c00
 8005408:	40021000 	.word	0x40021000
 800540c:	48000800 	.word	0x48000800
 8005410:	40005000 	.word	0x40005000
 8005414:	48000c00 	.word	0x48000c00

08005418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005418:	480d      	ldr	r0, [pc, #52]	; (8005450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800541a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800541c:	f7ff fd06 	bl	8004e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005420:	480c      	ldr	r0, [pc, #48]	; (8005454 <LoopForever+0x6>)
  ldr r1, =_edata
 8005422:	490d      	ldr	r1, [pc, #52]	; (8005458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005424:	4a0d      	ldr	r2, [pc, #52]	; (800545c <LoopForever+0xe>)
  movs r3, #0
 8005426:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005428:	e002      	b.n	8005430 <LoopCopyDataInit>

0800542a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800542a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800542c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800542e:	3304      	adds	r3, #4

08005430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005434:	d3f9      	bcc.n	800542a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005438:	4c0a      	ldr	r4, [pc, #40]	; (8005464 <LoopForever+0x16>)
  movs r3, #0
 800543a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800543c:	e001      	b.n	8005442 <LoopFillZerobss>

0800543e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800543e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005440:	3204      	adds	r2, #4

08005442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005444:	d3fb      	bcc.n	800543e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005446:	f008 fec3 	bl	800e1d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800544a:	f7ff fa81 	bl	8004950 <main>

0800544e <LoopForever>:

LoopForever:
    b LoopForever
 800544e:	e7fe      	b.n	800544e <LoopForever>
  ldr   r0, =_estack
 8005450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005458:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 800545c:	0800ea90 	.word	0x0800ea90
  ldr r2, =_sbss
 8005460:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8005464:	20000c44 	.word	0x20000c44

08005468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005468:	e7fe      	b.n	8005468 <ADC1_2_IRQHandler>

0800546a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005474:	2003      	movs	r0, #3
 8005476:	f001 fcc1 	bl	8006dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800547a:	200f      	movs	r0, #15
 800547c:	f000 f80e 	bl	800549c <HAL_InitTick>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	71fb      	strb	r3, [r7, #7]
 800548a:	e001      	b.n	8005490 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800548c:	f7ff fbf8 	bl	8004c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005490:	79fb      	ldrb	r3, [r7, #7]

}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054a8:	4b16      	ldr	r3, [pc, #88]	; (8005504 <HAL_InitTick+0x68>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d022      	beq.n	80054f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_InitTick+0x6c>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_InitTick+0x68>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fccc 	bl	8006e62 <HAL_SYSTICK_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10f      	bne.n	80054f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	d809      	bhi.n	80054ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054d6:	2200      	movs	r2, #0
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	f04f 30ff 	mov.w	r0, #4294967295
 80054de:	f001 fc98 	bl	8006e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <HAL_InitTick+0x70>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e007      	b.n	80054fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
 80054ee:	e004      	b.n	80054fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	e001      	b.n	80054fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200001c0 	.word	0x200001c0
 8005508:	200001b8 	.word	0x200001b8
 800550c:	200001bc 	.word	0x200001bc

08005510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_IncTick+0x1c>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_IncTick+0x20>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4413      	add	r3, r2
 800551e:	4a03      	ldr	r2, [pc, #12]	; (800552c <HAL_IncTick+0x1c>)
 8005520:	6013      	str	r3, [r2, #0]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20000c40 	.word	0x20000c40
 8005530:	200001c0 	.word	0x200001c0

08005534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return uwTick;
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_GetTick+0x14>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000c40 	.word	0x20000c40

0800554c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 0202 	bic.w	r2, r3, #2
 800555c:	4904      	ldr	r1, [pc, #16]	; (8005570 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40010030 	.word	0x40010030

08005574 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	6013      	str	r3, [r2, #0]
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010030 	.word	0x40010030

08005594 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3360      	adds	r3, #96	; 0x60
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <LL_ADC_SetOffset+0x44>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	03fff000 	.word	0x03fff000

08005644 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3360      	adds	r3, #96	; 0x60
 8005652:	461a      	mov	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3360      	adds	r3, #96	; 0x60
 8005680:	461a      	mov	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	431a      	orrs	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3360      	adds	r3, #96	; 0x60
 80056b6:	461a      	mov	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3360      	adds	r3, #96	; 0x60
 80056ec:	461a      	mov	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	431a      	orrs	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	615a      	str	r2, [r3, #20]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3330      	adds	r3, #48	; 0x30
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	4413      	add	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	211f      	movs	r1, #31
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	401a      	ands	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0e9b      	lsrs	r3, r3, #26
 8005796:	f003 011f 	and.w	r1, r3, #31
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa01 f303 	lsl.w	r3, r1, r3
 80057a4:	431a      	orrs	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3314      	adds	r3, #20
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	0e5b      	lsrs	r3, r3, #25
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	4413      	add	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	0d1b      	lsrs	r3, r3, #20
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2107      	movs	r1, #7
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	401a      	ands	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	0d1b      	lsrs	r3, r3, #20
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	431a      	orrs	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005824:	43db      	mvns	r3, r3
 8005826:	401a      	ands	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0318 	and.w	r3, r3, #24
 800582e:	4908      	ldr	r1, [pc, #32]	; (8005850 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005830:	40d9      	lsrs	r1, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	400b      	ands	r3, r1
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	431a      	orrs	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	0007ffff 	.word	0x0007ffff

08005854 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 031f 	and.w	r3, r3, #31
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6093      	str	r3, [r2, #8]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d101      	bne.n	80058ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80058cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f8:	d101      	bne.n	80058fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800591c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005920:	f043 0201 	orr.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <LL_ADC_IsEnabled+0x18>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <LL_ADC_IsEnabled+0x1a>
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800596a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800596e:	f043 0204 	orr.w	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d101      	bne.n	800599a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d101      	bne.n	80059c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b089      	sub	sp, #36	; 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e1a9      	b.n	8005d3e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fd ff7d 	bl	80038f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff3f 	bl	8005894 <LL_ADC_IsDeepPowerDownEnabled>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff25 	bl	8005870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff5a 	bl	80058e4 <LL_ADC_IsInternalRegulatorEnabled>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d115      	bne.n	8005a62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff ff3e 	bl	80058bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a40:	4b9c      	ldr	r3, [pc, #624]	; (8005cb4 <HAL_ADC_Init+0x2e4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	4a9c      	ldr	r2, [pc, #624]	; (8005cb8 <HAL_ADC_Init+0x2e8>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	099b      	lsrs	r3, r3, #6
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a54:	e002      	b.n	8005a5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f9      	bne.n	8005a56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff3c 	bl	80058e4 <LL_ADC_IsInternalRegulatorEnabled>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ff75 	bl	8005982 <LL_ADC_REG_IsConversionOngoing>
 8005a98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 8142 	bne.w	8005d2c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f040 813e 	bne.w	8005d2c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005ab8:	f043 0202 	orr.w	r2, r3, #2
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ff35 	bl	8005934 <LL_ADC_IsEnabled>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d141      	bne.n	8005b54 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ad8:	d004      	beq.n	8005ae4 <HAL_ADC_Init+0x114>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a77      	ldr	r2, [pc, #476]	; (8005cbc <HAL_ADC_Init+0x2ec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10f      	bne.n	8005b04 <HAL_ADC_Init+0x134>
 8005ae4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005ae8:	f7ff ff24 	bl	8005934 <LL_ADC_IsEnabled>
 8005aec:	4604      	mov	r4, r0
 8005aee:	4873      	ldr	r0, [pc, #460]	; (8005cbc <HAL_ADC_Init+0x2ec>)
 8005af0:	f7ff ff20 	bl	8005934 <LL_ADC_IsEnabled>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4323      	orrs	r3, r4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e012      	b.n	8005b2a <HAL_ADC_Init+0x15a>
 8005b04:	486e      	ldr	r0, [pc, #440]	; (8005cc0 <HAL_ADC_Init+0x2f0>)
 8005b06:	f7ff ff15 	bl	8005934 <LL_ADC_IsEnabled>
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	486d      	ldr	r0, [pc, #436]	; (8005cc4 <HAL_ADC_Init+0x2f4>)
 8005b0e:	f7ff ff11 	bl	8005934 <LL_ADC_IsEnabled>
 8005b12:	4603      	mov	r3, r0
 8005b14:	431c      	orrs	r4, r3
 8005b16:	486c      	ldr	r0, [pc, #432]	; (8005cc8 <HAL_ADC_Init+0x2f8>)
 8005b18:	f7ff ff0c 	bl	8005934 <LL_ADC_IsEnabled>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4323      	orrs	r3, r4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d012      	beq.n	8005b54 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b36:	d004      	beq.n	8005b42 <HAL_ADC_Init+0x172>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5f      	ldr	r2, [pc, #380]	; (8005cbc <HAL_ADC_Init+0x2ec>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <HAL_ADC_Init+0x176>
 8005b42:	4a62      	ldr	r2, [pc, #392]	; (8005ccc <HAL_ADC_Init+0x2fc>)
 8005b44:	e000      	b.n	8005b48 <HAL_ADC_Init+0x178>
 8005b46:	4a62      	ldr	r2, [pc, #392]	; (8005cd0 <HAL_ADC_Init+0x300>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f7ff fd20 	bl	8005594 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7f5b      	ldrb	r3, [r3, #29]
 8005b58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005b64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005b6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d106      	bne.n	8005b90 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	3b01      	subs	r3, #1
 8005b88:	045b      	lsls	r3, r3, #17
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <HAL_ADC_Init+0x304>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fee4 	bl	80059a8 <LL_ADC_INJ_IsConversionOngoing>
 8005be0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d17f      	bne.n	8005ce8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d17c      	bne.n	8005ce8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005bf2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bfa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0a:	f023 0302 	bic.w	r3, r3, #2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	430b      	orrs	r3, r1
 8005c16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d017      	beq.n	8005c50 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6911      	ldr	r1, [r2, #16]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005c4e:	e013      	b.n	8005c78 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d12a      	bne.n	8005cd8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c9e:	4311      	orrs	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0201 	orr.w	r2, r2, #1
 8005cb0:	611a      	str	r2, [r3, #16]
 8005cb2:	e019      	b.n	8005ce8 <HAL_ADC_Init+0x318>
 8005cb4:	200001b8 	.word	0x200001b8
 8005cb8:	053e2d63 	.word	0x053e2d63
 8005cbc:	50000100 	.word	0x50000100
 8005cc0:	50000400 	.word	0x50000400
 8005cc4:	50000500 	.word	0x50000500
 8005cc8:	50000600 	.word	0x50000600
 8005ccc:	50000300 	.word	0x50000300
 8005cd0:	50000700 	.word	0x50000700
 8005cd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	f023 010f 	bic.w	r1, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	1e5a      	subs	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
 8005d08:	e007      	b.n	8005d1a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 020f 	bic.w	r2, r2, #15
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d2a:	e007      	b.n	8005d3c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	f043 0210 	orr.w	r2, r3, #16
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3724      	adds	r7, #36	; 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}
 8005d46:	bf00      	nop

08005d48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d5c:	d004      	beq.n	8005d68 <HAL_ADC_Start_DMA+0x20>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <HAL_ADC_Start_DMA+0x184>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d101      	bne.n	8005d6c <HAL_ADC_Start_DMA+0x24>
 8005d68:	4b59      	ldr	r3, [pc, #356]	; (8005ed0 <HAL_ADC_Start_DMA+0x188>)
 8005d6a:	e000      	b.n	8005d6e <HAL_ADC_Start_DMA+0x26>
 8005d6c:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <HAL_ADC_Start_DMA+0x18c>)
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fd70 	bl	8005854 <LL_ADC_GetMultimode>
 8005d74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fe01 	bl	8005982 <LL_ADC_REG_IsConversionOngoing>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 809b 	bne.w	8005ebe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_Start_DMA+0x4e>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e096      	b.n	8005ec4 <HAL_ADC_Start_DMA+0x17c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4d      	ldr	r2, [pc, #308]	; (8005ed8 <HAL_ADC_Start_DMA+0x190>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d008      	beq.n	8005dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d002      	beq.n	8005dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d17a      	bne.n	8005eb0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fcf6 	bl	80067ac <ADC_Enable>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d16d      	bne.n	8005ea6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_ADC_Start_DMA+0x184>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_ADC_Start_DMA+0xb4>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a3b      	ldr	r2, [pc, #236]	; (8005edc <HAL_ADC_Start_DMA+0x194>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d002      	beq.n	8005df8 <HAL_ADC_Start_DMA+0xb0>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	e003      	b.n	8005e00 <HAL_ADC_Start_DMA+0xb8>
 8005df8:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <HAL_ADC_Start_DMA+0x198>)
 8005dfa:	e001      	b.n	8005e00 <HAL_ADC_Start_DMA+0xb8>
 8005dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d002      	beq.n	8005e0e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d006      	beq.n	8005e34 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f023 0206 	bic.w	r2, r3, #6
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
 8005e32:	e002      	b.n	8005e3a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <HAL_ADC_Start_DMA+0x19c>)
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <HAL_ADC_Start_DMA+0x1a0>)
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	4a27      	ldr	r2, [pc, #156]	; (8005eec <HAL_ADC_Start_DMA+0x1a4>)
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	221c      	movs	r2, #28
 8005e58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0210 	orr.w	r2, r2, #16
 8005e70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3340      	adds	r3, #64	; 0x40
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f001 fb79 	bl	8007588 <HAL_DMA_Start_IT>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fd5b 	bl	800595a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005ea4:	e00d      	b.n	8005ec2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005eae:	e008      	b.n	8005ec2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005ebc:	e001      	b.n	8005ec2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	50000100 	.word	0x50000100
 8005ed0:	50000300 	.word	0x50000300
 8005ed4:	50000700 	.word	0x50000700
 8005ed8:	50000600 	.word	0x50000600
 8005edc:	50000500 	.word	0x50000500
 8005ee0:	50000400 	.word	0x50000400
 8005ee4:	080068d9 	.word	0x080068d9
 8005ee8:	080069b1 	.word	0x080069b1
 8005eec:	080069cd 	.word	0x080069cd

08005ef0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b0b6      	sub	sp, #216	; 0xd8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d102      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x24>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	f000 bc13 	b.w	8006776 <HAL_ADC_ConfigChannel+0x84a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fd10 	bl	8005982 <LL_ADC_REG_IsConversionOngoing>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 83f3 	bne.w	8006750 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f7ff fbf1 	bl	800575e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fcfe 	bl	8005982 <LL_ADC_REG_IsConversionOngoing>
 8005f86:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fd0a 	bl	80059a8 <LL_ADC_INJ_IsConversionOngoing>
 8005f94:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 81d9 	bne.w	8006354 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 81d4 	bne.w	8006354 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f7ff fbf8 	bl	80057b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fb9f 	bl	8005712 <LL_ADC_SetSamplingTimeCommonConfig>
 8005fd4:	e00e      	b.n	8005ff4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6819      	ldr	r1, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7ff fbe7 	bl	80057b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fb8f 	bl	8005712 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	08db      	lsrs	r3, r3, #3
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d022      	beq.n	800605c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6919      	ldr	r1, [r3, #16]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006026:	f7ff fae9 	bl	80055fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6919      	ldr	r1, [r3, #16]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	461a      	mov	r2, r3
 8006038:	f7ff fb35 	bl	80056a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006048:	2b01      	cmp	r3, #1
 800604a:	d102      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x126>
 800604c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006050:	e000      	b.n	8006054 <HAL_ADC_ConfigChannel+0x128>
 8006052:	2300      	movs	r3, #0
 8006054:	461a      	mov	r2, r3
 8006056:	f7ff fb41 	bl	80056dc <LL_ADC_SetOffsetSaturation>
 800605a:	e17b      	b.n	8006354 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff faee 	bl	8005644 <LL_ADC_GetOffsetChannel>
 8006068:	4603      	mov	r3, r0
 800606a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <HAL_ADC_ConfigChannel+0x15c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2100      	movs	r1, #0
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fae3 	bl	8005644 <LL_ADC_GetOffsetChannel>
 800607e:	4603      	mov	r3, r0
 8006080:	0e9b      	lsrs	r3, r3, #26
 8006082:	f003 021f 	and.w	r2, r3, #31
 8006086:	e01e      	b.n	80060c6 <HAL_ADC_ConfigChannel+0x19a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fad8 	bl	8005644 <LL_ADC_GetOffsetChannel>
 8006094:	4603      	mov	r3, r0
 8006096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80060b6:	2320      	movs	r3, #32
 80060b8:	e004      	b.n	80060c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80060ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060be:	fab3 f383 	clz	r3, r3
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_ADC_ConfigChannel+0x1b2>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	0e9b      	lsrs	r3, r3, #26
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	e018      	b.n	8006110 <HAL_ADC_ConfigChannel+0x1e4>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060ea:	fa93 f3a3 	rbit	r3, r3
 80060ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80060f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80060fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006102:	2320      	movs	r3, #32
 8006104:	e004      	b.n	8006110 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006110:	429a      	cmp	r2, r3
 8006112:	d106      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff faa7 	bl	8005670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fa8b 	bl	8005644 <LL_ADC_GetOffsetChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <HAL_ADC_ConfigChannel+0x222>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fa80 	bl	8005644 <LL_ADC_GetOffsetChannel>
 8006144:	4603      	mov	r3, r0
 8006146:	0e9b      	lsrs	r3, r3, #26
 8006148:	f003 021f 	and.w	r2, r3, #31
 800614c:	e01e      	b.n	800618c <HAL_ADC_ConfigChannel+0x260>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2101      	movs	r1, #1
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fa75 	bl	8005644 <LL_ADC_GetOffsetChannel>
 800615a:	4603      	mov	r3, r0
 800615c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006160:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006164:	fa93 f3a3 	rbit	r3, r3
 8006168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800616c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	e004      	b.n	800618a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006184:	fab3 f383 	clz	r3, r3
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x278>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	0e9b      	lsrs	r3, r3, #26
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	e018      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x2aa>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b0:	fa93 f3a3 	rbit	r3, r3
 80061b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80061b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80061c8:	2320      	movs	r3, #32
 80061ca:	e004      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80061cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d0:	fab3 f383 	clz	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d106      	bne.n	80061e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	2101      	movs	r1, #1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fa44 	bl	8005670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2102      	movs	r1, #2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fa28 	bl	8005644 <LL_ADC_GetOffsetChannel>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_ADC_ConfigChannel+0x2e8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fa1d 	bl	8005644 <LL_ADC_GetOffsetChannel>
 800620a:	4603      	mov	r3, r0
 800620c:	0e9b      	lsrs	r3, r3, #26
 800620e:	f003 021f 	and.w	r2, r3, #31
 8006212:	e01e      	b.n	8006252 <HAL_ADC_ConfigChannel+0x326>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2102      	movs	r1, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fa12 	bl	8005644 <LL_ADC_GetOffsetChannel>
 8006220:	4603      	mov	r3, r0
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800623a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006242:	2320      	movs	r3, #32
 8006244:	e004      	b.n	8006250 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <HAL_ADC_ConfigChannel+0x33e>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	0e9b      	lsrs	r3, r3, #26
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	e016      	b.n	8006298 <HAL_ADC_ConfigChannel+0x36c>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800627c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800627e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800628a:	2320      	movs	r3, #32
 800628c:	e004      	b.n	8006298 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800628e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2102      	movs	r1, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f9e3 	bl	8005670 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2103      	movs	r1, #3
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff f9c7 	bl	8005644 <LL_ADC_GetOffsetChannel>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x3aa>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2103      	movs	r1, #3
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f9bc 	bl	8005644 <LL_ADC_GetOffsetChannel>
 80062cc:	4603      	mov	r3, r0
 80062ce:	0e9b      	lsrs	r3, r3, #26
 80062d0:	f003 021f 	and.w	r2, r3, #31
 80062d4:	e017      	b.n	8006306 <HAL_ADC_ConfigChannel+0x3da>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2103      	movs	r1, #3
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f9b1 	bl	8005644 <LL_ADC_GetOffsetChannel>
 80062e2:	4603      	mov	r3, r0
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e8:	fa93 f3a3 	rbit	r3, r3
 80062ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80062ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80062f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80062f8:	2320      	movs	r3, #32
 80062fa:	e003      	b.n	8006304 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80062fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <HAL_ADC_ConfigChannel+0x3f2>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	0e9b      	lsrs	r3, r3, #26
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	e011      	b.n	8006342 <HAL_ADC_ConfigChannel+0x416>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006326:	fa93 f3a3 	rbit	r3, r3
 800632a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800632c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006336:	2320      	movs	r3, #32
 8006338:	e003      	b.n	8006342 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	fab3 f383 	clz	r3, r3
 8006340:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006342:	429a      	cmp	r2, r3
 8006344:	d106      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	2103      	movs	r1, #3
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff f98e 	bl	8005670 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff faeb 	bl	8005934 <LL_ADC_IsEnabled>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 813d 	bne.w	80065e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	461a      	mov	r2, r3
 8006374:	f7ff fa4a 	bl	800580c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4aa2      	ldr	r2, [pc, #648]	; (8006608 <HAL_ADC_ConfigChannel+0x6dc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f040 812e 	bne.w	80065e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x480>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	0e9b      	lsrs	r3, r3, #26
 800639a:	3301      	adds	r3, #1
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	2b09      	cmp	r3, #9
 80063a2:	bf94      	ite	ls
 80063a4:	2301      	movls	r3, #1
 80063a6:	2300      	movhi	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e019      	b.n	80063e0 <HAL_ADC_ConfigChannel+0x4b4>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b4:	fa93 f3a3 	rbit	r3, r3
 80063b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80063ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80063be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80063c4:	2320      	movs	r3, #32
 80063c6:	e003      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80063c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ca:	fab3 f383 	clz	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3301      	adds	r3, #1
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	bf94      	ite	ls
 80063da:	2301      	movls	r3, #1
 80063dc:	2300      	movhi	r3, #0
 80063de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d079      	beq.n	80064d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x4d4>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	0e9b      	lsrs	r3, r3, #26
 80063f6:	3301      	adds	r3, #1
 80063f8:	069b      	lsls	r3, r3, #26
 80063fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063fe:	e015      	b.n	800642c <HAL_ADC_ConfigChannel+0x500>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006408:	fa93 f3a3 	rbit	r3, r3
 800640c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800640e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006410:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006418:	2320      	movs	r3, #32
 800641a:	e003      	b.n	8006424 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800641c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641e:	fab3 f383 	clz	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	3301      	adds	r3, #1
 8006426:	069b      	lsls	r3, r3, #26
 8006428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <HAL_ADC_ConfigChannel+0x520>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	0e9b      	lsrs	r3, r3, #26
 800643e:	3301      	adds	r3, #1
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	e017      	b.n	800647c <HAL_ADC_ConfigChannel+0x550>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006454:	fa93 f3a3 	rbit	r3, r3
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800645e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006464:	2320      	movs	r3, #32
 8006466:	e003      	b.n	8006470 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646a:	fab3 f383 	clz	r3, r3
 800646e:	b2db      	uxtb	r3, r3
 8006470:	3301      	adds	r3, #1
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2101      	movs	r1, #1
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	ea42 0103 	orr.w	r1, r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x576>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	0e9b      	lsrs	r3, r3, #26
 8006492:	3301      	adds	r3, #1
 8006494:	f003 021f 	and.w	r2, r3, #31
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	051b      	lsls	r3, r3, #20
 80064a0:	e018      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x5a8>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	fa93 f3a3 	rbit	r3, r3
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80064ba:	2320      	movs	r3, #32
 80064bc:	e003      	b.n	80064c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	fab3 f383 	clz	r3, r3
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3301      	adds	r3, #1
 80064c8:	f003 021f 	and.w	r2, r3, #31
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064d4:	430b      	orrs	r3, r1
 80064d6:	e07e      	b.n	80065d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d107      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x5c8>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	0e9b      	lsrs	r3, r3, #26
 80064ea:	3301      	adds	r3, #1
 80064ec:	069b      	lsls	r3, r3, #26
 80064ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064f2:	e015      	b.n	8006520 <HAL_ADC_ConfigChannel+0x5f4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800650c:	2320      	movs	r3, #32
 800650e:	e003      	b.n	8006518 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	fab3 f383 	clz	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	3301      	adds	r3, #1
 800651a:	069b      	lsls	r3, r3, #26
 800651c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x614>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	0e9b      	lsrs	r3, r3, #26
 8006532:	3301      	adds	r3, #1
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	e017      	b.n	8006570 <HAL_ADC_ConfigChannel+0x644>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	fa93 f3a3 	rbit	r3, r3
 800654c:	61fb      	str	r3, [r7, #28]
  return result;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006558:	2320      	movs	r3, #32
 800655a:	e003      	b.n	8006564 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	fab3 f383 	clz	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3301      	adds	r3, #1
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	2101      	movs	r1, #1
 800656c:	fa01 f303 	lsl.w	r3, r1, r3
 8006570:	ea42 0103 	orr.w	r1, r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10d      	bne.n	800659c <HAL_ADC_ConfigChannel+0x670>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	0e9b      	lsrs	r3, r3, #26
 8006586:	3301      	adds	r3, #1
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	3b1e      	subs	r3, #30
 8006594:	051b      	lsls	r3, r3, #20
 8006596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800659a:	e01b      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x6a8>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	fa93 f3a3 	rbit	r3, r3
 80065a8:	613b      	str	r3, [r7, #16]
  return result;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80065b4:	2320      	movs	r3, #32
 80065b6:	e003      	b.n	80065c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	fab3 f383 	clz	r3, r3
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	3301      	adds	r3, #1
 80065c2:	f003 021f 	and.w	r2, r3, #31
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	3b1e      	subs	r3, #30
 80065ce:	051b      	lsls	r3, r3, #20
 80065d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065d4:	430b      	orrs	r3, r1
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	6892      	ldr	r2, [r2, #8]
 80065da:	4619      	mov	r1, r3
 80065dc:	f7ff f8eb 	bl	80057b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_ADC_ConfigChannel+0x6e0>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80be 	beq.w	800676a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065f6:	d004      	beq.n	8006602 <HAL_ADC_ConfigChannel+0x6d6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a04      	ldr	r2, [pc, #16]	; (8006610 <HAL_ADC_ConfigChannel+0x6e4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10a      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x6ec>
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <HAL_ADC_ConfigChannel+0x6e8>)
 8006604:	e009      	b.n	800661a <HAL_ADC_ConfigChannel+0x6ee>
 8006606:	bf00      	nop
 8006608:	407f0000 	.word	0x407f0000
 800660c:	80080000 	.word	0x80080000
 8006610:	50000100 	.word	0x50000100
 8006614:	50000300 	.word	0x50000300
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <HAL_ADC_ConfigChannel+0x854>)
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe ffe0 	bl	80055e0 <LL_ADC_GetCommonPathInternalCh>
 8006620:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a56      	ldr	r2, [pc, #344]	; (8006784 <HAL_ADC_ConfigChannel+0x858>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_ADC_ConfigChannel+0x70c>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a55      	ldr	r2, [pc, #340]	; (8006788 <HAL_ADC_ConfigChannel+0x85c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d13a      	bne.n	80066ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800663c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d134      	bne.n	80066ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800664c:	d005      	beq.n	800665a <HAL_ADC_ConfigChannel+0x72e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a4e      	ldr	r2, [pc, #312]	; (800678c <HAL_ADC_ConfigChannel+0x860>)
 8006654:	4293      	cmp	r3, r2
 8006656:	f040 8085 	bne.w	8006764 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006662:	d004      	beq.n	800666e <HAL_ADC_ConfigChannel+0x742>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a49      	ldr	r2, [pc, #292]	; (8006790 <HAL_ADC_ConfigChannel+0x864>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_ADC_ConfigChannel+0x746>
 800666e:	4a49      	ldr	r2, [pc, #292]	; (8006794 <HAL_ADC_ConfigChannel+0x868>)
 8006670:	e000      	b.n	8006674 <HAL_ADC_ConfigChannel+0x748>
 8006672:	4a43      	ldr	r2, [pc, #268]	; (8006780 <HAL_ADC_ConfigChannel+0x854>)
 8006674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe ff9b 	bl	80055ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006684:	4b44      	ldr	r3, [pc, #272]	; (8006798 <HAL_ADC_ConfigChannel+0x86c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	099b      	lsrs	r3, r3, #6
 800668a:	4a44      	ldr	r2, [pc, #272]	; (800679c <HAL_ADC_ConfigChannel+0x870>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	099b      	lsrs	r3, r3, #6
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800669e:	e002      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f9      	bne.n	80066a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066ac:	e05a      	b.n	8006764 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3b      	ldr	r2, [pc, #236]	; (80067a0 <HAL_ADC_ConfigChannel+0x874>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d125      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11f      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a31      	ldr	r2, [pc, #196]	; (8006790 <HAL_ADC_ConfigChannel+0x864>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d104      	bne.n	80066d8 <HAL_ADC_ConfigChannel+0x7ac>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a34      	ldr	r2, [pc, #208]	; (80067a4 <HAL_ADC_ConfigChannel+0x878>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d047      	beq.n	8006768 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066e0:	d004      	beq.n	80066ec <HAL_ADC_ConfigChannel+0x7c0>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <HAL_ADC_ConfigChannel+0x864>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x7c4>
 80066ec:	4a29      	ldr	r2, [pc, #164]	; (8006794 <HAL_ADC_ConfigChannel+0x868>)
 80066ee:	e000      	b.n	80066f2 <HAL_ADC_ConfigChannel+0x7c6>
 80066f0:	4a23      	ldr	r2, [pc, #140]	; (8006780 <HAL_ADC_ConfigChannel+0x854>)
 80066f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f7fe ff5c 	bl	80055ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006702:	e031      	b.n	8006768 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <HAL_ADC_ConfigChannel+0x87c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d12d      	bne.n	800676a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800670e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d127      	bne.n	800676a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <HAL_ADC_ConfigChannel+0x864>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800672c:	d004      	beq.n	8006738 <HAL_ADC_ConfigChannel+0x80c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a17      	ldr	r2, [pc, #92]	; (8006790 <HAL_ADC_ConfigChannel+0x864>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <HAL_ADC_ConfigChannel+0x810>
 8006738:	4a16      	ldr	r2, [pc, #88]	; (8006794 <HAL_ADC_ConfigChannel+0x868>)
 800673a:	e000      	b.n	800673e <HAL_ADC_ConfigChannel+0x812>
 800673c:	4a10      	ldr	r2, [pc, #64]	; (8006780 <HAL_ADC_ConfigChannel+0x854>)
 800673e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7fe ff36 	bl	80055ba <LL_ADC_SetCommonPathInternalCh>
 800674e:	e00c      	b.n	800676a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006762:	e002      	b.n	800676a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006768:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006772:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006776:	4618      	mov	r0, r3
 8006778:	37d8      	adds	r7, #216	; 0xd8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	50000700 	.word	0x50000700
 8006784:	c3210000 	.word	0xc3210000
 8006788:	90c00010 	.word	0x90c00010
 800678c:	50000600 	.word	0x50000600
 8006790:	50000100 	.word	0x50000100
 8006794:	50000300 	.word	0x50000300
 8006798:	200001b8 	.word	0x200001b8
 800679c:	053e2d63 	.word	0x053e2d63
 80067a0:	c7520000 	.word	0xc7520000
 80067a4:	50000500 	.word	0x50000500
 80067a8:	cb840000 	.word	0xcb840000

080067ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff f8b9 	bl	8005934 <LL_ADC_IsEnabled>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d176      	bne.n	80068b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <ADC_Enable+0x114>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	f043 0210 	orr.w	r2, r3, #16
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e062      	b.n	80068b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff f888 	bl	800590c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006804:	d004      	beq.n	8006810 <ADC_Enable+0x64>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2e      	ldr	r2, [pc, #184]	; (80068c4 <ADC_Enable+0x118>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d101      	bne.n	8006814 <ADC_Enable+0x68>
 8006810:	4b2d      	ldr	r3, [pc, #180]	; (80068c8 <ADC_Enable+0x11c>)
 8006812:	e000      	b.n	8006816 <ADC_Enable+0x6a>
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <ADC_Enable+0x120>)
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fee2 	bl	80055e0 <LL_ADC_GetCommonPathInternalCh>
 800681c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800681e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006822:	2b00      	cmp	r3, #0
 8006824:	d013      	beq.n	800684e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006826:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <ADC_Enable+0x124>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	099b      	lsrs	r3, r3, #6
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <ADC_Enable+0x128>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	4613      	mov	r3, r2
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006840:	e002      	b.n	8006848 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3b01      	subs	r3, #1
 8006846:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f9      	bne.n	8006842 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800684e:	f7fe fe71 	bl	8005534 <HAL_GetTick>
 8006852:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006854:	e028      	b.n	80068a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff f86a 	bl	8005934 <LL_ADC_IsEnabled>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f84e 	bl	800590c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006870:	f7fe fe60 	bl	8005534 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d914      	bls.n	80068a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d00d      	beq.n	80068a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	f043 0210 	orr.w	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e007      	b.n	80068b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d1cf      	bne.n	8006856 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	8000003f 	.word	0x8000003f
 80068c4:	50000100 	.word	0x50000100
 80068c8:	50000300 	.word	0x50000300
 80068cc:	50000700 	.word	0x50000700
 80068d0:	200001b8 	.word	0x200001b8
 80068d4:	053e2d63 	.word	0x053e2d63

080068d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d14b      	bne.n	800698a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d021      	beq.n	8006950 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe ff11 	bl	8005738 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d032      	beq.n	8006982 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d12b      	bne.n	8006982 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11f      	bne.n	8006982 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	65da      	str	r2, [r3, #92]	; 0x5c
 800694e:	e018      	b.n	8006982 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d111      	bne.n	8006982 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	f043 0201 	orr.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fab4 	bl	8005ef0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006988:	e00e      	b.n	80069a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff fabe 	bl	8005f18 <HAL_ADC_ErrorCallback>
}
 800699c:	e004      	b.n	80069a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff faa0 	bl	8005f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ea:	f043 0204 	orr.w	r2, r3, #4
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff fa90 	bl	8005f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <LL_ADC_IsEnabled>:
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <LL_ADC_IsEnabled+0x18>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <LL_ADC_IsEnabled+0x1a>
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d101      	bne.n	8006a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b0a1      	sub	sp, #132	; 0x84
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e0e7      	b.n	8006c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a72:	2300      	movs	r3, #0
 8006a74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a76:	2300      	movs	r3, #0
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a82:	d102      	bne.n	8006a8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a84:	4b6f      	ldr	r3, [pc, #444]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	e009      	b.n	8006a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a6e      	ldr	r2, [pc, #440]	; (8006c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d102      	bne.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006a94:	4b6d      	ldr	r3, [pc, #436]	; (8006c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	e001      	b.n	8006a9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0be      	b.n	8006c3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff ffb1 	bl	8006a26 <LL_ADC_REG_IsConversionOngoing>
 8006ac4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff ffab 	bl	8006a26 <LL_ADC_REG_IsConversionOngoing>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 80a0 	bne.w	8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 809c 	bne.w	8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae8:	d004      	beq.n	8006af4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a55      	ldr	r2, [pc, #340]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d101      	bne.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006af4:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006af6:	e000      	b.n	8006afa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006af8:	4b56      	ldr	r3, [pc, #344]	; (8006c54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006afa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d04b      	beq.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b16:	035b      	lsls	r3, r3, #13
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b28:	d004      	beq.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a45      	ldr	r2, [pc, #276]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10f      	bne.n	8006b54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006b34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b38:	f7ff ff62 	bl	8006a00 <LL_ADC_IsEnabled>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4841      	ldr	r0, [pc, #260]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b40:	f7ff ff5e 	bl	8006a00 <LL_ADC_IsEnabled>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4323      	orrs	r3, r4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bf0c      	ite	eq
 8006b4c:	2301      	moveq	r3, #1
 8006b4e:	2300      	movne	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e012      	b.n	8006b7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006b54:	483c      	ldr	r0, [pc, #240]	; (8006c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006b56:	f7ff ff53 	bl	8006a00 <LL_ADC_IsEnabled>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	483b      	ldr	r0, [pc, #236]	; (8006c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006b5e:	f7ff ff4f 	bl	8006a00 <LL_ADC_IsEnabled>
 8006b62:	4603      	mov	r3, r0
 8006b64:	431c      	orrs	r4, r3
 8006b66:	483c      	ldr	r0, [pc, #240]	; (8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006b68:	f7ff ff4a 	bl	8006a00 <LL_ADC_IsEnabled>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4323      	orrs	r3, r4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d056      	beq.n	8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b86:	f023 030f 	bic.w	r3, r3, #15
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	6892      	ldr	r2, [r2, #8]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	431a      	orrs	r2, r3
 8006b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b98:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b9a:	e047      	b.n	8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb0:	d004      	beq.n	8006bbc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d10f      	bne.n	8006bdc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006bbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006bc0:	f7ff ff1e 	bl	8006a00 <LL_ADC_IsEnabled>
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	481f      	ldr	r0, [pc, #124]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006bc8:	f7ff ff1a 	bl	8006a00 <LL_ADC_IsEnabled>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4323      	orrs	r3, r4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e012      	b.n	8006c02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006bdc:	481a      	ldr	r0, [pc, #104]	; (8006c48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006bde:	f7ff ff0f 	bl	8006a00 <LL_ADC_IsEnabled>
 8006be2:	4604      	mov	r4, r0
 8006be4:	4819      	ldr	r0, [pc, #100]	; (8006c4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006be6:	f7ff ff0b 	bl	8006a00 <LL_ADC_IsEnabled>
 8006bea:	4603      	mov	r3, r0
 8006bec:	431c      	orrs	r4, r3
 8006bee:	481a      	ldr	r0, [pc, #104]	; (8006c58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006bf0:	f7ff ff06 	bl	8006a00 <LL_ADC_IsEnabled>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4323      	orrs	r3, r4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2301      	moveq	r3, #1
 8006bfe:	2300      	movne	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d012      	beq.n	8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c0e:	f023 030f 	bic.w	r3, r3, #15
 8006c12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c16:	e009      	b.n	8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006c2a:	e000      	b.n	8006c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3784      	adds	r7, #132	; 0x84
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd90      	pop	{r4, r7, pc}
 8006c42:	bf00      	nop
 8006c44:	50000100 	.word	0x50000100
 8006c48:	50000400 	.word	0x50000400
 8006c4c:	50000500 	.word	0x50000500
 8006c50:	50000300 	.word	0x50000300
 8006c54:	50000700 	.word	0x50000700
 8006c58:	50000600 	.word	0x50000600

08006c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c8e:	4a04      	ldr	r2, [pc, #16]	; (8006ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	60d3      	str	r3, [r2, #12]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	e000ed00 	.word	0xe000ed00

08006ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <__NVIC_GetPriorityGrouping+0x18>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	0a1b      	lsrs	r3, r3, #8
 8006cae:	f003 0307 	and.w	r3, r3, #7
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	e000ed00 	.word	0xe000ed00

08006cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db0b      	blt.n	8006cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	f003 021f 	and.w	r2, r3, #31
 8006cd8:	4907      	ldr	r1, [pc, #28]	; (8006cf8 <__NVIC_EnableIRQ+0x38>)
 8006cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	e000e100 	.word	0xe000e100

08006cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	db0a      	blt.n	8006d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	490c      	ldr	r1, [pc, #48]	; (8006d48 <__NVIC_SetPriority+0x4c>)
 8006d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1a:	0112      	lsls	r2, r2, #4
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	440b      	add	r3, r1
 8006d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d24:	e00a      	b.n	8006d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4908      	ldr	r1, [pc, #32]	; (8006d4c <__NVIC_SetPriority+0x50>)
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	3b04      	subs	r3, #4
 8006d34:	0112      	lsls	r2, r2, #4
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	440b      	add	r3, r1
 8006d3a:	761a      	strb	r2, [r3, #24]
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	e000e100 	.word	0xe000e100
 8006d4c:	e000ed00 	.word	0xe000ed00

08006d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f1c3 0307 	rsb	r3, r3, #7
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	bf28      	it	cs
 8006d6e:	2304      	movcs	r3, #4
 8006d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3304      	adds	r3, #4
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d902      	bls.n	8006d80 <NVIC_EncodePriority+0x30>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3b03      	subs	r3, #3
 8006d7e:	e000      	b.n	8006d82 <NVIC_EncodePriority+0x32>
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43da      	mvns	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	401a      	ands	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d98:	f04f 31ff 	mov.w	r1, #4294967295
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006da2:	43d9      	mvns	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006da8:	4313      	orrs	r3, r2
         );
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3724      	adds	r7, #36	; 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dc8:	d301      	bcc.n	8006dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e00f      	b.n	8006dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <SysTick_Config+0x40>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dd6:	210f      	movs	r1, #15
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	f7ff ff8e 	bl	8006cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <SysTick_Config+0x40>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <SysTick_Config+0x40>)
 8006de8:	2207      	movs	r2, #7
 8006dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	e000e010 	.word	0xe000e010

08006dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff29 	bl	8006c5c <__NVIC_SetPriorityGrouping>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e20:	f7ff ff40 	bl	8006ca4 <__NVIC_GetPriorityGrouping>
 8006e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	6978      	ldr	r0, [r7, #20]
 8006e2c:	f7ff ff90 	bl	8006d50 <NVIC_EncodePriority>
 8006e30:	4602      	mov	r2, r0
 8006e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff ff5f 	bl	8006cfc <__NVIC_SetPriority>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff ff33 	bl	8006cc0 <__NVIC_EnableIRQ>
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ffa4 	bl	8006db8 <SysTick_Config>
 8006e70:	4603      	mov	r3, r0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e014      	b.n	8006eb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	791b      	ldrb	r3, [r3, #4]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fc fdf1 	bl	8003a84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e056      	b.n	8006f82 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	795b      	ldrb	r3, [r3, #5]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_DAC_Start+0x20>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e050      	b.n	8006f82 <HAL_DAC_Start+0xc2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2201      	movs	r2, #1
 8006efa:	409a      	lsls	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <HAL_DAC_Start+0xd0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <HAL_DAC_Start+0xd4>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	099b      	lsrs	r3, r3, #6
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006f16:	e002      	b.n	8006f1e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f9      	bne.n	8006f18 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d11d      	bne.n	8006f74 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	605a      	str	r2, [r3, #4]
 8006f48:	e014      	b.n	8006f74 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d107      	bne.n	8006f74 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0202 	orr.w	r2, r2, #2
 8006f72:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	200001b8 	.word	0x200001b8
 8006f94:	053e2d63 	.word	0x053e2d63

08006f98 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01d      	beq.n	8006ff6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d018      	beq.n	8006ff6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f854 	bl	800709e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01d      	beq.n	800703c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d018      	beq.n	800703c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f043 0202 	orr.w	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007024:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007034:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9f4 	bl	8007424 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e018      	b.n	8007092 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	3308      	adds	r3, #8
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e004      	b.n	8007088 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3314      	adds	r3, #20
 8007086:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	461a      	mov	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	; 0x28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_DAC_ConfigChannel+0x1c>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e19e      	b.n	8007412 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	795b      	ldrb	r3, [r3, #5]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_DAC_ConfigChannel+0x2c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e198      	b.n	8007412 <HAL_DAC_ConfigChannel+0x35e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2202      	movs	r2, #2
 80070ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d17a      	bne.n	80071ea <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80070f4:	f7fe fa1e 	bl	8005534 <HAL_GetTick>
 80070f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d13d      	bne.n	800717c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007100:	e018      	b.n	8007134 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007102:	f7fe fa17 	bl	8005534 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d911      	bls.n	8007134 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f043 0208 	orr.w	r2, r3, #8
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2203      	movs	r2, #3
 800712e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e16e      	b.n	8007412 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1df      	bne.n	8007102 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800714a:	641a      	str	r2, [r3, #64]	; 0x40
 800714c:	e020      	b.n	8007190 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800714e:	f7fe f9f1 	bl	8005534 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	d90f      	bls.n	800717c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	2b00      	cmp	r3, #0
 8007164:	da0a      	bge.n	800717c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2203      	movs	r2, #3
 8007176:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e14a      	b.n	8007412 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	2b00      	cmp	r3, #0
 8007184:	dbe3      	blt.n	800714e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80071a0:	fa01 f303 	lsl.w	r3, r1, r3
 80071a4:	43db      	mvns	r3, r3
 80071a6:	ea02 0103 	and.w	r1, r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	409a      	lsls	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	21ff      	movs	r1, #255	; 0xff
 80071cc:	fa01 f303 	lsl.w	r3, r1, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	ea02 0103 	and.w	r1, r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	409a      	lsls	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d11d      	bne.n	800722e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	221f      	movs	r2, #31
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720a:	4013      	ands	r3, r2
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	4313      	orrs	r3, r2
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2207      	movs	r2, #7
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007246:	4013      	ands	r3, r2
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d102      	bne.n	8007258 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8007252:	2300      	movs	r3, #0
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	e00f      	b.n	8007278 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d102      	bne.n	8007266 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007260:	2301      	movs	r3, #1
 8007262:	623b      	str	r3, [r7, #32]
 8007264:	e008      	b.n	8007278 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800726e:	2301      	movs	r3, #1
 8007270:	623b      	str	r3, [r7, #32]
 8007272:	e001      	b.n	8007278 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007274:	2300      	movs	r3, #0
 8007276:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729a:	4013      	ands	r3, r2
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d102      	bne.n	80072ac <HAL_DAC_ConfigChannel+0x1f8>
 80072a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072aa:	e000      	b.n	80072ae <HAL_DAC_ConfigChannel+0x1fa>
 80072ac:	2300      	movs	r3, #0
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	4013      	ands	r3, r2
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d102      	bne.n	80072d8 <HAL_DAC_ConfigChannel+0x224>
 80072d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d6:	e000      	b.n	80072da <HAL_DAC_ConfigChannel+0x226>
 80072d8:	2300      	movs	r3, #0
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d114      	bne.n	800731a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80072f0:	f003 fb90 	bl	800aa14 <HAL_RCC_GetHCLKFreq>
 80072f4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4a48      	ldr	r2, [pc, #288]	; (800741c <HAL_DAC_ConfigChannel+0x368>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d904      	bls.n	8007308 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
 8007306:	e00f      	b.n	8007328 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4a45      	ldr	r2, [pc, #276]	; (8007420 <HAL_DAC_ConfigChannel+0x36c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d90a      	bls.n	8007326 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
 8007318:	e006      	b.n	8007328 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007320:	4313      	orrs	r3, r2
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	e000      	b.n	8007328 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007326:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007336:	4313      	orrs	r3, r2
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6819      	ldr	r1, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43da      	mvns	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	400a      	ands	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	43db      	mvns	r3, r3
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	4013      	ands	r3, r2
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	4313      	orrs	r3, r2
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	22c0      	movs	r2, #192	; 0xc0
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	43da      	mvns	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	400a      	ands	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	089b      	lsrs	r3, r3, #2
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	089b      	lsrs	r3, r3, #2
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80073e8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ec:	43db      	mvns	r3, r3
 80073ee:	ea02 0103 	and.w	r1, r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	409a      	lsls	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007410:	7ffb      	ldrb	r3, [r7, #31]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3728      	adds	r7, #40	; 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	09896800 	.word	0x09896800
 8007420:	04c4b400 	.word	0x04c4b400

08007424 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e08d      	b.n	8007566 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	4b47      	ldr	r3, [pc, #284]	; (8007570 <HAL_DMA_Init+0x138>)
 8007452:	429a      	cmp	r2, r3
 8007454:	d80f      	bhi.n	8007476 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	4b45      	ldr	r3, [pc, #276]	; (8007574 <HAL_DMA_Init+0x13c>)
 800745e:	4413      	add	r3, r2
 8007460:	4a45      	ldr	r2, [pc, #276]	; (8007578 <HAL_DMA_Init+0x140>)
 8007462:	fba2 2303 	umull	r2, r3, r2, r3
 8007466:	091b      	lsrs	r3, r3, #4
 8007468:	009a      	lsls	r2, r3, #2
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a42      	ldr	r2, [pc, #264]	; (800757c <HAL_DMA_Init+0x144>)
 8007472:	641a      	str	r2, [r3, #64]	; 0x40
 8007474:	e00e      	b.n	8007494 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <HAL_DMA_Init+0x148>)
 800747e:	4413      	add	r3, r2
 8007480:	4a3d      	ldr	r2, [pc, #244]	; (8007578 <HAL_DMA_Init+0x140>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	009a      	lsls	r2, r3, #2
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a3c      	ldr	r2, [pc, #240]	; (8007584 <HAL_DMA_Init+0x14c>)
 8007492:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80074b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa76 	bl	80079d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f4:	d102      	bne.n	80074fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007510:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <HAL_DMA_Init+0x104>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d80c      	bhi.n	800753c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa96 	bl	8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007538:	605a      	str	r2, [r3, #4]
 800753a:	e008      	b.n	800754e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40020407 	.word	0x40020407
 8007574:	bffdfff8 	.word	0xbffdfff8
 8007578:	cccccccd 	.word	0xcccccccd
 800757c:	40020000 	.word	0x40020000
 8007580:	bffdfbf8 	.word	0xbffdfbf8
 8007584:	40020400 	.word	0x40020400

08007588 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_DMA_Start_IT+0x20>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e066      	b.n	8007676 <HAL_DMA_Start_IT+0xee>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d155      	bne.n	8007668 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f9bb 	bl	800795c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 020e 	orr.w	r2, r2, #14
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e00f      	b.n	8007620 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0204 	bic.w	r2, r2, #4
 800760e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 020a 	orr.w	r2, r2, #10
 800761e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800763c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007654:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e005      	b.n	8007674 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007670:	2302      	movs	r3, #2
 8007672:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d005      	beq.n	80076a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2204      	movs	r2, #4
 800769a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
 80076a0:	e037      	b.n	8007712 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 020e 	bic.w	r2, r2, #14
 80076b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d6:	f003 021f 	and.w	r2, r3, #31
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	2101      	movs	r1, #1
 80076e0:	fa01 f202 	lsl.w	r2, r1, r2
 80076e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80076ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00c      	beq.n	8007712 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007706:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007710:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d00d      	beq.n	8007764 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2204      	movs	r2, #4
 800774c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	e047      	b.n	80077f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 020e 	bic.w	r2, r2, #14
 8007772:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007798:	f003 021f 	and.w	r2, r3, #31
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f202 	lsl.w	r2, r1, r2
 80077a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80077d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
    }
  }
  return status;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2204      	movs	r2, #4
 8007820:	409a      	lsls	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4013      	ands	r3, r2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d026      	beq.n	8007878 <HAL_DMA_IRQHandler+0x7a>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d021      	beq.n	8007878 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b00      	cmp	r3, #0
 8007840:	d107      	bne.n	8007852 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0204 	bic.w	r2, r2, #4
 8007850:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	f003 021f 	and.w	r2, r3, #31
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2104      	movs	r1, #4
 8007860:	fa01 f202 	lsl.w	r2, r1, r2
 8007864:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	d071      	beq.n	8007952 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007876:	e06c      	b.n	8007952 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2202      	movs	r2, #2
 8007882:	409a      	lsls	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4013      	ands	r3, r2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02e      	beq.n	80078ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d029      	beq.n	80078ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10b      	bne.n	80078bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 020a 	bic.w	r2, r2, #10
 80078b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	f003 021f 	and.w	r2, r3, #31
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	2102      	movs	r1, #2
 80078ca:	fa01 f202 	lsl.w	r2, r1, r2
 80078ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d038      	beq.n	8007952 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80078e8:	e033      	b.n	8007952 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	2208      	movs	r2, #8
 80078f4:	409a      	lsls	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d02a      	beq.n	8007954 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d025      	beq.n	8007954 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 020e 	bic.w	r2, r2, #14
 8007916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791c:	f003 021f 	and.w	r2, r3, #31
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f202 	lsl.w	r2, r1, r2
 800792a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007952:	bf00      	nop
 8007954:	bf00      	nop
}
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007972:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007984:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	f003 021f 	and.w	r2, r3, #31
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	2101      	movs	r1, #1
 8007994:	fa01 f202 	lsl.w	r2, r1, r2
 8007998:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d108      	bne.n	80079bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80079ba:	e007      	b.n	80079cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d802      	bhi.n	80079f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80079ec:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e001      	b.n	80079f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80079f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	3b08      	subs	r3, #8
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a04:	fba2 2303 	umull	r2, r3, r2, r3
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	089b      	lsrs	r3, r3, #2
 8007a12:	009a      	lsls	r2, r3, #2
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a22:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	409a      	lsls	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40020407 	.word	0x40020407
 8007a44:	40020800 	.word	0x40020800
 8007a48:	40020820 	.word	0x40020820
 8007a4c:	cccccccd 	.word	0xcccccccd
 8007a50:	40020880 	.word	0x40020880

08007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	2201      	movs	r2, #1
 8007a82:	409a      	lsls	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	1000823f 	.word	0x1000823f
 8007a98:	40020940 	.word	0x40020940

08007a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007aaa:	e15a      	b.n	8007d62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 814c 	beq.w	8007d5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d005      	beq.n	8007adc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d130      	bne.n	8007b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	43db      	mvns	r3, r3
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4013      	ands	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b12:	2201      	movs	r2, #1
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	091b      	lsrs	r3, r3, #4
 8007b28:	f003 0201 	and.w	r2, r3, #1
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d017      	beq.n	8007b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	2203      	movs	r2, #3
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d123      	bne.n	8007bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	08da      	lsrs	r2, r3, #3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3208      	adds	r2, #8
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	220f      	movs	r2, #15
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	08da      	lsrs	r2, r3, #3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3208      	adds	r2, #8
 8007bc8:	6939      	ldr	r1, [r7, #16]
 8007bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	2203      	movs	r2, #3
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4013      	ands	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f003 0203 	and.w	r2, r3, #3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 80a6 	beq.w	8007d5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c10:	4b5b      	ldr	r3, [pc, #364]	; (8007d80 <HAL_GPIO_Init+0x2e4>)
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	4a5a      	ldr	r2, [pc, #360]	; (8007d80 <HAL_GPIO_Init+0x2e4>)
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8007c1c:	4b58      	ldr	r3, [pc, #352]	; (8007d80 <HAL_GPIO_Init+0x2e4>)
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c28:	4a56      	ldr	r2, [pc, #344]	; (8007d84 <HAL_GPIO_Init+0x2e8>)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	089b      	lsrs	r3, r3, #2
 8007c2e:	3302      	adds	r3, #2
 8007c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	220f      	movs	r2, #15
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	43db      	mvns	r3, r3
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c52:	d01f      	beq.n	8007c94 <HAL_GPIO_Init+0x1f8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a4c      	ldr	r2, [pc, #304]	; (8007d88 <HAL_GPIO_Init+0x2ec>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d019      	beq.n	8007c90 <HAL_GPIO_Init+0x1f4>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a4b      	ldr	r2, [pc, #300]	; (8007d8c <HAL_GPIO_Init+0x2f0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d013      	beq.n	8007c8c <HAL_GPIO_Init+0x1f0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a4a      	ldr	r2, [pc, #296]	; (8007d90 <HAL_GPIO_Init+0x2f4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00d      	beq.n	8007c88 <HAL_GPIO_Init+0x1ec>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a49      	ldr	r2, [pc, #292]	; (8007d94 <HAL_GPIO_Init+0x2f8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <HAL_GPIO_Init+0x1e8>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a48      	ldr	r2, [pc, #288]	; (8007d98 <HAL_GPIO_Init+0x2fc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d101      	bne.n	8007c80 <HAL_GPIO_Init+0x1e4>
 8007c7c:	2305      	movs	r3, #5
 8007c7e:	e00a      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c80:	2306      	movs	r3, #6
 8007c82:	e008      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c84:	2304      	movs	r3, #4
 8007c86:	e006      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e004      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e002      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <HAL_GPIO_Init+0x1fa>
 8007c94:	2300      	movs	r3, #0
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	f002 0203 	and.w	r2, r2, #3
 8007c9c:	0092      	lsls	r2, r2, #2
 8007c9e:	4093      	lsls	r3, r2
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ca6:	4937      	ldr	r1, [pc, #220]	; (8007d84 <HAL_GPIO_Init+0x2e8>)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	089b      	lsrs	r3, r3, #2
 8007cac:	3302      	adds	r3, #2
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cb4:	4b39      	ldr	r3, [pc, #228]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007cd8:	4a30      	ldr	r2, [pc, #192]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007cde:	4b2f      	ldr	r3, [pc, #188]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4013      	ands	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d02:	4a26      	ldr	r2, [pc, #152]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d08:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4013      	ands	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d32:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <HAL_GPIO_Init+0x300>)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f47f ae9d 	bne.w	8007aac <HAL_GPIO_Init+0x10>
  }
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40021000 	.word	0x40021000
 8007d84:	40010000 	.word	0x40010000
 8007d88:	48000400 	.word	0x48000400
 8007d8c:	48000800 	.word	0x48000800
 8007d90:	48000c00 	.word	0x48000c00
 8007d94:	48001000 	.word	0x48001000
 8007d98:	48001400 	.word	0x48001400
 8007d9c:	40010400 	.word	0x40010400

08007da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	887b      	ldrh	r3, [r7, #2]
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007db8:	2301      	movs	r3, #1
 8007dba:	73fb      	strb	r3, [r7, #15]
 8007dbc:	e001      	b.n	8007dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007de0:	787b      	ldrb	r3, [r7, #1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007dec:	e002      	b.n	8007df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dee:	887a      	ldrh	r2, [r7, #2]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e12:	887a      	ldrh	r2, [r7, #2]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4013      	ands	r3, r2
 8007e18:	041a      	lsls	r2, r3, #16
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	43d9      	mvns	r1, r3
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	400b      	ands	r3, r1
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	619a      	str	r2, [r3, #24]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e40:	695a      	ldr	r2, [r3, #20]
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d006      	beq.n	8007e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e4a:	4a05      	ldr	r2, [pc, #20]	; (8007e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e50:	88fb      	ldrh	r3, [r7, #6]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f806 	bl	8007e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40010400 	.word	0x40010400

08007e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e0be      	b.n	800800c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02e      	beq.n	8007f38 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a4d      	ldr	r2, [pc, #308]	; (8008014 <HAL_HRTIM_Init+0x198>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d10b      	bne.n	8007efc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007ee4:	4b4c      	ldr	r3, [pc, #304]	; (8008018 <HAL_HRTIM_Init+0x19c>)
 8007ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee8:	4a4b      	ldr	r2, [pc, #300]	; (8008018 <HAL_HRTIM_Init+0x19c>)
 8007eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eee:	6613      	str	r3, [r2, #96]	; 0x60
 8007ef0:	4b49      	ldr	r3, [pc, #292]	; (8008018 <HAL_HRTIM_Init+0x19c>)
 8007ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007f0a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f20:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fc fbf9 	bl	8004730 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d012      	beq.n	8007f70 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f58:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007f80:	2300      	movs	r3, #0
 8007f82:	75fb      	strb	r3, [r7, #23]
 8007f84:	e03e      	b.n	8008004 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007f86:	7dfa      	ldrb	r2, [r7, #23]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	3318      	adds	r3, #24
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007f9a:	7dfa      	ldrb	r2, [r7, #23]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	331c      	adds	r3, #28
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007fae:	7dfa      	ldrb	r2, [r7, #23]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	3320      	adds	r3, #32
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007fc2:	7dfa      	ldrb	r2, [r7, #23]
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007fd6:	7dfa      	ldrb	r2, [r7, #23]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3328      	adds	r3, #40	; 0x28
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007fea:	7dfa      	ldrb	r2, [r7, #23]
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	3301      	adds	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b06      	cmp	r3, #6
 8008008:	d9bd      	bls.n	8007f86 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40016800 	.word	0x40016800
 8008018:	40021000 	.word	0x40021000

0800801c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8008030:	2302      	movs	r3, #2
 8008032:	e045      	b.n	80080c0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d114      	bne.n	8008076 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0202 	bic.w	r2, r2, #2
 800805c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0201 	orr.w	r2, r2, #1
 8008070:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8008074:	e01f      	b.n	80080b6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0202 	orr.w	r2, r2, #2
 8008086:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008092:	f023 010c 	bic.w	r1, r3, #12
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80080d6:	f7fd fa2d 	bl	8005534 <HAL_GetTick>
 80080da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80080dc:	e014      	b.n	8008108 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d010      	beq.n	8008108 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80080e6:	f7fd fa25 	bl	8005534 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2207      	movs	r2, #7
 8008100:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e011      	b.n	800812c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008118:	d1e1      	bne.n	80080de <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d101      	bne.n	8008150 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800814c:	2302      	movs	r3, #2
 800814e:	e015      	b.n	800817c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d104      	bne.n	8008168 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fb73 	bl	800884c <HRTIM_MasterBase_Config>
 8008166:	e004      	b.n	8008172 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fb9c 	bl	80088aa <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d101      	bne.n	80081a0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800819c:	2302      	movs	r3, #2
 800819e:	e07a      	b.n	8008296 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e073      	b.n	8008296 <HAL_HRTIM_WaveformTimerConfig+0x112>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2202      	movs	r2, #2
 80081ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b06      	cmp	r3, #6
 80081c2:	d104      	bne.n	80081ce <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fbaf 	bl	800892a <HRTIM_MasterWaveform_Config>
 80081cc:	e004      	b.n	80081d8 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fc46 	bl	8008a64 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6819      	ldr	r1, [r3, #0]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4403      	add	r3, r0
 80081ea:	3320      	adds	r3, #32
 80081ec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6859      	ldr	r1, [r3, #4]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4403      	add	r3, r0
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6899      	ldr	r1, [r3, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4403      	add	r3, r0
 8008216:	3328      	adds	r3, #40	; 0x28
 8008218:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4403      	add	r3, r0
 800822c:	332c      	adds	r3, #44	; 0x2c
 800822e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6919      	ldr	r1, [r3, #16]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4613      	mov	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4403      	add	r3, r0
 8008242:	3330      	adds	r3, #48	; 0x30
 8008244:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 ff01 	bl	8009050 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d017      	beq.n	8008284 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d113      	bne.n	8008284 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3301      	adds	r3, #1
 8008264:	01db      	lsls	r3, r3, #7
 8008266:	4413      	add	r3, r2
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008272:	025b      	lsls	r3, r3, #9
 8008274:	68f9      	ldr	r1, [r7, #12]
 8008276:	6809      	ldr	r1, [r1, #0]
 8008278:	431a      	orrs	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3301      	adds	r3, #1
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	440b      	add	r3, r1
 8008282:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d101      	bne.n	80082ba <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
 80082b8:	e020      	b.n	80082fc <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e019      	b.n	80082fc <HAL_HRTIM_WaveformTimerControl+0x5e>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fd47 	bl	8008d70 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 feb3 	bl	8009050 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d101      	bne.n	8008320 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 800831c:	2302      	movs	r3, #2
 800831e:	e067      	b.n	80083f0 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_HRTIM_DeadTimeConfig+0x2a>
 800832a:	2302      	movs	r3, #2
 800832c:	e060      	b.n	80083f0 <HAL_HRTIM_DeadTimeConfig+0xec>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008346:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	041a      	lsls	r2, r3, #16
 8008386:	4b1d      	ldr	r3, [pc, #116]	; (80083fc <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8008388:	4013      	ands	r3, r2
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	01db      	lsls	r3, r3, #7
 80083c2:	4413      	add	r3, r2
 80083c4:	33b8      	adds	r3, #184	; 0xb8
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	6811      	ldr	r1, [r2, #0]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	01db      	lsls	r3, r3, #7
 80083d8:	440b      	add	r3, r1
 80083da:	33b8      	adds	r3, #184	; 0xb8
 80083dc:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	01ff0000 	.word	0x01ff0000
 8008400:	3c002000 	.word	0x3c002000

08008404 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d101      	bne.n	8008422 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800841e:	2302      	movs	r3, #2
 8008420:	e157      	b.n	80086d2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800842c:	2302      	movs	r3, #2
 800842e:	e150      	b.n	80086d2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b06      	cmp	r3, #6
 8008444:	d140      	bne.n	80084c8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3b01      	subs	r3, #1
 800844a:	2b07      	cmp	r3, #7
 800844c:	d82a      	bhi.n	80084a4 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008475 	.word	0x08008475
 8008458:	08008481 	.word	0x08008481
 800845c:	080084a5 	.word	0x080084a5
 8008460:	0800848d 	.word	0x0800848d
 8008464:	080084a5 	.word	0x080084a5
 8008468:	080084a5 	.word	0x080084a5
 800846c:	080084a5 	.word	0x080084a5
 8008470:	08008499 	.word	0x08008499
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	61da      	str	r2, [r3, #28]
        break;
 800847e:	e01a      	b.n	80084b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800848a:	e014      	b.n	80084b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008496:	e00e      	b.n	80084b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80084a2:	e008      	b.n	80084b6 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2207      	movs	r2, #7
 80084a8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 80084b4:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b07      	cmp	r3, #7
 80084c0:	f040 80fe 	bne.w	80086c0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e104      	b.n	80086d2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b07      	cmp	r3, #7
 80084ce:	f200 80e3 	bhi.w	8008698 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f9 	.word	0x080084f9
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	08008699 	.word	0x08008699
 80084e4:	080085c9 	.word	0x080085c9
 80084e8:	08008699 	.word	0x08008699
 80084ec:	08008699 	.word	0x08008699
 80084f0:	08008699 	.word	0x08008699
 80084f4:	080085dd 	.word	0x080085dd
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6819      	ldr	r1, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	01db      	lsls	r3, r3, #7
 8008504:	440b      	add	r3, r1
 8008506:	339c      	adds	r3, #156	; 0x9c
 8008508:	601a      	str	r2, [r3, #0]
        break;
 800850a:	e0d1      	b.n	80086b0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	440b      	add	r3, r1
 800851a:	33a4      	adds	r3, #164	; 0xa4
 800851c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d03f      	beq.n	80085a6 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3301      	adds	r3, #1
 800852e:	01db      	lsls	r3, r3, #7
 8008530:	4413      	add	r3, r2
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6811      	ldr	r1, [r2, #0]
 8008538:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3301      	adds	r3, #1
 8008540:	01db      	lsls	r3, r3, #7
 8008542:	440b      	add	r3, r1
 8008544:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	01db      	lsls	r3, r3, #7
 8008550:	4413      	add	r3, r2
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	68f9      	ldr	r1, [r7, #12]
 800855a:	6809      	ldr	r1, [r1, #0]
 800855c:	431a      	orrs	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	3301      	adds	r3, #1
 8008562:	01db      	lsls	r3, r3, #7
 8008564:	440b      	add	r3, r1
 8008566:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008570:	d109      	bne.n	8008586 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6819      	ldr	r1, [r3, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	01db      	lsls	r3, r3, #7
 800857e:	440b      	add	r3, r1
 8008580:	339c      	adds	r3, #156	; 0x9c
 8008582:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008584:	e091      	b.n	80086aa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800858e:	f040 808c 	bne.w	80086aa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	01db      	lsls	r3, r3, #7
 800859e:	440b      	add	r3, r1
 80085a0:	33a8      	adds	r3, #168	; 0xa8
 80085a2:	601a      	str	r2, [r3, #0]
         break;
 80085a4:	e081      	b.n	80086aa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3301      	adds	r3, #1
 80085ae:	01db      	lsls	r3, r3, #7
 80085b0:	4413      	add	r3, r2
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	6811      	ldr	r1, [r2, #0]
 80085b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3301      	adds	r3, #1
 80085c0:	01db      	lsls	r3, r3, #7
 80085c2:	440b      	add	r3, r1
 80085c4:	601a      	str	r2, [r3, #0]
         break;
 80085c6:	e070      	b.n	80086aa <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6819      	ldr	r1, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	01db      	lsls	r3, r3, #7
 80085d4:	440b      	add	r3, r1
 80085d6:	33a8      	adds	r3, #168	; 0xa8
 80085d8:	601a      	str	r2, [r3, #0]
        break;
 80085da:	e069      	b.n	80086b0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	01db      	lsls	r3, r3, #7
 80085e8:	440b      	add	r3, r1
 80085ea:	33ac      	adds	r3, #172	; 0xac
 80085ec:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d03f      	beq.n	8008676 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3301      	adds	r3, #1
 80085fe:	01db      	lsls	r3, r3, #7
 8008600:	4413      	add	r3, r2
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	6811      	ldr	r1, [r2, #0]
 8008608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3301      	adds	r3, #1
 8008610:	01db      	lsls	r3, r3, #7
 8008612:	440b      	add	r3, r1
 8008614:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	3301      	adds	r3, #1
 800861e:	01db      	lsls	r3, r3, #7
 8008620:	4413      	add	r3, r2
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	6809      	ldr	r1, [r1, #0]
 800862e:	431a      	orrs	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3301      	adds	r3, #1
 8008634:	01db      	lsls	r3, r3, #7
 8008636:	440b      	add	r3, r1
 8008638:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008642:	d109      	bne.n	8008658 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6819      	ldr	r1, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	440b      	add	r3, r1
 8008652:	339c      	adds	r3, #156	; 0x9c
 8008654:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008656:	e02a      	b.n	80086ae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008660:	d125      	bne.n	80086ae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	01db      	lsls	r3, r3, #7
 800866e:	440b      	add	r3, r1
 8008670:	33a8      	adds	r3, #168	; 0xa8
 8008672:	601a      	str	r2, [r3, #0]
         break;
 8008674:	e01b      	b.n	80086ae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3301      	adds	r3, #1
 800867e:	01db      	lsls	r3, r3, #7
 8008680:	4413      	add	r3, r2
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	6811      	ldr	r1, [r2, #0]
 8008688:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3301      	adds	r3, #1
 8008690:	01db      	lsls	r3, r3, #7
 8008692:	440b      	add	r3, r1
 8008694:	601a      	str	r2, [r3, #0]
         break;
 8008696:	e00a      	b.n	80086ae <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2207      	movs	r2, #7
 800869c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80086a8:	e002      	b.n	80086b0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80086aa:	bf00      	nop
 80086ac:	e000      	b.n	80086b0 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80086ae:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b07      	cmp	r3, #7
 80086ba:	d101      	bne.n	80086c0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e008      	b.n	80086d2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop

080086e0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d101      	bne.n	80086fe <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80086fa:	2302      	movs	r3, #2
 80086fc:	e01d      	b.n	800873a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008708:	2302      	movs	r3, #2
 800870a:	e016      	b.n	800873a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fb84 	bl	8008e30 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008752:	2b01      	cmp	r3, #1
 8008754:	d101      	bne.n	800875a <HAL_HRTIM_WaveformOutputStart+0x18>
 8008756:	2302      	movs	r3, #2
 8008758:	e01a      	b.n	8008790 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_HRTIM_WaveformOutputStop+0x18>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e01a      	b.n	80087ea <HAL_HRTIM_WaveformOutputStop+0x4e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_HRTIM_WaveformCountStart+0x18>
 800880a:	2302      	movs	r3, #2
 800880c:	e018      	b.n	8008840 <HAL_HRTIM_WaveformCountStart+0x4a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0318 	bic.w	r3, r3, #24
 8008876:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	619a      	str	r2, [r3, #24]
}
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	3301      	adds	r3, #1
 80088be:	01db      	lsls	r3, r3, #7
 80088c0:	4413      	add	r3, r2
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f023 0318 	bic.w	r3, r3, #24
 80088de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3301      	adds	r3, #1
 80088f2:	01db      	lsls	r3, r3, #7
 80088f4:	4413      	add	r3, r2
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	01db      	lsls	r3, r3, #7
 8008906:	440b      	add	r3, r1
 8008908:	3394      	adds	r3, #148	; 0x94
 800890a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6819      	ldr	r1, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	01db      	lsls	r3, r3, #7
 8008918:	440b      	add	r3, r1
 800891a:	3398      	adds	r3, #152	; 0x98
 800891c:	601a      	str	r2, [r3, #0]
}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008944:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f023 0320 	bic.w	r3, r3, #32
 800894c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800895e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	2b20      	cmp	r3, #32
 8008966:	d003      	beq.n	8008970 <HRTIM_MasterWaveform_Config+0x46>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d108      	bne.n	8008982 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008976:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f043 0320 	orr.w	r3, r3, #32
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e021      	b.n	80089c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d108      	bne.n	800899c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008990:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e014      	b.n	80089c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d108      	bne.n	80089b6 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089aa:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e007      	b.n	80089c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f023 0320 	bic.w	r3, r3, #32
 80089bc:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008a02:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008a14:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a28:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a3a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008a58:	bf00      	nop
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b08b      	sub	sp, #44	; 0x2c
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3301      	adds	r3, #1
 8008a78:	01db      	lsls	r3, r3, #7
 8008a7a:	4413      	add	r3, r2
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	01db      	lsls	r3, r3, #7
 8008a8c:	440b      	add	r3, r1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3301      	adds	r3, #1
 8008a98:	01db      	lsls	r3, r3, #7
 8008a9a:	4413      	add	r3, r2
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	01db      	lsls	r3, r3, #7
 8008aa8:	4413      	add	r3, r2
 8008aaa:	33e8      	adds	r3, #232	; 0xe8
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	01db      	lsls	r3, r3, #7
 8008ab8:	4413      	add	r3, r2
 8008aba:	33e4      	adds	r3, #228	; 0xe4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008ac8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	f023 0320 	bic.w	r3, r3, #32
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d003      	beq.n	8008aec <HRTIM_TimingUnitWaveform_Config+0x88>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d108      	bne.n	8008afe <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f043 0320 	orr.w	r3, r3, #32
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
 8008afc:	e021      	b.n	8008b42 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d108      	bne.n	8008b18 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
 8008b16:	e014      	b.n	8008b42 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d108      	bne.n	8008b32 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b30:	e007      	b.n	8008b42 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f023 0320 	bic.w	r3, r3, #32
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b50:	4313      	orrs	r3, r2
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	4313      	orrs	r3, r2
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b74:	4313      	orrs	r3, r2
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	4313      	orrs	r3, r2
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bac:	d103      	bne.n	8008bb6 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bec:	4313      	orrs	r3, r2
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bf6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c1e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008c32:	d004      	beq.n	8008c3e <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c38:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008c3c:	d103      	bne.n	8008c46 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d108      	bne.n	8008c58 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008c4c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c52:	6a3a      	ldr	r2, [r7, #32]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c5e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c64:	6a3a      	ldr	r2, [r7, #32]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d850      	bhi.n	8008d18 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c95 	.word	0x08008c95
 8008c80:	08008cab 	.word	0x08008cab
 8008c84:	08008cc1 	.word	0x08008cc1
 8008c88:	08008cd7 	.word	0x08008cd7
 8008c8c:	08008ced 	.word	0x08008ced
 8008c90:	08008d03 	.word	0x08008d03
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c9a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61fb      	str	r3, [r7, #28]
      break;
 8008ca8:	e037      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cb0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61fb      	str	r3, [r7, #28]
      break;
 8008cbe:	e02c      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008cc6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61fb      	str	r3, [r7, #28]
      break;
 8008cd4:	e021      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cdc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	61fb      	str	r3, [r7, #28]
      break;
 8008cea:	e016      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cf2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	015b      	lsls	r3, r3, #5
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61fb      	str	r3, [r7, #28]
      break;
 8008d00:	e00b      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008d08:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	019b      	lsls	r3, r3, #6
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61fb      	str	r3, [r7, #28]
      break;
 8008d16:	e000      	b.n	8008d1a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008d18:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	3301      	adds	r3, #1
 8008d22:	01db      	lsls	r3, r3, #7
 8008d24:	4413      	add	r3, r2
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	01db      	lsls	r3, r3, #7
 8008d32:	4413      	add	r3, r2
 8008d34:	33e8      	adds	r3, #232	; 0xe8
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	01db      	lsls	r3, r3, #7
 8008d42:	4413      	add	r3, r2
 8008d44:	33e4      	adds	r3, #228	; 0xe4
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	01db      	lsls	r3, r3, #7
 8008d52:	4413      	add	r3, r2
 8008d54:	33d4      	adds	r3, #212	; 0xd4
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008d64:	bf00      	nop
 8008d66:	372c      	adds	r7, #44	; 0x2c
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	01db      	lsls	r3, r3, #7
 8008d84:	4413      	add	r3, r2
 8008d86:	33ec      	adds	r3, #236	; 0xec
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f023 0310 	bic.w	r3, r3, #16
 8008d92:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008da6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008dca:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d11a      	bne.n	8008e14 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 0304 	bic.w	r3, r3, #4
 8008de4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f023 0302 	bic.w	r3, r3, #2
 8008df6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	01db      	lsls	r3, r3, #7
 8008e1c:	4413      	add	r3, r2
 8008e1e:	33ec      	adds	r3, #236	; 0xec
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	601a      	str	r2, [r3, #0]

}
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b089      	sub	sp, #36	; 0x24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	01db      	lsls	r3, r3, #7
 8008e4a:	4413      	add	r3, r2
 8008e4c:	33e4      	adds	r3, #228	; 0xe4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	01db      	lsls	r3, r3, #7
 8008e5a:	4413      	add	r3, r2
 8008e5c:	33b8      	adds	r3, #184	; 0xb8
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e68:	f000 8088 	beq.w	8008f7c <HRTIM_OutputConfig+0x14c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e72:	f200 8098 	bhi.w	8008fa6 <HRTIM_OutputConfig+0x176>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e7c:	d06b      	beq.n	8008f56 <HRTIM_OutputConfig+0x126>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e84:	f200 808f 	bhi.w	8008fa6 <HRTIM_OutputConfig+0x176>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8e:	d075      	beq.n	8008f7c <HRTIM_OutputConfig+0x14c>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e96:	f200 8086 	bhi.w	8008fa6 <HRTIM_OutputConfig+0x176>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea0:	d059      	beq.n	8008f56 <HRTIM_OutputConfig+0x126>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea8:	d87d      	bhi.n	8008fa6 <HRTIM_OutputConfig+0x176>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b80      	cmp	r3, #128	; 0x80
 8008eae:	d065      	beq.n	8008f7c <HRTIM_OutputConfig+0x14c>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d877      	bhi.n	8008fa6 <HRTIM_OutputConfig+0x176>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d849      	bhi.n	8008f50 <HRTIM_OutputConfig+0x120>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d071      	beq.n	8008fa6 <HRTIM_OutputConfig+0x176>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b1f      	cmp	r3, #31
 8008ec8:	d86d      	bhi.n	8008fa6 <HRTIM_OutputConfig+0x176>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <HRTIM_OutputConfig+0xa0>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008f57 	.word	0x08008f57
 8008ed4:	08008f7d 	.word	0x08008f7d
 8008ed8:	08008fa7 	.word	0x08008fa7
 8008edc:	08008f57 	.word	0x08008f57
 8008ee0:	08008fa7 	.word	0x08008fa7
 8008ee4:	08008fa7 	.word	0x08008fa7
 8008ee8:	08008fa7 	.word	0x08008fa7
 8008eec:	08008f7d 	.word	0x08008f7d
 8008ef0:	08008fa7 	.word	0x08008fa7
 8008ef4:	08008fa7 	.word	0x08008fa7
 8008ef8:	08008fa7 	.word	0x08008fa7
 8008efc:	08008fa7 	.word	0x08008fa7
 8008f00:	08008fa7 	.word	0x08008fa7
 8008f04:	08008fa7 	.word	0x08008fa7
 8008f08:	08008fa7 	.word	0x08008fa7
 8008f0c:	08008f57 	.word	0x08008f57
 8008f10:	08008fa7 	.word	0x08008fa7
 8008f14:	08008fa7 	.word	0x08008fa7
 8008f18:	08008fa7 	.word	0x08008fa7
 8008f1c:	08008fa7 	.word	0x08008fa7
 8008f20:	08008fa7 	.word	0x08008fa7
 8008f24:	08008fa7 	.word	0x08008fa7
 8008f28:	08008fa7 	.word	0x08008fa7
 8008f2c:	08008fa7 	.word	0x08008fa7
 8008f30:	08008fa7 	.word	0x08008fa7
 8008f34:	08008fa7 	.word	0x08008fa7
 8008f38:	08008fa7 	.word	0x08008fa7
 8008f3c:	08008fa7 	.word	0x08008fa7
 8008f40:	08008fa7 	.word	0x08008fa7
 8008f44:	08008fa7 	.word	0x08008fa7
 8008f48:	08008fa7 	.word	0x08008fa7
 8008f4c:	08008f7d 	.word	0x08008f7d
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d127      	bne.n	8008fa6 <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	01db      	lsls	r3, r3, #7
 8008f62:	440b      	add	r3, r1
 8008f64:	33bc      	adds	r3, #188	; 0xbc
 8008f66:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6819      	ldr	r1, [r3, #0]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	01db      	lsls	r3, r3, #7
 8008f74:	440b      	add	r3, r1
 8008f76:	33c0      	adds	r3, #192	; 0xc0
 8008f78:	601a      	str	r2, [r3, #0]
      break;
 8008f7a:	e015      	b.n	8008fa8 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	01db      	lsls	r3, r3, #7
 8008f88:	440b      	add	r3, r1
 8008f8a:	33c4      	adds	r3, #196	; 0xc4
 8008f8c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	01db      	lsls	r3, r3, #7
 8008f9a:	440b      	add	r3, r1
 8008f9c:	33c8      	adds	r3, #200	; 0xc8
 8008f9e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008fa0:	2310      	movs	r3, #16
 8008fa2:	61bb      	str	r3, [r7, #24]
      break;
 8008fa4:	e000      	b.n	8008fa8 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 8008fa6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008fa8:	22fe      	movs	r2, #254	; 0xfe
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695a      	ldr	r2, [r3, #20]
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	4313      	orrs	r3, r2
 8009006:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b08      	cmp	r3, #8
 800900e:	d111      	bne.n	8009034 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10c      	bne.n	8009034 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8009020:	2b00      	cmp	r3, #0
 8009022:	d107      	bne.n	8009034 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	4313      	orrs	r3, r2
 8009032:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	01db      	lsls	r3, r3, #7
 800903c:	4413      	add	r3, r2
 800903e:	33e4      	adds	r3, #228	; 0xe4
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	601a      	str	r2, [r3, #0]
}
 8009044:	bf00      	nop
 8009046:	3724      	adds	r7, #36	; 0x24
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b06      	cmp	r3, #6
 800905e:	d85e      	bhi.n	800911e <HRTIM_ForceRegistersUpdate+0xce>
 8009060:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <HRTIM_ForceRegistersUpdate+0x18>)
 8009062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009066:	bf00      	nop
 8009068:	0800909b 	.word	0x0800909b
 800906c:	080090b1 	.word	0x080090b1
 8009070:	080090c7 	.word	0x080090c7
 8009074:	080090dd 	.word	0x080090dd
 8009078:	080090f3 	.word	0x080090f3
 800907c:	08009109 	.word	0x08009109
 8009080:	08009085 	.word	0x08009085
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0201 	orr.w	r2, r2, #1
 8009094:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009098:	e042      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0202 	orr.w	r2, r2, #2
 80090aa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090ae:	e037      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f042 0204 	orr.w	r2, r2, #4
 80090c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090c4:	e02c      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0208 	orr.w	r2, r2, #8
 80090d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090da:	e021      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f042 0210 	orr.w	r2, r2, #16
 80090ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80090f0:	e016      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0220 	orr.w	r2, r2, #32
 8009102:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009106:	e00b      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009118:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800911c:	e000      	b.n	8009120 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800911e:	bf00      	nop
  }
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e08d      	b.n	800925a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7fb fba2 	bl	800489c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2224      	movs	r2, #36	; 0x24
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800917c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800918c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d107      	bne.n	80091a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	e006      	b.n	80091b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80091b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d108      	bne.n	80091ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ca:	605a      	str	r2, [r3, #4]
 80091cc:	e007      	b.n	80091de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80091ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009200:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691a      	ldr	r2, [r3, #16]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	69d9      	ldr	r1, [r3, #28]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1a      	ldr	r2, [r3, #32]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	4608      	mov	r0, r1
 800926e:	4611      	mov	r1, r2
 8009270:	461a      	mov	r2, r3
 8009272:	4603      	mov	r3, r0
 8009274:	817b      	strh	r3, [r7, #10]
 8009276:	460b      	mov	r3, r1
 8009278:	813b      	strh	r3, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b20      	cmp	r3, #32
 8009288:	f040 80f9 	bne.w	800947e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <HAL_I2C_Mem_Write+0x34>
 8009292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d105      	bne.n	80092a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800929e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e0ed      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_I2C_Mem_Write+0x4e>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e0e6      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092ba:	f7fc f93b 	bl	8005534 <HAL_GetTick>
 80092be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	2319      	movs	r3, #25
 80092c6:	2201      	movs	r2, #1
 80092c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 fbaf 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e0d1      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2221      	movs	r2, #33	; 0x21
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a3a      	ldr	r2, [r7, #32]
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009304:	88f8      	ldrh	r0, [r7, #6]
 8009306:	893a      	ldrh	r2, [r7, #8]
 8009308:	8979      	ldrh	r1, [r7, #10]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4603      	mov	r3, r0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fabf 	bl	8009898 <I2C_RequestMemoryWrite>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e0a9      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009330:	b29b      	uxth	r3, r3
 8009332:	2bff      	cmp	r3, #255	; 0xff
 8009334:	d90e      	bls.n	8009354 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009340:	b2da      	uxtb	r2, r3
 8009342:	8979      	ldrh	r1, [r7, #10]
 8009344:	2300      	movs	r3, #0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fd33 	bl	8009db8 <I2C_TransferConfig>
 8009352:	e00f      	b.n	8009374 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009362:	b2da      	uxtb	r2, r3
 8009364:	8979      	ldrh	r1, [r7, #10]
 8009366:	2300      	movs	r3, #0
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fd22 	bl	8009db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fbb2 	bl	8009ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e07b      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	781a      	ldrb	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	3b01      	subs	r3, #1
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d034      	beq.n	800942c <HAL_I2C_Mem_Write+0x1c8>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d130      	bne.n	800942c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	2200      	movs	r2, #0
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fb2b 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e04d      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2bff      	cmp	r3, #255	; 0xff
 80093ec:	d90e      	bls.n	800940c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	22ff      	movs	r2, #255	; 0xff
 80093f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	8979      	ldrh	r1, [r7, #10]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fcd7 	bl	8009db8 <I2C_TransferConfig>
 800940a:	e00f      	b.n	800942c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941a:	b2da      	uxtb	r2, r3
 800941c:	8979      	ldrh	r1, [r7, #10]
 800941e:	2300      	movs	r3, #0
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fcc6 	bl	8009db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d19e      	bne.n	8009374 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fb98 	bl	8009b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e01a      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2220      	movs	r2, #32
 8009450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6859      	ldr	r1, [r3, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <HAL_I2C_Mem_Write+0x224>)
 800945e:	400b      	ands	r3, r1
 8009460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e000      	b.n	8009480 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800947e:	2302      	movs	r3, #2
  }
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	fe00e800 	.word	0xfe00e800

0800948c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	4608      	mov	r0, r1
 8009496:	4611      	mov	r1, r2
 8009498:	461a      	mov	r2, r3
 800949a:	4603      	mov	r3, r0
 800949c:	817b      	strh	r3, [r7, #10]
 800949e:	460b      	mov	r3, r1
 80094a0:	813b      	strh	r3, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	f040 80fd 	bne.w	80096ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_I2C_Mem_Read+0x34>
 80094ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0f1      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_I2C_Mem_Read+0x4e>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e0ea      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094e2:	f7fc f827 	bl	8005534 <HAL_GetTick>
 80094e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	2319      	movs	r3, #25
 80094ee:	2201      	movs	r2, #1
 80094f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 fa9b 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e0d5      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2222      	movs	r2, #34	; 0x22
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2240      	movs	r2, #64	; 0x40
 8009510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a3a      	ldr	r2, [r7, #32]
 800951e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800952c:	88f8      	ldrh	r0, [r7, #6]
 800952e:	893a      	ldrh	r2, [r7, #8]
 8009530:	8979      	ldrh	r1, [r7, #10]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	4603      	mov	r3, r0
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f9ff 	bl	8009940 <I2C_RequestMemoryRead>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e0ad      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	2bff      	cmp	r3, #255	; 0xff
 800955c:	d90e      	bls.n	800957c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	22ff      	movs	r2, #255	; 0xff
 8009562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009568:	b2da      	uxtb	r2, r3
 800956a:	8979      	ldrh	r1, [r7, #10]
 800956c:	4b52      	ldr	r3, [pc, #328]	; (80096b8 <HAL_I2C_Mem_Read+0x22c>)
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fc1f 	bl	8009db8 <I2C_TransferConfig>
 800957a:	e00f      	b.n	800959c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958a:	b2da      	uxtb	r2, r3
 800958c:	8979      	ldrh	r1, [r7, #10]
 800958e:	4b4a      	ldr	r3, [pc, #296]	; (80096b8 <HAL_I2C_Mem_Read+0x22c>)
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fc0e 	bl	8009db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	2200      	movs	r2, #0
 80095a4:	2104      	movs	r1, #4
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fa42 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e07c      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095de:	b29b      	uxth	r3, r3
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d034      	beq.n	800965c <HAL_I2C_Mem_Read+0x1d0>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d130      	bne.n	800965c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fa13 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e04d      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009618:	b29b      	uxth	r3, r3
 800961a:	2bff      	cmp	r3, #255	; 0xff
 800961c:	d90e      	bls.n	800963c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	22ff      	movs	r2, #255	; 0xff
 8009622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009628:	b2da      	uxtb	r2, r3
 800962a:	8979      	ldrh	r1, [r7, #10]
 800962c:	2300      	movs	r3, #0
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 fbbf 	bl	8009db8 <I2C_TransferConfig>
 800963a:	e00f      	b.n	800965c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800964a:	b2da      	uxtb	r2, r3
 800964c:	8979      	ldrh	r1, [r7, #10]
 800964e:	2300      	movs	r3, #0
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 fbae 	bl	8009db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d19a      	bne.n	800959c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 fa80 	bl	8009b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e01a      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2220      	movs	r2, #32
 8009680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <HAL_I2C_Mem_Read+0x230>)
 800968e:	400b      	ands	r3, r1
 8009690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	80002400 	.word	0x80002400
 80096bc:	fe00e800 	.word	0xfe00e800

080096c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08a      	sub	sp, #40	; 0x28
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	460b      	mov	r3, r1
 80096ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b20      	cmp	r3, #32
 80096de:	f040 80d6 	bne.w	800988e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096f0:	d101      	bne.n	80096f6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80096f2:	2302      	movs	r3, #2
 80096f4:	e0cc      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_I2C_IsDeviceReady+0x44>
 8009700:	2302      	movs	r3, #2
 8009702:	e0c5      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2224      	movs	r2, #36	; 0x24
 8009710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d107      	bne.n	8009732 <HAL_I2C_IsDeviceReady+0x72>
 8009722:	897b      	ldrh	r3, [r7, #10]
 8009724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800972c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009730:	e006      	b.n	8009740 <HAL_I2C_IsDeviceReady+0x80>
 8009732:	897b      	ldrh	r3, [r7, #10]
 8009734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800973c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	6812      	ldr	r2, [r2, #0]
 8009744:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009746:	f7fb fef5 	bl	8005534 <HAL_GetTick>
 800974a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b20      	cmp	r3, #32
 8009758:	bf0c      	ite	eq
 800975a:	2301      	moveq	r3, #1
 800975c:	2300      	movne	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b10      	cmp	r3, #16
 800976e:	bf0c      	ite	eq
 8009770:	2301      	moveq	r3, #1
 8009772:	2300      	movne	r3, #0
 8009774:	b2db      	uxtb	r3, r3
 8009776:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009778:	e034      	b.n	80097e4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009780:	d01a      	beq.n	80097b8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009782:	f7fb fed7 	bl	8005534 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d302      	bcc.n	8009798 <HAL_I2C_IsDeviceReady+0xd8>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10f      	bne.n	80097b8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a4:	f043 0220 	orr.w	r2, r3, #32
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e06b      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b20      	cmp	r3, #32
 80097c4:	bf0c      	ite	eq
 80097c6:	2301      	moveq	r3, #1
 80097c8:	2300      	movne	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0310 	and.w	r3, r3, #16
 80097d8:	2b10      	cmp	r3, #16
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80097e4:	7ffb      	ldrb	r3, [r7, #31]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_I2C_IsDeviceReady+0x130>
 80097ea:	7fbb      	ldrb	r3, [r7, #30]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0c4      	beq.n	800977a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	f003 0310 	and.w	r3, r3, #16
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	d01a      	beq.n	8009834 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2200      	movs	r2, #0
 8009806:	2120      	movs	r1, #32
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f911 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e03b      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2220      	movs	r2, #32
 800981e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	e02d      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	2120      	movs	r1, #32
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f8f6 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e020      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2210      	movs	r2, #16
 8009854:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2220      	movs	r2, #32
 800985c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	3301      	adds	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	f63f af56 	bhi.w	800971a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987a:	f043 0220 	orr.w	r2, r3, #32
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800988e:	2302      	movs	r3, #2
  }
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af02      	add	r7, sp, #8
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	4608      	mov	r0, r1
 80098a2:	4611      	mov	r1, r2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	817b      	strh	r3, [r7, #10]
 80098aa:	460b      	mov	r3, r1
 80098ac:	813b      	strh	r3, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	8979      	ldrh	r1, [r7, #10]
 80098b8:	4b20      	ldr	r3, [pc, #128]	; (800993c <I2C_RequestMemoryWrite+0xa4>)
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fa79 	bl	8009db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	69b9      	ldr	r1, [r7, #24]
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 f909 	bl	8009ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e02c      	b.n	8009934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098da:	88fb      	ldrh	r3, [r7, #6]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d105      	bne.n	80098ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80098e0:	893b      	ldrh	r3, [r7, #8]
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	629a      	str	r2, [r3, #40]	; 0x28
 80098ea:	e015      	b.n	8009918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80098ec:	893b      	ldrh	r3, [r7, #8]
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	69b9      	ldr	r1, [r7, #24]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 f8ef 	bl	8009ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e012      	b.n	8009934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	2200      	movs	r2, #0
 8009920:	2180      	movs	r1, #128	; 0x80
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f884 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	80002000 	.word	0x80002000

08009940 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af02      	add	r7, sp, #8
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	461a      	mov	r2, r3
 800994e:	4603      	mov	r3, r0
 8009950:	817b      	strh	r3, [r7, #10]
 8009952:	460b      	mov	r3, r1
 8009954:	813b      	strh	r3, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	b2da      	uxtb	r2, r3
 800995e:	8979      	ldrh	r1, [r7, #10]
 8009960:	4b20      	ldr	r3, [pc, #128]	; (80099e4 <I2C_RequestMemoryRead+0xa4>)
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fa26 	bl	8009db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	69b9      	ldr	r1, [r7, #24]
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 f8b6 	bl	8009ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e02c      	b.n	80099da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009980:	88fb      	ldrh	r3, [r7, #6]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d105      	bne.n	8009992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009986:	893b      	ldrh	r3, [r7, #8]
 8009988:	b2da      	uxtb	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	629a      	str	r2, [r3, #40]	; 0x28
 8009990:	e015      	b.n	80099be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009992:	893b      	ldrh	r3, [r7, #8]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b29b      	uxth	r3, r3
 8009998:	b2da      	uxtb	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	69b9      	ldr	r1, [r7, #24]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f89c 	bl	8009ae2 <I2C_WaitOnTXISFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e012      	b.n	80099da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099b4:	893b      	ldrh	r3, [r7, #8]
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2200      	movs	r2, #0
 80099c6:	2140      	movs	r1, #64	; 0x40
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f831 	bl	8009a30 <I2C_WaitOnFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e000      	b.n	80099da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	80002000 	.word	0x80002000

080099e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d103      	bne.n	8009a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2200      	movs	r2, #0
 8009a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d007      	beq.n	8009a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0201 	orr.w	r2, r2, #1
 8009a22:	619a      	str	r2, [r3, #24]
  }
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a40:	e03b      	b.n	8009aba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f8d6 	bl	8009bf8 <I2C_IsErrorOccurred>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e041      	b.n	8009ada <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d02d      	beq.n	8009aba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5e:	f7fb fd69 	bl	8005534 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d302      	bcc.n	8009a74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d122      	bne.n	8009aba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699a      	ldr	r2, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	bf0c      	ite	eq
 8009a84:	2301      	moveq	r3, #1
 8009a86:	2300      	movne	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d113      	bne.n	8009aba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a96:	f043 0220 	orr.w	r2, r3, #32
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e00f      	b.n	8009ada <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	bf0c      	ite	eq
 8009aca:	2301      	moveq	r3, #1
 8009acc:	2300      	movne	r3, #0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d0b4      	beq.n	8009a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009aee:	e033      	b.n	8009b58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f87f 	bl	8009bf8 <I2C_IsErrorOccurred>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e031      	b.n	8009b68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0a:	d025      	beq.n	8009b58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0c:	f7fb fd12 	bl	8005534 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d11a      	bne.n	8009b58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d013      	beq.n	8009b58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b34:	f043 0220 	orr.w	r2, r3, #32
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e007      	b.n	8009b68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d1c4      	bne.n	8009af0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b7c:	e02f      	b.n	8009bde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f838 	bl	8009bf8 <I2C_IsErrorOccurred>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e02d      	b.n	8009bee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b92:	f7fb fccf 	bl	8005534 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11a      	bne.n	8009bde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d013      	beq.n	8009bde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bba:	f043 0220 	orr.w	r2, r3, #32
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e007      	b.n	8009bee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d1c8      	bne.n	8009b7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08a      	sub	sp, #40	; 0x28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d068      	beq.n	8009cf6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2210      	movs	r2, #16
 8009c2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c2c:	e049      	b.n	8009cc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c34:	d045      	beq.n	8009cc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c36:	f7fb fc7d 	bl	8005534 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d302      	bcc.n	8009c4c <I2C_IsErrorOccurred+0x54>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d13a      	bne.n	8009cc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c6e:	d121      	bne.n	8009cb4 <I2C_IsErrorOccurred+0xbc>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c76:	d01d      	beq.n	8009cb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c78:	7cfb      	ldrb	r3, [r7, #19]
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d01a      	beq.n	8009cb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c8e:	f7fb fc51 	bl	8005534 <HAL_GetTick>
 8009c92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c94:	e00e      	b.n	8009cb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c96:	f7fb fc4d 	bl	8005534 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b19      	cmp	r3, #25
 8009ca2:	d907      	bls.n	8009cb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	f043 0320 	orr.w	r3, r3, #32
 8009caa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009cb2:	e006      	b.n	8009cc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d1e9      	bne.n	8009c96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d003      	beq.n	8009cd8 <I2C_IsErrorOccurred+0xe0>
 8009cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0aa      	beq.n	8009c2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	f043 0304 	orr.w	r3, r3, #4
 8009cee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f043 0308 	orr.w	r3, r3, #8
 8009d30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f043 0302 	orr.w	r3, r3, #2
 8009d52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01c      	beq.n	8009da6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fe3b 	bl	80099e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6859      	ldr	r1, [r3, #4]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <I2C_IsErrorOccurred+0x1bc>)
 8009d7e:	400b      	ands	r3, r1
 8009d80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3728      	adds	r7, #40	; 0x28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	fe00e800 	.word	0xfe00e800

08009db8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	607b      	str	r3, [r7, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	817b      	strh	r3, [r7, #10]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dca:	897b      	ldrh	r3, [r7, #10]
 8009dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dd0:	7a7b      	ldrb	r3, [r7, #9]
 8009dd2:	041b      	lsls	r3, r3, #16
 8009dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009de6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	0d5b      	lsrs	r3, r3, #21
 8009df2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009df6:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <I2C_TransferConfig+0x60>)
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	43db      	mvns	r3, r3
 8009dfc:	ea02 0103 	and.w	r1, r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	03ff63ff 	.word	0x03ff63ff

08009e1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d138      	bne.n	8009ea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e032      	b.n	8009ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2224      	movs	r2, #36	; 0x24
 8009e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 0201 	bic.w	r2, r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ea4:	2302      	movs	r3, #2
  }
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d139      	bne.n	8009f3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e033      	b.n	8009f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2224      	movs	r2, #36	; 0x24
 8009ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0201 	bic.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 0201 	orr.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e000      	b.n	8009f3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
	...

08009f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d141      	bne.n	8009fde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009f5a:	4b4b      	ldr	r3, [pc, #300]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f66:	d131      	bne.n	8009fcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009f68:	4b47      	ldr	r3, [pc, #284]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f6e:	4a46      	ldr	r2, [pc, #280]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f78:	4b43      	ldr	r3, [pc, #268]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f80:	4a41      	ldr	r2, [pc, #260]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f88:	4b40      	ldr	r3, [pc, #256]	; (800a08c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2232      	movs	r2, #50	; 0x32
 8009f8e:	fb02 f303 	mul.w	r3, r2, r3
 8009f92:	4a3f      	ldr	r2, [pc, #252]	; (800a090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009f94:	fba2 2303 	umull	r2, r3, r2, r3
 8009f98:	0c9b      	lsrs	r3, r3, #18
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f9e:	e002      	b.n	8009fa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009fa6:	4b38      	ldr	r3, [pc, #224]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb2:	d102      	bne.n	8009fba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f2      	bne.n	8009fa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009fba:	4b33      	ldr	r3, [pc, #204]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc6:	d158      	bne.n	800a07a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e057      	b.n	800a07c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009fcc:	4b2e      	ldr	r3, [pc, #184]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fd2:	4a2d      	ldr	r2, [pc, #180]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009fdc:	e04d      	b.n	800a07a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe4:	d141      	bne.n	800a06a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009fe6:	4b28      	ldr	r3, [pc, #160]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ff2:	d131      	bne.n	800a058 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ff4:	4b24      	ldr	r3, [pc, #144]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ffa:	4a23      	ldr	r2, [pc, #140]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a004:	4b20      	ldr	r3, [pc, #128]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a00c:	4a1e      	ldr	r2, [pc, #120]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a00e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a014:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2232      	movs	r2, #50	; 0x32
 800a01a:	fb02 f303 	mul.w	r3, r2, r3
 800a01e:	4a1c      	ldr	r2, [pc, #112]	; (800a090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a020:	fba2 2303 	umull	r2, r3, r2, r3
 800a024:	0c9b      	lsrs	r3, r3, #18
 800a026:	3301      	adds	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a02a:	e002      	b.n	800a032 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3b01      	subs	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03e:	d102      	bne.n	800a046 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f2      	bne.n	800a02c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a046:	4b10      	ldr	r3, [pc, #64]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a052:	d112      	bne.n	800a07a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e011      	b.n	800a07c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a058:	4b0b      	ldr	r3, [pc, #44]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05e:	4a0a      	ldr	r2, [pc, #40]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a068:	e007      	b.n	800a07a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a072:	4a05      	ldr	r2, [pc, #20]	; (800a088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a078:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	40007000 	.word	0x40007000
 800a08c:	200001b8 	.word	0x200001b8
 800a090:	431bde83 	.word	0x431bde83

0800a094 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	4a04      	ldr	r2, [pc, #16]	; (800a0b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a09e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0a2:	6093      	str	r3, [r2, #8]
}
 800a0a4:	bf00      	nop
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	40007000 	.word	0x40007000

0800a0b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e2fe      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d075      	beq.n	800a1be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0d2:	4b97      	ldr	r3, [pc, #604]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 030c 	and.w	r3, r3, #12
 800a0da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0dc:	4b94      	ldr	r3, [pc, #592]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	2b0c      	cmp	r3, #12
 800a0ea:	d102      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x3e>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d002      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x44>
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0f8:	4b8d      	ldr	r3, [pc, #564]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d05b      	beq.n	800a1bc <HAL_RCC_OscConfig+0x108>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d157      	bne.n	800a1bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e2d9      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a118:	d106      	bne.n	800a128 <HAL_RCC_OscConfig+0x74>
 800a11a:	4b85      	ldr	r3, [pc, #532]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a84      	ldr	r2, [pc, #528]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	e01d      	b.n	800a164 <HAL_RCC_OscConfig+0xb0>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a130:	d10c      	bne.n	800a14c <HAL_RCC_OscConfig+0x98>
 800a132:	4b7f      	ldr	r3, [pc, #508]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a7e      	ldr	r2, [pc, #504]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	4b7c      	ldr	r3, [pc, #496]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a7b      	ldr	r2, [pc, #492]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	e00b      	b.n	800a164 <HAL_RCC_OscConfig+0xb0>
 800a14c:	4b78      	ldr	r3, [pc, #480]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a77      	ldr	r2, [pc, #476]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	4b75      	ldr	r3, [pc, #468]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a74      	ldr	r2, [pc, #464]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a15e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d013      	beq.n	800a194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a16c:	f7fb f9e2 	bl	8005534 <HAL_GetTick>
 800a170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a172:	e008      	b.n	800a186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a174:	f7fb f9de 	bl	8005534 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2b64      	cmp	r3, #100	; 0x64
 800a180:	d901      	bls.n	800a186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e29e      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a186:	4b6a      	ldr	r3, [pc, #424]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0f0      	beq.n	800a174 <HAL_RCC_OscConfig+0xc0>
 800a192:	e014      	b.n	800a1be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7fb f9ce 	bl	8005534 <HAL_GetTick>
 800a198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a19c:	f7fb f9ca 	bl	8005534 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b64      	cmp	r3, #100	; 0x64
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e28a      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1ae:	4b60      	ldr	r3, [pc, #384]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f0      	bne.n	800a19c <HAL_RCC_OscConfig+0xe8>
 800a1ba:	e000      	b.n	800a1be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d075      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1ca:	4b59      	ldr	r3, [pc, #356]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 030c 	and.w	r3, r3, #12
 800a1d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a1d4:	4b56      	ldr	r3, [pc, #344]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f003 0303 	and.w	r3, r3, #3
 800a1dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	2b0c      	cmp	r3, #12
 800a1e2:	d102      	bne.n	800a1ea <HAL_RCC_OscConfig+0x136>
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d002      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x13c>
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d11f      	bne.n	800a230 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1f0:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <HAL_RCC_OscConfig+0x154>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e25d      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a208:	4b49      	ldr	r3, [pc, #292]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	061b      	lsls	r3, r3, #24
 800a216:	4946      	ldr	r1, [pc, #280]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a21c:	4b45      	ldr	r3, [pc, #276]	; (800a334 <HAL_RCC_OscConfig+0x280>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f7fb f93b 	bl	800549c <HAL_InitTick>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d043      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e249      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d023      	beq.n	800a280 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a238:	4b3d      	ldr	r3, [pc, #244]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a3c      	ldr	r2, [pc, #240]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a23e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a244:	f7fb f976 	bl	8005534 <HAL_GetTick>
 800a248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a24a:	e008      	b.n	800a25e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a24c:	f7fb f972 	bl	8005534 <HAL_GetTick>
 800a250:	4602      	mov	r2, r0
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	2b02      	cmp	r3, #2
 800a258:	d901      	bls.n	800a25e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e232      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a25e:	4b34      	ldr	r3, [pc, #208]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0f0      	beq.n	800a24c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a26a:	4b31      	ldr	r3, [pc, #196]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	061b      	lsls	r3, r3, #24
 800a278:	492d      	ldr	r1, [pc, #180]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	604b      	str	r3, [r1, #4]
 800a27e:	e01a      	b.n	800a2b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a280:	4b2b      	ldr	r3, [pc, #172]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a2a      	ldr	r2, [pc, #168]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28c:	f7fb f952 	bl	8005534 <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a294:	f7fb f94e 	bl	8005534 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e20e      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2a6:	4b22      	ldr	r3, [pc, #136]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x1e0>
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0308 	and.w	r3, r3, #8
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d041      	beq.n	800a346 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d01c      	beq.n	800a304 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2ca:	4b19      	ldr	r3, [pc, #100]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2d0:	4a17      	ldr	r2, [pc, #92]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2da:	f7fb f92b 	bl	8005534 <HAL_GetTick>
 800a2de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a2e0:	e008      	b.n	800a2f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2e2:	f7fb f927 	bl	8005534 <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d901      	bls.n	800a2f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e1e7      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a2f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0ef      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x22e>
 800a302:	e020      	b.n	800a346 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a30a:	4a09      	ldr	r2, [pc, #36]	; (800a330 <HAL_RCC_OscConfig+0x27c>)
 800a30c:	f023 0301 	bic.w	r3, r3, #1
 800a310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a314:	f7fb f90e 	bl	8005534 <HAL_GetTick>
 800a318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a31a:	e00d      	b.n	800a338 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a31c:	f7fb f90a 	bl	8005534 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d906      	bls.n	800a338 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e1ca      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
 800a32e:	bf00      	nop
 800a330:	40021000 	.word	0x40021000
 800a334:	200001bc 	.word	0x200001bc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a338:	4b8c      	ldr	r3, [pc, #560]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a33a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1ea      	bne.n	800a31c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80a6 	beq.w	800a4a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a354:	2300      	movs	r3, #0
 800a356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a358:	4b84      	ldr	r3, [pc, #528]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <HAL_RCC_OscConfig+0x2b4>
 800a364:	2301      	movs	r3, #1
 800a366:	e000      	b.n	800a36a <HAL_RCC_OscConfig+0x2b6>
 800a368:	2300      	movs	r3, #0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00d      	beq.n	800a38a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a36e:	4b7f      	ldr	r3, [pc, #508]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a372:	4a7e      	ldr	r2, [pc, #504]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a378:	6593      	str	r3, [r2, #88]	; 0x58
 800a37a:	4b7c      	ldr	r3, [pc, #496]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a386:	2301      	movs	r3, #1
 800a388:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a38a:	4b79      	ldr	r3, [pc, #484]	; (800a570 <HAL_RCC_OscConfig+0x4bc>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a392:	2b00      	cmp	r3, #0
 800a394:	d118      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a396:	4b76      	ldr	r3, [pc, #472]	; (800a570 <HAL_RCC_OscConfig+0x4bc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a75      	ldr	r2, [pc, #468]	; (800a570 <HAL_RCC_OscConfig+0x4bc>)
 800a39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3a2:	f7fb f8c7 	bl	8005534 <HAL_GetTick>
 800a3a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3a8:	e008      	b.n	800a3bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3aa:	f7fb f8c3 	bl	8005534 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d901      	bls.n	800a3bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e183      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3bc:	4b6c      	ldr	r3, [pc, #432]	; (800a570 <HAL_RCC_OscConfig+0x4bc>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0f0      	beq.n	800a3aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d108      	bne.n	800a3e2 <HAL_RCC_OscConfig+0x32e>
 800a3d0:	4b66      	ldr	r3, [pc, #408]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d6:	4a65      	ldr	r2, [pc, #404]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a3e0:	e024      	b.n	800a42c <HAL_RCC_OscConfig+0x378>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d110      	bne.n	800a40c <HAL_RCC_OscConfig+0x358>
 800a3ea:	4b60      	ldr	r3, [pc, #384]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f0:	4a5e      	ldr	r2, [pc, #376]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a3f2:	f043 0304 	orr.w	r3, r3, #4
 800a3f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a3fa:	4b5c      	ldr	r3, [pc, #368]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a400:	4a5a      	ldr	r2, [pc, #360]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a40a:	e00f      	b.n	800a42c <HAL_RCC_OscConfig+0x378>
 800a40c:	4b57      	ldr	r3, [pc, #348]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a412:	4a56      	ldr	r2, [pc, #344]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a414:	f023 0301 	bic.w	r3, r3, #1
 800a418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a41c:	4b53      	ldr	r3, [pc, #332]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a422:	4a52      	ldr	r2, [pc, #328]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a424:	f023 0304 	bic.w	r3, r3, #4
 800a428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a434:	f7fb f87e 	bl	8005534 <HAL_GetTick>
 800a438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a43a:	e00a      	b.n	800a452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a43c:	f7fb f87a 	bl	8005534 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	f241 3288 	movw	r2, #5000	; 0x1388
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e138      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a452:	4b46      	ldr	r3, [pc, #280]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0ed      	beq.n	800a43c <HAL_RCC_OscConfig+0x388>
 800a460:	e015      	b.n	800a48e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a462:	f7fb f867 	bl	8005534 <HAL_GetTick>
 800a466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a468:	e00a      	b.n	800a480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a46a:	f7fb f863 	bl	8005534 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	f241 3288 	movw	r2, #5000	; 0x1388
 800a478:	4293      	cmp	r3, r2
 800a47a:	d901      	bls.n	800a480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e121      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a480:	4b3a      	ldr	r3, [pc, #232]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1ed      	bne.n	800a46a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d105      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a494:	4b35      	ldr	r3, [pc, #212]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a498:	4a34      	ldr	r2, [pc, #208]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a49a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a49e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0320 	and.w	r3, r3, #32
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d03c      	beq.n	800a526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01c      	beq.n	800a4ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a4b4:	4b2d      	ldr	r3, [pc, #180]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a4b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ba:	4a2c      	ldr	r2, [pc, #176]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4c4:	f7fb f836 	bl	8005534 <HAL_GetTick>
 800a4c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a4ca:	e008      	b.n	800a4de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4cc:	f7fb f832 	bl	8005534 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e0f2      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a4de:	4b23      	ldr	r3, [pc, #140]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a4e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0ef      	beq.n	800a4cc <HAL_RCC_OscConfig+0x418>
 800a4ec:	e01b      	b.n	800a526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4ee:	4b1f      	ldr	r3, [pc, #124]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a4f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4f4:	4a1d      	ldr	r2, [pc, #116]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4fe:	f7fb f819 	bl	8005534 <HAL_GetTick>
 800a502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a504:	e008      	b.n	800a518 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a506:	f7fb f815 	bl	8005534 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	2b02      	cmp	r3, #2
 800a512:	d901      	bls.n	800a518 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e0d5      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a518:	4b14      	ldr	r3, [pc, #80]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a51a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1ef      	bne.n	800a506 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 80c9 	beq.w	800a6c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f003 030c 	and.w	r3, r3, #12
 800a538:	2b0c      	cmp	r3, #12
 800a53a:	f000 8083 	beq.w	800a644 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d15e      	bne.n	800a604 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a08      	ldr	r2, [pc, #32]	; (800a56c <HAL_RCC_OscConfig+0x4b8>)
 800a54c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a552:	f7fa ffef 	bl	8005534 <HAL_GetTick>
 800a556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a558:	e00c      	b.n	800a574 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a55a:	f7fa ffeb 	bl	8005534 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d905      	bls.n	800a574 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e0ab      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
 800a56c:	40021000 	.word	0x40021000
 800a570:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a574:	4b55      	ldr	r3, [pc, #340]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ec      	bne.n	800a55a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a580:	4b52      	ldr	r3, [pc, #328]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	4b52      	ldr	r3, [pc, #328]	; (800a6d0 <HAL_RCC_OscConfig+0x61c>)
 800a586:	4013      	ands	r3, r2
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6a11      	ldr	r1, [r2, #32]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a590:	3a01      	subs	r2, #1
 800a592:	0112      	lsls	r2, r2, #4
 800a594:	4311      	orrs	r1, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a59a:	0212      	lsls	r2, r2, #8
 800a59c:	4311      	orrs	r1, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a5a2:	0852      	lsrs	r2, r2, #1
 800a5a4:	3a01      	subs	r2, #1
 800a5a6:	0552      	lsls	r2, r2, #21
 800a5a8:	4311      	orrs	r1, r2
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a5ae:	0852      	lsrs	r2, r2, #1
 800a5b0:	3a01      	subs	r2, #1
 800a5b2:	0652      	lsls	r2, r2, #25
 800a5b4:	4311      	orrs	r1, r2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5ba:	06d2      	lsls	r2, r2, #27
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	4943      	ldr	r1, [pc, #268]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5c4:	4b41      	ldr	r3, [pc, #260]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a40      	ldr	r2, [pc, #256]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a5d0:	4b3e      	ldr	r3, [pc, #248]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4a3d      	ldr	r2, [pc, #244]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5dc:	f7fa ffaa 	bl	8005534 <HAL_GetTick>
 800a5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5e2:	e008      	b.n	800a5f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e4:	f7fa ffa6 	bl	8005534 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e066      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a5f6:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0f0      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x530>
 800a602:	e05e      	b.n	800a6c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a604:	4b31      	ldr	r3, [pc, #196]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a30      	ldr	r2, [pc, #192]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a60a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a60e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a610:	f7fa ff90 	bl	8005534 <HAL_GetTick>
 800a614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a616:	e008      	b.n	800a62a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a618:	f7fa ff8c 	bl	8005534 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	2b02      	cmp	r3, #2
 800a624:	d901      	bls.n	800a62a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e04c      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a62a:	4b28      	ldr	r3, [pc, #160]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1f0      	bne.n	800a618 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a636:	4b25      	ldr	r3, [pc, #148]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	4924      	ldr	r1, [pc, #144]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a63c:	4b25      	ldr	r3, [pc, #148]	; (800a6d4 <HAL_RCC_OscConfig+0x620>)
 800a63e:	4013      	ands	r3, r2
 800a640:	60cb      	str	r3, [r1, #12]
 800a642:	e03e      	b.n	800a6c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d101      	bne.n	800a650 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e039      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <HAL_RCC_OscConfig+0x618>)
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f003 0203 	and.w	r2, r3, #3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	429a      	cmp	r2, r3
 800a662:	d12c      	bne.n	800a6be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	3b01      	subs	r3, #1
 800a670:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a672:	429a      	cmp	r2, r3
 800a674:	d123      	bne.n	800a6be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a682:	429a      	cmp	r2, r3
 800a684:	d11b      	bne.n	800a6be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a692:	429a      	cmp	r2, r3
 800a694:	d113      	bne.n	800a6be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d109      	bne.n	800a6be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	085b      	lsrs	r3, r3, #1
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d001      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	40021000 	.word	0x40021000
 800a6d0:	019f800c 	.word	0x019f800c
 800a6d4:	feeefffc 	.word	0xfeeefffc

0800a6d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e11e      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6f0:	4b91      	ldr	r3, [pc, #580]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 030f 	and.w	r3, r3, #15
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d910      	bls.n	800a720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6fe:	4b8e      	ldr	r3, [pc, #568]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f023 020f 	bic.w	r2, r3, #15
 800a706:	498c      	ldr	r1, [pc, #560]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a70e:	4b8a      	ldr	r3, [pc, #552]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d001      	beq.n	800a720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e106      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d073      	beq.n	800a814 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b03      	cmp	r3, #3
 800a732:	d129      	bne.n	800a788 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a734:	4b81      	ldr	r3, [pc, #516]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e0f4      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a744:	f000 f99e 	bl	800aa84 <RCC_GetSysClockFreqFromPLLSource>
 800a748:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	4a7c      	ldr	r2, [pc, #496]	; (800a940 <HAL_RCC_ClockConfig+0x268>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d93f      	bls.n	800a7d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a752:	4b7a      	ldr	r3, [pc, #488]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a766:	2b00      	cmp	r3, #0
 800a768:	d033      	beq.n	800a7d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d12f      	bne.n	800a7d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a772:	4b72      	ldr	r3, [pc, #456]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a77a:	4a70      	ldr	r2, [pc, #448]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a780:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a782:	2380      	movs	r3, #128	; 0x80
 800a784:	617b      	str	r3, [r7, #20]
 800a786:	e024      	b.n	800a7d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d107      	bne.n	800a7a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a790:	4b6a      	ldr	r3, [pc, #424]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d109      	bne.n	800a7b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e0c6      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7a0:	4b66      	ldr	r3, [pc, #408]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e0be      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a7b0:	f000 f8ce 	bl	800a950 <HAL_RCC_GetSysClockFreq>
 800a7b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	4a61      	ldr	r2, [pc, #388]	; (800a940 <HAL_RCC_ClockConfig+0x268>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d909      	bls.n	800a7d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a7be:	4b5f      	ldr	r3, [pc, #380]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7c6:	4a5d      	ldr	r2, [pc, #372]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a7ce:	2380      	movs	r3, #128	; 0x80
 800a7d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7d2:	4b5a      	ldr	r3, [pc, #360]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f023 0203 	bic.w	r2, r3, #3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4957      	ldr	r1, [pc, #348]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7e4:	f7fa fea6 	bl	8005534 <HAL_GetTick>
 800a7e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7ea:	e00a      	b.n	800a802 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7ec:	f7fa fea2 	bl	8005534 <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e095      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a802:	4b4e      	ldr	r3, [pc, #312]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f003 020c 	and.w	r2, r3, #12
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	429a      	cmp	r2, r3
 800a812:	d1eb      	bne.n	800a7ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d023      	beq.n	800a868 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a82c:	4b43      	ldr	r3, [pc, #268]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	4a42      	ldr	r2, [pc, #264]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a836:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d007      	beq.n	800a854 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a844:	4b3d      	ldr	r3, [pc, #244]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a84c:	4a3b      	ldr	r2, [pc, #236]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a84e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a854:	4b39      	ldr	r3, [pc, #228]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	4936      	ldr	r1, [pc, #216]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a862:	4313      	orrs	r3, r2
 800a864:	608b      	str	r3, [r1, #8]
 800a866:	e008      	b.n	800a87a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2b80      	cmp	r3, #128	; 0x80
 800a86c:	d105      	bne.n	800a87a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a86e:	4b33      	ldr	r3, [pc, #204]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	4a32      	ldr	r2, [pc, #200]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a878:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a87a:	4b2f      	ldr	r3, [pc, #188]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d21d      	bcs.n	800a8c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a888:	4b2b      	ldr	r3, [pc, #172]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f023 020f 	bic.w	r2, r3, #15
 800a890:	4929      	ldr	r1, [pc, #164]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	4313      	orrs	r3, r2
 800a896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a898:	f7fa fe4c 	bl	8005534 <HAL_GetTick>
 800a89c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a89e:	e00a      	b.n	800a8b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8a0:	f7fa fe48 	bl	8005534 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d901      	bls.n	800a8b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e03b      	b.n	800a92e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8b6:	4b20      	ldr	r3, [pc, #128]	; (800a938 <HAL_RCC_ClockConfig+0x260>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d1ed      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8d0:	4b1a      	ldr	r3, [pc, #104]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	4917      	ldr	r1, [pc, #92]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a8ee:	4b13      	ldr	r3, [pc, #76]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	490f      	ldr	r1, [pc, #60]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a902:	f000 f825 	bl	800a950 <HAL_RCC_GetSysClockFreq>
 800a906:	4602      	mov	r2, r0
 800a908:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <HAL_RCC_ClockConfig+0x264>)
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	091b      	lsrs	r3, r3, #4
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	490c      	ldr	r1, [pc, #48]	; (800a944 <HAL_RCC_ClockConfig+0x26c>)
 800a914:	5ccb      	ldrb	r3, [r1, r3]
 800a916:	f003 031f 	and.w	r3, r3, #31
 800a91a:	fa22 f303 	lsr.w	r3, r2, r3
 800a91e:	4a0a      	ldr	r2, [pc, #40]	; (800a948 <HAL_RCC_ClockConfig+0x270>)
 800a920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a922:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <HAL_RCC_ClockConfig+0x274>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4618      	mov	r0, r3
 800a928:	f7fa fdb8 	bl	800549c <HAL_InitTick>
 800a92c:	4603      	mov	r3, r0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	40022000 	.word	0x40022000
 800a93c:	40021000 	.word	0x40021000
 800a940:	04c4b400 	.word	0x04c4b400
 800a944:	0800ea40 	.word	0x0800ea40
 800a948:	200001b8 	.word	0x200001b8
 800a94c:	200001bc 	.word	0x200001bc

0800a950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a956:	4b2c      	ldr	r3, [pc, #176]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f003 030c 	and.w	r3, r3, #12
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d102      	bne.n	800a968 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a962:	4b2a      	ldr	r3, [pc, #168]	; (800aa0c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	e047      	b.n	800a9f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a968:	4b27      	ldr	r3, [pc, #156]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	f003 030c 	and.w	r3, r3, #12
 800a970:	2b08      	cmp	r3, #8
 800a972:	d102      	bne.n	800a97a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a974:	4b26      	ldr	r3, [pc, #152]	; (800aa10 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a976:	613b      	str	r3, [r7, #16]
 800a978:	e03e      	b.n	800a9f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a97a:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 030c 	and.w	r3, r3, #12
 800a982:	2b0c      	cmp	r3, #12
 800a984:	d136      	bne.n	800a9f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a986:	4b20      	ldr	r3, [pc, #128]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f003 0303 	and.w	r3, r3, #3
 800a98e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a990:	4b1d      	ldr	r3, [pc, #116]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	091b      	lsrs	r3, r3, #4
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	3301      	adds	r3, #1
 800a99c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d10c      	bne.n	800a9be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9a4:	4a1a      	ldr	r2, [pc, #104]	; (800aa10 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ac:	4a16      	ldr	r2, [pc, #88]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a9ae:	68d2      	ldr	r2, [r2, #12]
 800a9b0:	0a12      	lsrs	r2, r2, #8
 800a9b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9b6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ba:	617b      	str	r3, [r7, #20]
      break;
 800a9bc:	e00c      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a9be:	4a13      	ldr	r2, [pc, #76]	; (800aa0c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c6:	4a10      	ldr	r2, [pc, #64]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a9c8:	68d2      	ldr	r2, [r2, #12]
 800a9ca:	0a12      	lsrs	r2, r2, #8
 800a9cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
 800a9d4:	617b      	str	r3, [r7, #20]
      break;
 800a9d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a9d8:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	e001      	b.n	800a9f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a9f8:	693b      	ldr	r3, [r7, #16]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	00f42400 	.word	0x00f42400
 800aa10:	016e3600 	.word	0x016e3600

0800aa14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa18:	4b03      	ldr	r3, [pc, #12]	; (800aa28 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	200001b8 	.word	0x200001b8

0800aa2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800aa30:	f7ff fff0 	bl	800aa14 <HAL_RCC_GetHCLKFreq>
 800aa34:	4602      	mov	r2, r0
 800aa36:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	4904      	ldr	r1, [pc, #16]	; (800aa54 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa42:	5ccb      	ldrb	r3, [r1, r3]
 800aa44:	f003 031f 	and.w	r3, r3, #31
 800aa48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	40021000 	.word	0x40021000
 800aa54:	0800ea50 	.word	0x0800ea50

0800aa58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aa5c:	f7ff ffda 	bl	800aa14 <HAL_RCC_GetHCLKFreq>
 800aa60:	4602      	mov	r2, r0
 800aa62:	4b06      	ldr	r3, [pc, #24]	; (800aa7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	0adb      	lsrs	r3, r3, #11
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa6e:	5ccb      	ldrb	r3, [r1, r3]
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	40021000 	.word	0x40021000
 800aa80:	0800ea50 	.word	0x0800ea50

0800aa84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aa8a:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f003 0303 	and.w	r3, r3, #3
 800aa92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa94:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	091b      	lsrs	r3, r3, #4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d10c      	bne.n	800aac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aaa8:	4a17      	ldr	r2, [pc, #92]	; (800ab08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab0:	4a14      	ldr	r2, [pc, #80]	; (800ab04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aab2:	68d2      	ldr	r2, [r2, #12]
 800aab4:	0a12      	lsrs	r2, r2, #8
 800aab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aaba:	fb02 f303 	mul.w	r3, r2, r3
 800aabe:	617b      	str	r3, [r7, #20]
    break;
 800aac0:	e00c      	b.n	800aadc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aac2:	4a12      	ldr	r2, [pc, #72]	; (800ab0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaca:	4a0e      	ldr	r2, [pc, #56]	; (800ab04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aacc:	68d2      	ldr	r2, [r2, #12]
 800aace:	0a12      	lsrs	r2, r2, #8
 800aad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aad4:	fb02 f303 	mul.w	r3, r2, r3
 800aad8:	617b      	str	r3, [r7, #20]
    break;
 800aada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aadc:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	0e5b      	lsrs	r3, r3, #25
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	3301      	adds	r3, #1
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800aaf6:	687b      	ldr	r3, [r7, #4]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	371c      	adds	r7, #28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40021000 	.word	0x40021000
 800ab08:	016e3600 	.word	0x016e3600
 800ab0c:	00f42400 	.word	0x00f42400

0800ab10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab18:	2300      	movs	r3, #0
 800ab1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8098 	beq.w	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab32:	4b43      	ldr	r3, [pc, #268]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10d      	bne.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab3e:	4b40      	ldr	r3, [pc, #256]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab42:	4a3f      	ldr	r2, [pc, #252]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab48:	6593      	str	r3, [r2, #88]	; 0x58
 800ab4a:	4b3d      	ldr	r3, [pc, #244]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab52:	60bb      	str	r3, [r7, #8]
 800ab54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab56:	2301      	movs	r3, #1
 800ab58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab5a:	4b3a      	ldr	r3, [pc, #232]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a39      	ldr	r2, [pc, #228]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab66:	f7fa fce5 	bl	8005534 <HAL_GetTick>
 800ab6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab6c:	e009      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab6e:	f7fa fce1 	bl	8005534 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d902      	bls.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	74fb      	strb	r3, [r7, #19]
        break;
 800ab80:	e005      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab82:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0ef      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ab8e:	7cfb      	ldrb	r3, [r7, #19]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d159      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab94:	4b2a      	ldr	r3, [pc, #168]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d01e      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d019      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800abb0:	4b23      	ldr	r3, [pc, #140]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abbc:	4b20      	ldr	r3, [pc, #128]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc2:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abcc:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd2:	4a1b      	ldr	r2, [pc, #108]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	2b00      	cmp	r3, #0
 800abec:	d016      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abee:	f7fa fca1 	bl	8005534 <HAL_GetTick>
 800abf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abf4:	e00b      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf6:	f7fa fc9d 	bl	8005534 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d902      	bls.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	74fb      	strb	r3, [r7, #19]
            break;
 800ac0c:	e006      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0ec      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ac1c:	7cfb      	ldrb	r3, [r7, #19]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10b      	bne.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac30:	4903      	ldr	r1, [pc, #12]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ac38:	e008      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac3a:	7cfb      	ldrb	r3, [r7, #19]
 800ac3c:	74bb      	strb	r3, [r7, #18]
 800ac3e:	e005      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ac40:	40021000 	.word	0x40021000
 800ac44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac48:	7cfb      	ldrb	r3, [r7, #19]
 800ac4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac4c:	7c7b      	ldrb	r3, [r7, #17]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d105      	bne.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac52:	4ba7      	ldr	r3, [pc, #668]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	4aa6      	ldr	r2, [pc, #664]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac6a:	4ba1      	ldr	r3, [pc, #644]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac70:	f023 0203 	bic.w	r2, r3, #3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	499d      	ldr	r1, [pc, #628]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac8c:	4b98      	ldr	r3, [pc, #608]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac92:	f023 020c 	bic.w	r2, r3, #12
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	4995      	ldr	r1, [pc, #596]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800acae:	4b90      	ldr	r3, [pc, #576]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	498c      	ldr	r1, [pc, #560]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800acd0:	4b87      	ldr	r3, [pc, #540]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	4984      	ldr	r1, [pc, #528]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800acf2:	4b7f      	ldr	r3, [pc, #508]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	497b      	ldr	r1, [pc, #492]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00a      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad14:	4b76      	ldr	r3, [pc, #472]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	4973      	ldr	r1, [pc, #460]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad36:	4b6e      	ldr	r3, [pc, #440]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	496a      	ldr	r1, [pc, #424]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad58:	4b65      	ldr	r3, [pc, #404]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	4962      	ldr	r1, [pc, #392]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad7a:	4b5d      	ldr	r3, [pc, #372]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	4959      	ldr	r1, [pc, #356]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad9c:	4b54      	ldr	r3, [pc, #336]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ada2:	f023 0203 	bic.w	r2, r3, #3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adaa:	4951      	ldr	r1, [pc, #324]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adac:	4313      	orrs	r3, r2
 800adae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800adbe:	4b4c      	ldr	r3, [pc, #304]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4948      	ldr	r1, [pc, #288]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adce:	4313      	orrs	r3, r2
 800add0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800addc:	2b00      	cmp	r3, #0
 800adde:	d015      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ade0:	4b43      	ldr	r3, [pc, #268]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	4940      	ldr	r1, [pc, #256]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adfe:	d105      	bne.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae00:	4b3b      	ldr	r3, [pc, #236]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	4a3a      	ldr	r2, [pc, #232]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d015      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ae18:	4b35      	ldr	r3, [pc, #212]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae26:	4932      	ldr	r1, [pc, #200]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae36:	d105      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae38:	4b2d      	ldr	r3, [pc, #180]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	4a2c      	ldr	r2, [pc, #176]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d015      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae50:	4b27      	ldr	r3, [pc, #156]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5e:	4924      	ldr	r1, [pc, #144]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae6e:	d105      	bne.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae70:	4b1f      	ldr	r3, [pc, #124]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d015      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae96:	4916      	ldr	r1, [pc, #88]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aea6:	d105      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aea8:	4b11      	ldr	r3, [pc, #68]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	4a10      	ldr	r2, [pc, #64]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d019      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	4908      	ldr	r1, [pc, #32]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aede:	d109      	bne.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aee0:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	4a02      	ldr	r2, [pc, #8]	; (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeea:	60d3      	str	r3, [r2, #12]
 800aeec:	e002      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800aeee:	bf00      	nop
 800aef0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d015      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800af00:	4b29      	ldr	r3, [pc, #164]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0e:	4926      	ldr	r1, [pc, #152]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af10:	4313      	orrs	r3, r2
 800af12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af1e:	d105      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800af20:	4b21      	ldr	r3, [pc, #132]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	4a20      	ldr	r2, [pc, #128]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d015      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800af38:	4b1b      	ldr	r3, [pc, #108]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af46:	4918      	ldr	r1, [pc, #96]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af56:	d105      	bne.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800af58:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	4a12      	ldr	r2, [pc, #72]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d015      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af70:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af7e:	490a      	ldr	r1, [pc, #40]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af80:	4313      	orrs	r3, r2
 800af82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af8e:	d105      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	4a04      	ldr	r2, [pc, #16]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800af96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800af9c:	7cbb      	ldrb	r3, [r7, #18]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	40021000 	.word	0x40021000

0800afac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e09d      	b.n	800b0fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d108      	bne.n	800afd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afce:	d009      	beq.n	800afe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	61da      	str	r2, [r3, #28]
 800afd6:	e005      	b.n	800afe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7f9 fdfa 	bl	8004bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b01a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b024:	d902      	bls.n	800b02c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b026:	2300      	movs	r3, #0
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	e002      	b.n	800b032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b02c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b03a:	d007      	beq.n	800b04c <HAL_SPI_Init+0xa0>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b044:	d002      	beq.n	800b04c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	431a      	orrs	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b08e:	ea42 0103 	orr.w	r1, r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	0c1b      	lsrs	r3, r3, #16
 800b0a8:	f003 0204 	and.w	r2, r3, #4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ba:	f003 0308 	and.w	r3, r3, #8
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b0c8:	ea42 0103 	orr.w	r1, r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e049      	b.n	800b1a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d106      	bne.n	800b12e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7f9 ff9f 	bl	800506c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2202      	movs	r2, #2
 800b132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f000 fb45 	bl	800b7d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d001      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e054      	b.n	800b272 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a26      	ldr	r2, [pc, #152]	; (800b280 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d022      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f2:	d01d      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a22      	ldr	r2, [pc, #136]	; (800b284 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d018      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a21      	ldr	r2, [pc, #132]	; (800b288 <HAL_TIM_Base_Start_IT+0xd8>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d013      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1f      	ldr	r2, [pc, #124]	; (800b28c <HAL_TIM_Base_Start_IT+0xdc>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00e      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a1e      	ldr	r2, [pc, #120]	; (800b290 <HAL_TIM_Base_Start_IT+0xe0>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d009      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a1c      	ldr	r2, [pc, #112]	; (800b294 <HAL_TIM_Base_Start_IT+0xe4>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d004      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x80>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a1b      	ldr	r2, [pc, #108]	; (800b298 <HAL_TIM_Base_Start_IT+0xe8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d115      	bne.n	800b25c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689a      	ldr	r2, [r3, #8]
 800b236:	4b19      	ldr	r3, [pc, #100]	; (800b29c <HAL_TIM_Base_Start_IT+0xec>)
 800b238:	4013      	ands	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d015      	beq.n	800b26e <HAL_TIM_Base_Start_IT+0xbe>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b248:	d011      	beq.n	800b26e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f042 0201 	orr.w	r2, r2, #1
 800b258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b25a:	e008      	b.n	800b26e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f042 0201 	orr.w	r2, r2, #1
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e000      	b.n	800b270 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b26e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	40012c00 	.word	0x40012c00
 800b284:	40000400 	.word	0x40000400
 800b288:	40000800 	.word	0x40000800
 800b28c:	40000c00 	.word	0x40000c00
 800b290:	40013400 	.word	0x40013400
 800b294:	40014000 	.word	0x40014000
 800b298:	40015000 	.word	0x40015000
 800b29c:	00010007 	.word	0x00010007

0800b2a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d020      	beq.n	800b304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01b      	beq.n	800b304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f06f 0202 	mvn.w	r2, #2
 800b2d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa52 	bl	800b794 <HAL_TIM_IC_CaptureCallback>
 800b2f0:	e005      	b.n	800b2fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fa44 	bl	800b780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fa55 	bl	800b7a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f003 0304 	and.w	r3, r3, #4
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d020      	beq.n	800b350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01b      	beq.n	800b350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f06f 0204 	mvn.w	r2, #4
 800b320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa2c 	bl	800b794 <HAL_TIM_IC_CaptureCallback>
 800b33c:	e005      	b.n	800b34a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fa1e 	bl	800b780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fa2f 	bl	800b7a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f003 0308 	and.w	r3, r3, #8
 800b356:	2b00      	cmp	r3, #0
 800b358:	d020      	beq.n	800b39c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01b      	beq.n	800b39c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f06f 0208 	mvn.w	r2, #8
 800b36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2204      	movs	r2, #4
 800b372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	f003 0303 	and.w	r3, r3, #3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa06 	bl	800b794 <HAL_TIM_IC_CaptureCallback>
 800b388:	e005      	b.n	800b396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f9f8 	bl	800b780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fa09 	bl	800b7a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f003 0310 	and.w	r3, r3, #16
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d020      	beq.n	800b3e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f003 0310 	and.w	r3, r3, #16
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d01b      	beq.n	800b3e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f06f 0210 	mvn.w	r2, #16
 800b3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2208      	movs	r2, #8
 800b3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f9e0 	bl	800b794 <HAL_TIM_IC_CaptureCallback>
 800b3d4:	e005      	b.n	800b3e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f9d2 	bl	800b780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f9e3 	bl	800b7a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00c      	beq.n	800b40c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0201 	mvn.w	r2, #1
 800b404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f9b0 	bl	800b76c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b412:	2b00      	cmp	r3, #0
 800b414:	d104      	bne.n	800b420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00c      	beq.n	800b43a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fbbb 	bl	800bbb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00c      	beq.n	800b45e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d007      	beq.n	800b45e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fbb3 	bl	800bbc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00c      	beq.n	800b482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f99d 	bl	800b7bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00c      	beq.n	800b4a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d007      	beq.n	800b4a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f06f 0220 	mvn.w	r2, #32
 800b49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fb7b 	bl	800bb9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00c      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d007      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fb87 	bl	800bbd8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fb7f 	bl	800bbec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00c      	beq.n	800b512 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d007      	beq.n	800b512 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fb77 	bl	800bc00 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00c      	beq.n	800b536 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fb6f 	bl	800bc14 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
	...

0800b540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d101      	bne.n	800b55c <HAL_TIM_ConfigClockSource+0x1c>
 800b558:	2302      	movs	r3, #2
 800b55a:	e0f6      	b.n	800b74a <HAL_TIM_ConfigClockSource+0x20a>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b57a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b57e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a6f      	ldr	r2, [pc, #444]	; (800b754 <HAL_TIM_ConfigClockSource+0x214>)
 800b596:	4293      	cmp	r3, r2
 800b598:	f000 80c1 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b59c:	4a6d      	ldr	r2, [pc, #436]	; (800b754 <HAL_TIM_ConfigClockSource+0x214>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	f200 80c6 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5a4:	4a6c      	ldr	r2, [pc, #432]	; (800b758 <HAL_TIM_ConfigClockSource+0x218>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	f000 80b9 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5ac:	4a6a      	ldr	r2, [pc, #424]	; (800b758 <HAL_TIM_ConfigClockSource+0x218>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	f200 80be 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5b4:	4a69      	ldr	r2, [pc, #420]	; (800b75c <HAL_TIM_ConfigClockSource+0x21c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	f000 80b1 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5bc:	4a67      	ldr	r2, [pc, #412]	; (800b75c <HAL_TIM_ConfigClockSource+0x21c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	f200 80b6 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5c4:	4a66      	ldr	r2, [pc, #408]	; (800b760 <HAL_TIM_ConfigClockSource+0x220>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	f000 80a9 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5cc:	4a64      	ldr	r2, [pc, #400]	; (800b760 <HAL_TIM_ConfigClockSource+0x220>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	f200 80ae 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5d4:	4a63      	ldr	r2, [pc, #396]	; (800b764 <HAL_TIM_ConfigClockSource+0x224>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	f000 80a1 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5dc:	4a61      	ldr	r2, [pc, #388]	; (800b764 <HAL_TIM_ConfigClockSource+0x224>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	f200 80a6 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5e4:	4a60      	ldr	r2, [pc, #384]	; (800b768 <HAL_TIM_ConfigClockSource+0x228>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	f000 8099 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5ec:	4a5e      	ldr	r2, [pc, #376]	; (800b768 <HAL_TIM_ConfigClockSource+0x228>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	f200 809e 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b5f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5f8:	f000 8091 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b5fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b600:	f200 8096 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b608:	f000 8089 	beq.w	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b60c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b610:	f200 808e 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b618:	d03e      	beq.n	800b698 <HAL_TIM_ConfigClockSource+0x158>
 800b61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b61e:	f200 8087 	bhi.w	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b626:	f000 8086 	beq.w	800b736 <HAL_TIM_ConfigClockSource+0x1f6>
 800b62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b62e:	d87f      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b630:	2b70      	cmp	r3, #112	; 0x70
 800b632:	d01a      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0x12a>
 800b634:	2b70      	cmp	r3, #112	; 0x70
 800b636:	d87b      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b638:	2b60      	cmp	r3, #96	; 0x60
 800b63a:	d050      	beq.n	800b6de <HAL_TIM_ConfigClockSource+0x19e>
 800b63c:	2b60      	cmp	r3, #96	; 0x60
 800b63e:	d877      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b640:	2b50      	cmp	r3, #80	; 0x50
 800b642:	d03c      	beq.n	800b6be <HAL_TIM_ConfigClockSource+0x17e>
 800b644:	2b50      	cmp	r3, #80	; 0x50
 800b646:	d873      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b648:	2b40      	cmp	r3, #64	; 0x40
 800b64a:	d058      	beq.n	800b6fe <HAL_TIM_ConfigClockSource+0x1be>
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d86f      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b650:	2b30      	cmp	r3, #48	; 0x30
 800b652:	d064      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b654:	2b30      	cmp	r3, #48	; 0x30
 800b656:	d86b      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d060      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b65c:	2b20      	cmp	r3, #32
 800b65e:	d867      	bhi.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d05c      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b664:	2b10      	cmp	r3, #16
 800b666:	d05a      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x1de>
 800b668:	e062      	b.n	800b730 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	6899      	ldr	r1, [r3, #8]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f000 f9d9 	bl	800ba30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b68c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	609a      	str	r2, [r3, #8]
      break;
 800b696:	e04f      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	6899      	ldr	r1, [r3, #8]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f000 f9c2 	bl	800ba30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6ba:	609a      	str	r2, [r3, #8]
      break;
 800b6bc:	e03c      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	6859      	ldr	r1, [r3, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f000 f934 	bl	800b938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2150      	movs	r1, #80	; 0x50
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f98d 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b6dc:	e02c      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6818      	ldr	r0, [r3, #0]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	6859      	ldr	r1, [r3, #4]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f000 f953 	bl	800b996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2160      	movs	r1, #96	; 0x60
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f97d 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b6fc:	e01c      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6818      	ldr	r0, [r3, #0]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	6859      	ldr	r1, [r3, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f000 f914 	bl	800b938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2140      	movs	r1, #64	; 0x40
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f96d 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b71c:	e00c      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f000 f964 	bl	800b9f6 <TIM_ITRx_SetConfig>
      break;
 800b72e:	e003      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	73fb      	strb	r3, [r7, #15]
      break;
 800b734:	e000      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	00100070 	.word	0x00100070
 800b758:	00100060 	.word	0x00100060
 800b75c:	00100050 	.word	0x00100050
 800b760:	00100040 	.word	0x00100040
 800b764:	00100030 	.word	0x00100030
 800b768:	00100020 	.word	0x00100020

0800b76c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a4c      	ldr	r2, [pc, #304]	; (800b914 <TIM_Base_SetConfig+0x144>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d017      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ee:	d013      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a49      	ldr	r2, [pc, #292]	; (800b918 <TIM_Base_SetConfig+0x148>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d00f      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a48      	ldr	r2, [pc, #288]	; (800b91c <TIM_Base_SetConfig+0x14c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d00b      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4a47      	ldr	r2, [pc, #284]	; (800b920 <TIM_Base_SetConfig+0x150>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d007      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a46      	ldr	r2, [pc, #280]	; (800b924 <TIM_Base_SetConfig+0x154>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d003      	beq.n	800b818 <TIM_Base_SetConfig+0x48>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a45      	ldr	r2, [pc, #276]	; (800b928 <TIM_Base_SetConfig+0x158>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d108      	bne.n	800b82a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a39      	ldr	r2, [pc, #228]	; (800b914 <TIM_Base_SetConfig+0x144>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d023      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b838:	d01f      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a36      	ldr	r2, [pc, #216]	; (800b918 <TIM_Base_SetConfig+0x148>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01b      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a35      	ldr	r2, [pc, #212]	; (800b91c <TIM_Base_SetConfig+0x14c>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d017      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a34      	ldr	r2, [pc, #208]	; (800b920 <TIM_Base_SetConfig+0x150>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a33      	ldr	r2, [pc, #204]	; (800b924 <TIM_Base_SetConfig+0x154>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a33      	ldr	r2, [pc, #204]	; (800b92c <TIM_Base_SetConfig+0x15c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a32      	ldr	r2, [pc, #200]	; (800b930 <TIM_Base_SetConfig+0x160>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a31      	ldr	r2, [pc, #196]	; (800b934 <TIM_Base_SetConfig+0x164>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_Base_SetConfig+0xaa>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a2c      	ldr	r2, [pc, #176]	; (800b928 <TIM_Base_SetConfig+0x158>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d108      	bne.n	800b88c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a18      	ldr	r2, [pc, #96]	; (800b914 <TIM_Base_SetConfig+0x144>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d013      	beq.n	800b8e0 <TIM_Base_SetConfig+0x110>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a1a      	ldr	r2, [pc, #104]	; (800b924 <TIM_Base_SetConfig+0x154>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00f      	beq.n	800b8e0 <TIM_Base_SetConfig+0x110>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a1a      	ldr	r2, [pc, #104]	; (800b92c <TIM_Base_SetConfig+0x15c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00b      	beq.n	800b8e0 <TIM_Base_SetConfig+0x110>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a19      	ldr	r2, [pc, #100]	; (800b930 <TIM_Base_SetConfig+0x160>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d007      	beq.n	800b8e0 <TIM_Base_SetConfig+0x110>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a18      	ldr	r2, [pc, #96]	; (800b934 <TIM_Base_SetConfig+0x164>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d003      	beq.n	800b8e0 <TIM_Base_SetConfig+0x110>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a13      	ldr	r2, [pc, #76]	; (800b928 <TIM_Base_SetConfig+0x158>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d103      	bne.n	800b8e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d105      	bne.n	800b906 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	f023 0201 	bic.w	r2, r3, #1
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	611a      	str	r2, [r3, #16]
  }
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	40012c00 	.word	0x40012c00
 800b918:	40000400 	.word	0x40000400
 800b91c:	40000800 	.word	0x40000800
 800b920:	40000c00 	.word	0x40000c00
 800b924:	40013400 	.word	0x40013400
 800b928:	40015000 	.word	0x40015000
 800b92c:	40014000 	.word	0x40014000
 800b930:	40014400 	.word	0x40014400
 800b934:	40014800 	.word	0x40014800

0800b938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	f023 0201 	bic.w	r2, r3, #1
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f023 030a 	bic.w	r3, r3, #10
 800b974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	621a      	str	r2, [r3, #32]
}
 800b98a:	bf00      	nop
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b996:	b480      	push	{r7}
 800b998:	b087      	sub	sp, #28
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	f023 0210 	bic.w	r2, r3, #16
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	031b      	lsls	r3, r3, #12
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	621a      	str	r2, [r3, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b085      	sub	sp, #20
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ba0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	f043 0307 	orr.w	r3, r3, #7
 800ba1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	609a      	str	r2, [r3, #8]
}
 800ba24:	bf00      	nop
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	021a      	lsls	r2, r3, #8
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	431a      	orrs	r2, r3
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	609a      	str	r2, [r3, #8]
}
 800ba64:	bf00      	nop
 800ba66:	371c      	adds	r7, #28
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e074      	b.n	800bb72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a34      	ldr	r2, [pc, #208]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d009      	beq.n	800bac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a33      	ldr	r2, [pc, #204]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d004      	beq.n	800bac6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a31      	ldr	r2, [pc, #196]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d108      	bne.n	800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bacc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4313      	orrs	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a21      	ldr	r2, [pc, #132]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d022      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb08:	d01d      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a1f      	ldr	r2, [pc, #124]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d018      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a1d      	ldr	r2, [pc, #116]	; (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d013      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a1c      	ldr	r2, [pc, #112]	; (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00e      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a15      	ldr	r2, [pc, #84]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d009      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a18      	ldr	r2, [pc, #96]	; (800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d004      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a11      	ldr	r2, [pc, #68]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d10c      	bne.n	800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	40012c00 	.word	0x40012c00
 800bb84:	40013400 	.word	0x40013400
 800bb88:	40015000 	.word	0x40015000
 800bb8c:	40000400 	.word	0x40000400
 800bb90:	40000800 	.word	0x40000800
 800bb94:	40000c00 	.word	0x40000c00
 800bb98:	40014000 	.word	0x40014000

0800bb9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbb8:	bf00      	nop
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e042      	b.n	800bcc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d106      	bne.n	800bc52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7f9 fb1f 	bl	8005290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2224      	movs	r2, #36	; 0x24
 800bc56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 ff48 	bl	800cb08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fc49 	bl	800c510 <UART_SetConfig>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d101      	bne.n	800bc88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e01b      	b.n	800bcc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f042 0201 	orr.w	r2, r2, #1
 800bcb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 ffc7 	bl	800cc4c <UART_CheckIdleState>
 800bcbe:	4603      	mov	r3, r0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b091      	sub	sp, #68	; 0x44
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcdc:	2b20      	cmp	r3, #32
 800bcde:	d178      	bne.n	800bdd2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <HAL_UART_Transmit_IT+0x24>
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e071      	b.n	800bdd4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	88fa      	ldrh	r2, [r7, #6]
 800bcfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	88fa      	ldrh	r2, [r7, #6]
 800bd02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2221      	movs	r2, #33	; 0x21
 800bd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd24:	d12a      	bne.n	800bd7c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2e:	d107      	bne.n	800bd40 <HAL_UART_Transmit_IT+0x78>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d103      	bne.n	800bd40 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4a29      	ldr	r2, [pc, #164]	; (800bde0 <HAL_UART_Transmit_IT+0x118>)
 800bd3c:	679a      	str	r2, [r3, #120]	; 0x78
 800bd3e:	e002      	b.n	800bd46 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4a28      	ldr	r2, [pc, #160]	; (800bde4 <HAL_UART_Transmit_IT+0x11c>)
 800bd44:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3308      	adds	r3, #8
 800bd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd66:	637a      	str	r2, [r7, #52]	; 0x34
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e5      	bne.n	800bd46 <HAL_UART_Transmit_IT+0x7e>
 800bd7a:	e028      	b.n	800bdce <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd84:	d107      	bne.n	800bd96 <HAL_UART_Transmit_IT+0xce>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4a15      	ldr	r2, [pc, #84]	; (800bde8 <HAL_UART_Transmit_IT+0x120>)
 800bd92:	679a      	str	r2, [r3, #120]	; 0x78
 800bd94:	e002      	b.n	800bd9c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4a14      	ldr	r2, [pc, #80]	; (800bdec <HAL_UART_Transmit_IT+0x124>)
 800bd9a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	623b      	str	r3, [r7, #32]
 800bdbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbe:	69f9      	ldr	r1, [r7, #28]
 800bdc0:	6a3a      	ldr	r2, [r7, #32]
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e6      	bne.n	800bd9c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	e000      	b.n	800bdd4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800bdd2:	2302      	movs	r3, #2
  }
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3744      	adds	r7, #68	; 0x44
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	0800d413 	.word	0x0800d413
 800bde4:	0800d333 	.word	0x0800d333
 800bde8:	0800d271 	.word	0x0800d271
 800bdec:	0800d1b9 	.word	0x0800d1b9

0800bdf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	; 0x28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be04:	2b20      	cmp	r3, #32
 800be06:	d137      	bne.n	800be78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <HAL_UART_Receive_IT+0x24>
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e030      	b.n	800be7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a18      	ldr	r2, [pc, #96]	; (800be84 <HAL_UART_Receive_IT+0x94>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d01f      	beq.n	800be68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d018      	beq.n	800be68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	613b      	str	r3, [r7, #16]
   return(result);
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	623b      	str	r3, [r7, #32]
 800be56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	69f9      	ldr	r1, [r7, #28]
 800be5a:	6a3a      	ldr	r2, [r7, #32]
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	61bb      	str	r3, [r7, #24]
   return(result);
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e6      	bne.n	800be36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	461a      	mov	r2, r3
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f001 f804 	bl	800ce7c <UART_Start_Receive_IT>
 800be74:	4603      	mov	r3, r0
 800be76:	e000      	b.n	800be7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be78:	2302      	movs	r3, #2
  }
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3728      	adds	r7, #40	; 0x28
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	40008000 	.word	0x40008000

0800be88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b0ba      	sub	sp, #232	; 0xe8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800beae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800beb2:	f640 030f 	movw	r3, #2063	; 0x80f
 800beb6:	4013      	ands	r3, r2
 800beb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11b      	bne.n	800befc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec8:	f003 0320 	and.w	r3, r3, #32
 800becc:	2b00      	cmp	r3, #0
 800bece:	d015      	beq.n	800befc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bed4:	f003 0320 	and.w	r3, r3, #32
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d105      	bne.n	800bee8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d009      	beq.n	800befc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 82e3 	beq.w	800c4b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	4798      	blx	r3
      }
      return;
 800befa:	e2dd      	b.n	800c4b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800befc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 8123 	beq.w	800c14c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf0a:	4b8d      	ldr	r3, [pc, #564]	; (800c140 <HAL_UART_IRQHandler+0x2b8>)
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf16:	4b8b      	ldr	r3, [pc, #556]	; (800c144 <HAL_UART_IRQHandler+0x2bc>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 8116 	beq.w	800c14c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d011      	beq.n	800bf50 <HAL_UART_IRQHandler+0xc8>
 800bf2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00b      	beq.n	800bf50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf46:	f043 0201 	orr.w	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf54:	f003 0302 	and.w	r3, r3, #2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d011      	beq.n	800bf80 <HAL_UART_IRQHandler+0xf8>
 800bf5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf60:	f003 0301 	and.w	r3, r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf76:	f043 0204 	orr.w	r2, r3, #4
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d011      	beq.n	800bfb0 <HAL_UART_IRQHandler+0x128>
 800bf8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2204      	movs	r2, #4
 800bf9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa6:	f043 0202 	orr.w	r2, r3, #2
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bfb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfb4:	f003 0308 	and.w	r3, r3, #8
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d017      	beq.n	800bfec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfc0:	f003 0320 	and.w	r3, r3, #32
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d105      	bne.n	800bfd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bfc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bfcc:	4b5c      	ldr	r3, [pc, #368]	; (800c140 <HAL_UART_IRQHandler+0x2b8>)
 800bfce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00b      	beq.n	800bfec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2208      	movs	r2, #8
 800bfda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe2:	f043 0208 	orr.w	r2, r3, #8
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d012      	beq.n	800c01e <HAL_UART_IRQHandler+0x196>
 800bff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00c      	beq.n	800c01e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c00c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c014:	f043 0220 	orr.w	r2, r3, #32
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8249 	beq.w	800c4bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d013      	beq.n	800c05e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d105      	bne.n	800c04e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d007      	beq.n	800c05e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c072:	2b40      	cmp	r3, #64	; 0x40
 800c074:	d005      	beq.n	800c082 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c07a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d054      	beq.n	800c12c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f001 f81c 	bl	800d0c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c092:	2b40      	cmp	r3, #64	; 0x40
 800c094:	d146      	bne.n	800c124 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3308      	adds	r3, #8
 800c09c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3308      	adds	r3, #8
 800c0be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c0c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c0c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c0ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0d2:	e841 2300 	strex	r3, r2, [r1]
 800c0d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1d9      	bne.n	800c096 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d017      	beq.n	800c11c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <HAL_UART_IRQHandler+0x2c0>)
 800c0f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fb fb17 	bl	8007730 <HAL_DMA_Abort_IT>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d019      	beq.n	800c13c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c116:	4610      	mov	r0, r2
 800c118:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c11a:	e00f      	b.n	800c13c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f9e1 	bl	800c4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c122:	e00b      	b.n	800c13c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f9dd 	bl	800c4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12a:	e007      	b.n	800c13c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f9d9 	bl	800c4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c13a:	e1bf      	b.n	800c4bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c13c:	bf00      	nop
    return;
 800c13e:	e1bd      	b.n	800c4bc <HAL_UART_IRQHandler+0x634>
 800c140:	10000001 	.word	0x10000001
 800c144:	04000120 	.word	0x04000120
 800c148:	0800d18d 	.word	0x0800d18d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c150:	2b01      	cmp	r3, #1
 800c152:	f040 8153 	bne.w	800c3fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c15a:	f003 0310 	and.w	r3, r3, #16
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 814c 	beq.w	800c3fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c168:	f003 0310 	and.w	r3, r3, #16
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 8145 	beq.w	800c3fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2210      	movs	r2, #16
 800c178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c184:	2b40      	cmp	r3, #64	; 0x40
 800c186:	f040 80bb 	bne.w	800c300 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 818f 	beq.w	800c4c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	f080 8187 	bcs.w	800c4c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0320 	and.w	r3, r3, #32
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f040 8087 	bne.w	800c2de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1da      	bne.n	800c1d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3308      	adds	r3, #8
 800c220:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c224:	e853 3f00 	ldrex	r3, [r3]
 800c228:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c22a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c22c:	f023 0301 	bic.w	r3, r3, #1
 800c230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3308      	adds	r3, #8
 800c23a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c23e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c242:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c244:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c246:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e1      	bne.n	800c21a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3308      	adds	r3, #8
 800c25c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c26c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	3308      	adds	r3, #8
 800c276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c27a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c27c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c282:	e841 2300 	strex	r3, r2, [r1]
 800c286:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e3      	bne.n	800c256 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2220      	movs	r2, #32
 800c292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ac:	f023 0310 	bic.w	r3, r3, #16
 800c2b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2c6:	e841 2300 	strex	r3, r2, [r1]
 800c2ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1e4      	bne.n	800c29c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fb f9d0 	bl	800767e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f8fd 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2fe:	e0df      	b.n	800c4c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 80d1 	beq.w	800c4c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 80cc 	beq.w	800c4c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c34e:	647b      	str	r3, [r7, #68]	; 0x44
 800c350:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c356:	e841 2300 	strex	r3, r2, [r1]
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1e4      	bne.n	800c32c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	623b      	str	r3, [r7, #32]
   return(result);
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c378:	f023 0301 	bic.w	r3, r3, #1
 800c37c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3308      	adds	r3, #8
 800c386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c38a:	633a      	str	r2, [r7, #48]	; 0x30
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e1      	bne.n	800c362 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	e853 3f00 	ldrex	r3, [r3]
 800c3be:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f023 0310 	bic.w	r3, r3, #16
 800c3c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3d4:	61fb      	str	r3, [r7, #28]
 800c3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d8:	69b9      	ldr	r1, [r7, #24]
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	e841 2300 	strex	r3, r2, [r1]
 800c3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e4      	bne.n	800c3b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f87f 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3fa:	e063      	b.n	800c4c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00e      	beq.n	800c426 <HAL_UART_IRQHandler+0x59e>
 800c408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c40c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d008      	beq.n	800c426 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c41c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 fdb4 	bl	800df8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c424:	e051      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d014      	beq.n	800c45c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d105      	bne.n	800c44a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d008      	beq.n	800c45c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d03a      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
    }
    return;
 800c45a:	e035      	b.n	800c4c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d009      	beq.n	800c47c <HAL_UART_IRQHandler+0x5f4>
 800c468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c470:	2b00      	cmp	r3, #0
 800c472:	d003      	beq.n	800c47c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f001 f841 	bl	800d4fc <UART_EndTransmit_IT>
    return;
 800c47a:	e026      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d009      	beq.n	800c49c <HAL_UART_IRQHandler+0x614>
 800c488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c48c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f001 fd8d 	bl	800dfb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c49a:	e016      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d010      	beq.n	800c4ca <HAL_UART_IRQHandler+0x642>
 800c4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	da0c      	bge.n	800c4ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f001 fd75 	bl	800dfa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4b6:	e008      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
      return;
 800c4b8:	bf00      	nop
 800c4ba:	e006      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
    return;
 800c4bc:	bf00      	nop
 800c4be:	e004      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
      return;
 800c4c0:	bf00      	nop
 800c4c2:	e002      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
      return;
 800c4c4:	bf00      	nop
 800c4c6:	e000      	b.n	800c4ca <HAL_UART_IRQHandler+0x642>
    return;
 800c4c8:	bf00      	nop
  }
}
 800c4ca:	37e8      	adds	r7, #232	; 0xe8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c514:	b08c      	sub	sp, #48	; 0x30
 800c516:	af00      	add	r7, sp, #0
 800c518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	689a      	ldr	r2, [r3, #8]
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	431a      	orrs	r2, r3
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	431a      	orrs	r2, r3
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	4313      	orrs	r3, r2
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4baa      	ldr	r3, [pc, #680]	; (800c7e8 <UART_SetConfig+0x2d8>)
 800c540:	4013      	ands	r3, r2
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c548:	430b      	orrs	r3, r1
 800c54a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	430a      	orrs	r2, r1
 800c560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a9f      	ldr	r2, [pc, #636]	; (800c7ec <UART_SetConfig+0x2dc>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d004      	beq.n	800c57c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c578:	4313      	orrs	r3, r2
 800c57a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c586:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	6812      	ldr	r2, [r2, #0]
 800c58e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c590:	430b      	orrs	r3, r1
 800c592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59a:	f023 010f 	bic.w	r1, r3, #15
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a90      	ldr	r2, [pc, #576]	; (800c7f0 <UART_SetConfig+0x2e0>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d125      	bne.n	800c600 <UART_SetConfig+0xf0>
 800c5b4:	4b8f      	ldr	r3, [pc, #572]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ba:	f003 0303 	and.w	r3, r3, #3
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d81a      	bhi.n	800c5f8 <UART_SetConfig+0xe8>
 800c5c2:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <UART_SetConfig+0xb8>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5d9 	.word	0x0800c5d9
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	0800c5e1 	.word	0x0800c5e1
 800c5d4:	0800c5f1 	.word	0x0800c5f1
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5de:	e116      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5e6:	e112      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ee:	e10e      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5f6:	e10a      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5fe:	e106      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a7c      	ldr	r2, [pc, #496]	; (800c7f8 <UART_SetConfig+0x2e8>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d138      	bne.n	800c67c <UART_SetConfig+0x16c>
 800c60a:	4b7a      	ldr	r3, [pc, #488]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c610:	f003 030c 	and.w	r3, r3, #12
 800c614:	2b0c      	cmp	r3, #12
 800c616:	d82d      	bhi.n	800c674 <UART_SetConfig+0x164>
 800c618:	a201      	add	r2, pc, #4	; (adr r2, 800c620 <UART_SetConfig+0x110>)
 800c61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61e:	bf00      	nop
 800c620:	0800c655 	.word	0x0800c655
 800c624:	0800c675 	.word	0x0800c675
 800c628:	0800c675 	.word	0x0800c675
 800c62c:	0800c675 	.word	0x0800c675
 800c630:	0800c665 	.word	0x0800c665
 800c634:	0800c675 	.word	0x0800c675
 800c638:	0800c675 	.word	0x0800c675
 800c63c:	0800c675 	.word	0x0800c675
 800c640:	0800c65d 	.word	0x0800c65d
 800c644:	0800c675 	.word	0x0800c675
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	0800c675 	.word	0x0800c675
 800c650:	0800c66d 	.word	0x0800c66d
 800c654:	2300      	movs	r3, #0
 800c656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c65a:	e0d8      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c65c:	2302      	movs	r3, #2
 800c65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c662:	e0d4      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c664:	2304      	movs	r3, #4
 800c666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c66a:	e0d0      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c66c:	2308      	movs	r3, #8
 800c66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c672:	e0cc      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c674:	2310      	movs	r3, #16
 800c676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c67a:	e0c8      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a5e      	ldr	r2, [pc, #376]	; (800c7fc <UART_SetConfig+0x2ec>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d125      	bne.n	800c6d2 <UART_SetConfig+0x1c2>
 800c686:	4b5b      	ldr	r3, [pc, #364]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c68c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c690:	2b30      	cmp	r3, #48	; 0x30
 800c692:	d016      	beq.n	800c6c2 <UART_SetConfig+0x1b2>
 800c694:	2b30      	cmp	r3, #48	; 0x30
 800c696:	d818      	bhi.n	800c6ca <UART_SetConfig+0x1ba>
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d00a      	beq.n	800c6b2 <UART_SetConfig+0x1a2>
 800c69c:	2b20      	cmp	r3, #32
 800c69e:	d814      	bhi.n	800c6ca <UART_SetConfig+0x1ba>
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <UART_SetConfig+0x19a>
 800c6a4:	2b10      	cmp	r3, #16
 800c6a6:	d008      	beq.n	800c6ba <UART_SetConfig+0x1aa>
 800c6a8:	e00f      	b.n	800c6ca <UART_SetConfig+0x1ba>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6b0:	e0ad      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6b8:	e0a9      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c6ba:	2304      	movs	r3, #4
 800c6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6c0:	e0a5      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6c8:	e0a1      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c6ca:	2310      	movs	r3, #16
 800c6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6d0:	e09d      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a4a      	ldr	r2, [pc, #296]	; (800c800 <UART_SetConfig+0x2f0>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d125      	bne.n	800c728 <UART_SetConfig+0x218>
 800c6dc:	4b45      	ldr	r3, [pc, #276]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c6e6:	2bc0      	cmp	r3, #192	; 0xc0
 800c6e8:	d016      	beq.n	800c718 <UART_SetConfig+0x208>
 800c6ea:	2bc0      	cmp	r3, #192	; 0xc0
 800c6ec:	d818      	bhi.n	800c720 <UART_SetConfig+0x210>
 800c6ee:	2b80      	cmp	r3, #128	; 0x80
 800c6f0:	d00a      	beq.n	800c708 <UART_SetConfig+0x1f8>
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d814      	bhi.n	800c720 <UART_SetConfig+0x210>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <UART_SetConfig+0x1f0>
 800c6fa:	2b40      	cmp	r3, #64	; 0x40
 800c6fc:	d008      	beq.n	800c710 <UART_SetConfig+0x200>
 800c6fe:	e00f      	b.n	800c720 <UART_SetConfig+0x210>
 800c700:	2300      	movs	r3, #0
 800c702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c706:	e082      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c708:	2302      	movs	r3, #2
 800c70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c70e:	e07e      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c710:	2304      	movs	r3, #4
 800c712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c716:	e07a      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c71e:	e076      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c720:	2310      	movs	r3, #16
 800c722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c726:	e072      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a35      	ldr	r2, [pc, #212]	; (800c804 <UART_SetConfig+0x2f4>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d12a      	bne.n	800c788 <UART_SetConfig+0x278>
 800c732:	4b30      	ldr	r3, [pc, #192]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c740:	d01a      	beq.n	800c778 <UART_SetConfig+0x268>
 800c742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c746:	d81b      	bhi.n	800c780 <UART_SetConfig+0x270>
 800c748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c74c:	d00c      	beq.n	800c768 <UART_SetConfig+0x258>
 800c74e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c752:	d815      	bhi.n	800c780 <UART_SetConfig+0x270>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d003      	beq.n	800c760 <UART_SetConfig+0x250>
 800c758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c75c:	d008      	beq.n	800c770 <UART_SetConfig+0x260>
 800c75e:	e00f      	b.n	800c780 <UART_SetConfig+0x270>
 800c760:	2300      	movs	r3, #0
 800c762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c766:	e052      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c768:	2302      	movs	r3, #2
 800c76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c76e:	e04e      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c770:	2304      	movs	r3, #4
 800c772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c776:	e04a      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c778:	2308      	movs	r3, #8
 800c77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c77e:	e046      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c780:	2310      	movs	r3, #16
 800c782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c786:	e042      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a17      	ldr	r2, [pc, #92]	; (800c7ec <UART_SetConfig+0x2dc>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d13a      	bne.n	800c808 <UART_SetConfig+0x2f8>
 800c792:	4b18      	ldr	r3, [pc, #96]	; (800c7f4 <UART_SetConfig+0x2e4>)
 800c794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c79c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7a0:	d01a      	beq.n	800c7d8 <UART_SetConfig+0x2c8>
 800c7a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7a6:	d81b      	bhi.n	800c7e0 <UART_SetConfig+0x2d0>
 800c7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7ac:	d00c      	beq.n	800c7c8 <UART_SetConfig+0x2b8>
 800c7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7b2:	d815      	bhi.n	800c7e0 <UART_SetConfig+0x2d0>
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <UART_SetConfig+0x2b0>
 800c7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7bc:	d008      	beq.n	800c7d0 <UART_SetConfig+0x2c0>
 800c7be:	e00f      	b.n	800c7e0 <UART_SetConfig+0x2d0>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7c6:	e022      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ce:	e01e      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c7d0:	2304      	movs	r3, #4
 800c7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7d6:	e01a      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c7d8:	2308      	movs	r3, #8
 800c7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7de:	e016      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c7e0:	2310      	movs	r3, #16
 800c7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7e6:	e012      	b.n	800c80e <UART_SetConfig+0x2fe>
 800c7e8:	cfff69f3 	.word	0xcfff69f3
 800c7ec:	40008000 	.word	0x40008000
 800c7f0:	40013800 	.word	0x40013800
 800c7f4:	40021000 	.word	0x40021000
 800c7f8:	40004400 	.word	0x40004400
 800c7fc:	40004800 	.word	0x40004800
 800c800:	40004c00 	.word	0x40004c00
 800c804:	40005000 	.word	0x40005000
 800c808:	2310      	movs	r3, #16
 800c80a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4aae      	ldr	r2, [pc, #696]	; (800cacc <UART_SetConfig+0x5bc>)
 800c814:	4293      	cmp	r3, r2
 800c816:	f040 8097 	bne.w	800c948 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c81a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c81e:	2b08      	cmp	r3, #8
 800c820:	d823      	bhi.n	800c86a <UART_SetConfig+0x35a>
 800c822:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <UART_SetConfig+0x318>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c84d 	.word	0x0800c84d
 800c82c:	0800c86b 	.word	0x0800c86b
 800c830:	0800c855 	.word	0x0800c855
 800c834:	0800c86b 	.word	0x0800c86b
 800c838:	0800c85b 	.word	0x0800c85b
 800c83c:	0800c86b 	.word	0x0800c86b
 800c840:	0800c86b 	.word	0x0800c86b
 800c844:	0800c86b 	.word	0x0800c86b
 800c848:	0800c863 	.word	0x0800c863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c84c:	f7fe f8ee 	bl	800aa2c <HAL_RCC_GetPCLK1Freq>
 800c850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c852:	e010      	b.n	800c876 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c854:	4b9e      	ldr	r3, [pc, #632]	; (800cad0 <UART_SetConfig+0x5c0>)
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c858:	e00d      	b.n	800c876 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c85a:	f7fe f879 	bl	800a950 <HAL_RCC_GetSysClockFreq>
 800c85e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c860:	e009      	b.n	800c876 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c868:	e005      	b.n	800c876 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c874:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 8130 	beq.w	800cade <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	4a94      	ldr	r2, [pc, #592]	; (800cad4 <UART_SetConfig+0x5c4>)
 800c884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c888:	461a      	mov	r2, r3
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c890:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	4613      	mov	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	4413      	add	r3, r2
 800c89c:	69ba      	ldr	r2, [r7, #24]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d305      	bcc.n	800c8ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8a8:	69ba      	ldr	r2, [r7, #24]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d903      	bls.n	800c8b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c8b4:	e113      	b.n	800cade <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	60fa      	str	r2, [r7, #12]
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	4a84      	ldr	r2, [pc, #528]	; (800cad4 <UART_SetConfig+0x5c4>)
 800c8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	603b      	str	r3, [r7, #0]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8d8:	f7f4 f8bc 	bl	8000a54 <__aeabi_uldivmod>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	f04f 0200 	mov.w	r2, #0
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	020b      	lsls	r3, r1, #8
 800c8ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8f2:	0202      	lsls	r2, r0, #8
 800c8f4:	6979      	ldr	r1, [r7, #20]
 800c8f6:	6849      	ldr	r1, [r1, #4]
 800c8f8:	0849      	lsrs	r1, r1, #1
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	4605      	mov	r5, r0
 800c900:	eb12 0804 	adds.w	r8, r2, r4
 800c904:	eb43 0905 	adc.w	r9, r3, r5
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	469a      	mov	sl, r3
 800c910:	4693      	mov	fp, r2
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	4640      	mov	r0, r8
 800c918:	4649      	mov	r1, r9
 800c91a:	f7f4 f89b 	bl	8000a54 <__aeabi_uldivmod>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4613      	mov	r3, r2
 800c924:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c92c:	d308      	bcc.n	800c940 <UART_SetConfig+0x430>
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c934:	d204      	bcs.n	800c940 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6a3a      	ldr	r2, [r7, #32]
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	e0ce      	b.n	800cade <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c946:	e0ca      	b.n	800cade <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c950:	d166      	bne.n	800ca20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c952:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c956:	2b08      	cmp	r3, #8
 800c958:	d827      	bhi.n	800c9aa <UART_SetConfig+0x49a>
 800c95a:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <UART_SetConfig+0x450>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c985 	.word	0x0800c985
 800c964:	0800c98d 	.word	0x0800c98d
 800c968:	0800c995 	.word	0x0800c995
 800c96c:	0800c9ab 	.word	0x0800c9ab
 800c970:	0800c99b 	.word	0x0800c99b
 800c974:	0800c9ab 	.word	0x0800c9ab
 800c978:	0800c9ab 	.word	0x0800c9ab
 800c97c:	0800c9ab 	.word	0x0800c9ab
 800c980:	0800c9a3 	.word	0x0800c9a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c984:	f7fe f852 	bl	800aa2c <HAL_RCC_GetPCLK1Freq>
 800c988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c98a:	e014      	b.n	800c9b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c98c:	f7fe f864 	bl	800aa58 <HAL_RCC_GetPCLK2Freq>
 800c990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c992:	e010      	b.n	800c9b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c994:	4b4e      	ldr	r3, [pc, #312]	; (800cad0 <UART_SetConfig+0x5c0>)
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c998:	e00d      	b.n	800c9b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c99a:	f7fd ffd9 	bl	800a950 <HAL_RCC_GetSysClockFreq>
 800c99e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9a0:	e009      	b.n	800c9b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c9a8:	e005      	b.n	800c9b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c9b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 8090 	beq.w	800cade <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c2:	4a44      	ldr	r2, [pc, #272]	; (800cad4 <UART_SetConfig+0x5c4>)
 800c9c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d0:	005a      	lsls	r2, r3, #1
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	085b      	lsrs	r3, r3, #1
 800c9d8:	441a      	add	r2, r3
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	2b0f      	cmp	r3, #15
 800c9e8:	d916      	bls.n	800ca18 <UART_SetConfig+0x508>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f0:	d212      	bcs.n	800ca18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f023 030f 	bic.w	r3, r3, #15
 800c9fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	085b      	lsrs	r3, r3, #1
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	8bfb      	ldrh	r3, [r7, #30]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	8bfa      	ldrh	r2, [r7, #30]
 800ca14:	60da      	str	r2, [r3, #12]
 800ca16:	e062      	b.n	800cade <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca1e:	e05e      	b.n	800cade <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d828      	bhi.n	800ca7a <UART_SetConfig+0x56a>
 800ca28:	a201      	add	r2, pc, #4	; (adr r2, 800ca30 <UART_SetConfig+0x520>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800ca55 	.word	0x0800ca55
 800ca34:	0800ca5d 	.word	0x0800ca5d
 800ca38:	0800ca65 	.word	0x0800ca65
 800ca3c:	0800ca7b 	.word	0x0800ca7b
 800ca40:	0800ca6b 	.word	0x0800ca6b
 800ca44:	0800ca7b 	.word	0x0800ca7b
 800ca48:	0800ca7b 	.word	0x0800ca7b
 800ca4c:	0800ca7b 	.word	0x0800ca7b
 800ca50:	0800ca73 	.word	0x0800ca73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca54:	f7fd ffea 	bl	800aa2c <HAL_RCC_GetPCLK1Freq>
 800ca58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca5a:	e014      	b.n	800ca86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca5c:	f7fd fffc 	bl	800aa58 <HAL_RCC_GetPCLK2Freq>
 800ca60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca62:	e010      	b.n	800ca86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca64:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <UART_SetConfig+0x5c0>)
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca68:	e00d      	b.n	800ca86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca6a:	f7fd ff71 	bl	800a950 <HAL_RCC_GetSysClockFreq>
 800ca6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca70:	e009      	b.n	800ca86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca78:	e005      	b.n	800ca86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ca84:	bf00      	nop
    }

    if (pclk != 0U)
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d028      	beq.n	800cade <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <UART_SetConfig+0x5c4>)
 800ca92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca96:	461a      	mov	r2, r3
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	085b      	lsrs	r3, r3, #1
 800caa4:	441a      	add	r2, r3
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800caae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	2b0f      	cmp	r3, #15
 800cab4:	d910      	bls.n	800cad8 <UART_SetConfig+0x5c8>
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cabc:	d20c      	bcs.n	800cad8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60da      	str	r2, [r3, #12]
 800cac8:	e009      	b.n	800cade <UART_SetConfig+0x5ce>
 800caca:	bf00      	nop
 800cacc:	40008000 	.word	0x40008000
 800cad0:	00f42400 	.word	0x00f42400
 800cad4:	0800ea58 	.word	0x0800ea58
      }
      else
      {
        ret = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2201      	movs	r2, #1
 800caea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2200      	movs	r2, #0
 800caf2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2200      	movs	r2, #0
 800caf8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cafa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3730      	adds	r7, #48	; 0x30
 800cb02:	46bd      	mov	sp, r7
 800cb04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb14:	f003 0308 	and.w	r3, r3, #8
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00a      	beq.n	800cb32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00a      	beq.n	800cb54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00a      	beq.n	800cb76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7a:	f003 0304 	and.w	r3, r3, #4
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00a      	beq.n	800cb98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9c:	f003 0310 	and.w	r3, r3, #16
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00a      	beq.n	800cbba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01a      	beq.n	800cc1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc06:	d10a      	bne.n	800cc1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	605a      	str	r2, [r3, #4]
  }
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b098      	sub	sp, #96	; 0x60
 800cc50:	af02      	add	r7, sp, #8
 800cc52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc5c:	f7f8 fc6a 	bl	8005534 <HAL_GetTick>
 800cc60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 0308 	and.w	r3, r3, #8
 800cc6c:	2b08      	cmp	r3, #8
 800cc6e:	d12f      	bne.n	800ccd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f88e 	bl	800cda0 <UART_WaitOnFlagUntilTimeout>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d022      	beq.n	800ccd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc9e:	653b      	str	r3, [r7, #80]	; 0x50
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	461a      	mov	r2, r3
 800cca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ccb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e6      	bne.n	800cc8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2220      	movs	r2, #32
 800ccc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e063      	b.n	800cd98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0304 	and.w	r3, r3, #4
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d149      	bne.n	800cd72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cce6:	2200      	movs	r2, #0
 800cce8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f857 	bl	800cda0 <UART_WaitOnFlagUntilTimeout>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d03c      	beq.n	800cd72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	623b      	str	r3, [r7, #32]
   return(result);
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	461a      	mov	r2, r3
 800cd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd16:	633b      	str	r3, [r7, #48]	; 0x30
 800cd18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e6      	bne.n	800ccf8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	e853 3f00 	ldrex	r3, [r3]
 800cd38:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f023 0301 	bic.w	r3, r3, #1
 800cd40:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3308      	adds	r3, #8
 800cd48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd4a:	61fa      	str	r2, [r7, #28]
 800cd4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4e:	69b9      	ldr	r1, [r7, #24]
 800cd50:	69fa      	ldr	r2, [r7, #28]
 800cd52:	e841 2300 	strex	r3, r2, [r1]
 800cd56:	617b      	str	r3, [r7, #20]
   return(result);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1e5      	bne.n	800cd2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	e012      	b.n	800cd98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2220      	movs	r2, #32
 800cd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3758      	adds	r7, #88	; 0x58
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	4613      	mov	r3, r2
 800cdae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdb0:	e04f      	b.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb8:	d04b      	beq.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdba:	f7f8 fbbb 	bl	8005534 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d302      	bcc.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e04e      	b.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 0304 	and.w	r3, r3, #4
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d037      	beq.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b80      	cmp	r3, #128	; 0x80
 800cde6:	d034      	beq.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b40      	cmp	r3, #64	; 0x40
 800cdec:	d031      	beq.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	f003 0308 	and.w	r3, r3, #8
 800cdf8:	2b08      	cmp	r3, #8
 800cdfa:	d110      	bne.n	800ce1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2208      	movs	r2, #8
 800ce02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f95b 	bl	800d0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2208      	movs	r2, #8
 800ce0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e029      	b.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce2c:	d111      	bne.n	800ce52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 f941 	bl	800d0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e00f      	b.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	69da      	ldr	r2, [r3, #28]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	bf0c      	ite	eq
 800ce62:	2301      	moveq	r3, #1
 800ce64:	2300      	movne	r3, #0
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	461a      	mov	r2, r3
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d0a0      	beq.n	800cdb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b0a3      	sub	sp, #140	; 0x8c
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4613      	mov	r3, r2
 800ce88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	88fa      	ldrh	r2, [r7, #6]
 800ce94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	88fa      	ldrh	r2, [r7, #6]
 800ce9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceae:	d10e      	bne.n	800cece <UART_Start_Receive_IT+0x52>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d105      	bne.n	800cec4 <UART_Start_Receive_IT+0x48>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cebe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cec2:	e02d      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	22ff      	movs	r2, #255	; 0xff
 800cec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cecc:	e028      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10d      	bne.n	800cef2 <UART_Start_Receive_IT+0x76>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d104      	bne.n	800cee8 <UART_Start_Receive_IT+0x6c>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	22ff      	movs	r2, #255	; 0xff
 800cee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cee6:	e01b      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	227f      	movs	r2, #127	; 0x7f
 800ceec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cef0:	e016      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cefa:	d10d      	bne.n	800cf18 <UART_Start_Receive_IT+0x9c>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d104      	bne.n	800cf0e <UART_Start_Receive_IT+0x92>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	227f      	movs	r2, #127	; 0x7f
 800cf08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf0c:	e008      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	223f      	movs	r2, #63	; 0x3f
 800cf12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf16:	e003      	b.n	800cf20 <UART_Start_Receive_IT+0xa4>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2222      	movs	r2, #34	; 0x22
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3308      	adds	r3, #8
 800cf36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf3a:	e853 3f00 	ldrex	r3, [r3]
 800cf3e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cf40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf42:	f043 0301 	orr.w	r3, r3, #1
 800cf46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cf54:	673a      	str	r2, [r7, #112]	; 0x70
 800cf56:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf58:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cf5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf5c:	e841 2300 	strex	r3, r2, [r1]
 800cf60:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cf62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e3      	bne.n	800cf30 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf70:	d14f      	bne.n	800d012 <UART_Start_Receive_IT+0x196>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cf78:	88fa      	ldrh	r2, [r7, #6]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d349      	bcc.n	800d012 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf86:	d107      	bne.n	800cf98 <UART_Start_Receive_IT+0x11c>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d103      	bne.n	800cf98 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4a47      	ldr	r2, [pc, #284]	; (800d0b0 <UART_Start_Receive_IT+0x234>)
 800cf94:	675a      	str	r2, [r3, #116]	; 0x74
 800cf96:	e002      	b.n	800cf9e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	4a46      	ldr	r2, [pc, #280]	; (800d0b4 <UART_Start_Receive_IT+0x238>)
 800cf9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d01a      	beq.n	800cfdc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfae:	e853 3f00 	ldrex	r3, [r3]
 800cfb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cfc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfd0:	e841 2300 	strex	r3, r2, [r1]
 800cfd4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cfd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1e4      	bne.n	800cfa6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe6:	e853 3f00 	ldrex	r3, [r3]
 800cfea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3308      	adds	r3, #8
 800cffa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cffc:	64ba      	str	r2, [r7, #72]	; 0x48
 800cffe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d000:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d004:	e841 2300 	strex	r3, r2, [r1]
 800d008:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1e5      	bne.n	800cfdc <UART_Start_Receive_IT+0x160>
 800d010:	e046      	b.n	800d0a0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d01a:	d107      	bne.n	800d02c <UART_Start_Receive_IT+0x1b0>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	4a24      	ldr	r2, [pc, #144]	; (800d0b8 <UART_Start_Receive_IT+0x23c>)
 800d028:	675a      	str	r2, [r3, #116]	; 0x74
 800d02a:	e002      	b.n	800d032 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4a23      	ldr	r2, [pc, #140]	; (800d0bc <UART_Start_Receive_IT+0x240>)
 800d030:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d019      	beq.n	800d06e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	e853 3f00 	ldrex	r3, [r3]
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d04e:	677b      	str	r3, [r7, #116]	; 0x74
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	461a      	mov	r2, r3
 800d056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d058:	637b      	str	r3, [r7, #52]	; 0x34
 800d05a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d05e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d060:	e841 2300 	strex	r3, r2, [r1]
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e6      	bne.n	800d03a <UART_Start_Receive_IT+0x1be>
 800d06c:	e018      	b.n	800d0a0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	e853 3f00 	ldrex	r3, [r3]
 800d07a:	613b      	str	r3, [r7, #16]
   return(result);
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	f043 0320 	orr.w	r3, r3, #32
 800d082:	67bb      	str	r3, [r7, #120]	; 0x78
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d08c:	623b      	str	r3, [r7, #32]
 800d08e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	69f9      	ldr	r1, [r7, #28]
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	e841 2300 	strex	r3, r2, [r1]
 800d098:	61bb      	str	r3, [r7, #24]
   return(result);
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e6      	bne.n	800d06e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	378c      	adds	r7, #140	; 0x8c
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	0800dc25 	.word	0x0800dc25
 800d0b4:	0800d8c5 	.word	0x0800d8c5
 800d0b8:	0800d70d 	.word	0x0800d70d
 800d0bc:	0800d555 	.word	0x0800d555

0800d0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b095      	sub	sp, #84	; 0x54
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d0:	e853 3f00 	ldrex	r3, [r3]
 800d0d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d0e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ee:	e841 2300 	strex	r3, r2, [r1]
 800d0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1e6      	bne.n	800d0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3308      	adds	r3, #8
 800d100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	61fb      	str	r3, [r7, #28]
   return(result);
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d110:	f023 0301 	bic.w	r3, r3, #1
 800d114:	64bb      	str	r3, [r7, #72]	; 0x48
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3308      	adds	r3, #8
 800d11c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d11e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e3      	bne.n	800d0fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d136:	2b01      	cmp	r3, #1
 800d138:	d118      	bne.n	800d16c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	60bb      	str	r3, [r7, #8]
   return(result);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f023 0310 	bic.w	r3, r3, #16
 800d14e:	647b      	str	r3, [r7, #68]	; 0x44
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d158:	61bb      	str	r3, [r7, #24]
 800d15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	6979      	ldr	r1, [r7, #20]
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	613b      	str	r3, [r7, #16]
   return(result);
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e6      	bne.n	800d13a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2220      	movs	r2, #32
 800d170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d180:	bf00      	nop
 800d182:	3754      	adds	r7, #84	; 0x54
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff f99a 	bl	800c4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1b0:	bf00      	nop
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b08f      	sub	sp, #60	; 0x3c
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c6:	2b21      	cmp	r3, #33	; 0x21
 800d1c8:	d14c      	bne.n	800d264 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d132      	bne.n	800d23c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	e853 3f00 	ldrex	r3, [r3]
 800d1e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1fc:	e841 2300 	strex	r3, r2, [r1]
 800d200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e6      	bne.n	800d1d6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	60bb      	str	r3, [r7, #8]
   return(result);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d21c:	633b      	str	r3, [r7, #48]	; 0x30
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	61bb      	str	r3, [r7, #24]
 800d228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22a:	6979      	ldr	r1, [r7, #20]
 800d22c:	69ba      	ldr	r2, [r7, #24]
 800d22e:	e841 2300 	strex	r3, r2, [r1]
 800d232:	613b      	str	r3, [r7, #16]
   return(result);
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1e6      	bne.n	800d208 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d23a:	e013      	b.n	800d264 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d240:	781a      	ldrb	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d258:	b29b      	uxth	r3, r3
 800d25a:	3b01      	subs	r3, #1
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800d264:	bf00      	nop
 800d266:	373c      	adds	r7, #60	; 0x3c
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d270:	b480      	push	{r7}
 800d272:	b091      	sub	sp, #68	; 0x44
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d27e:	2b21      	cmp	r3, #33	; 0x21
 800d280:	d151      	bne.n	800d326 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d288:	b29b      	uxth	r3, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d132      	bne.n	800d2f4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	e853 3f00 	ldrex	r3, [r3]
 800d29a:	623b      	str	r3, [r7, #32]
   return(result);
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d2ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e6      	bne.n	800d28e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	e853 3f00 	ldrex	r3, [r3]
 800d2cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2de:	61fb      	str	r3, [r7, #28]
 800d2e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e2:	69b9      	ldr	r1, [r7, #24]
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	e841 2300 	strex	r3, r2, [r1]
 800d2ea:	617b      	str	r3, [r7, #20]
   return(result);
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1e6      	bne.n	800d2c0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d2f2:	e018      	b.n	800d326 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d308:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d30e:	1c9a      	adds	r2, r3, #2
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	3b01      	subs	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800d326:	bf00      	nop
 800d328:	3744      	adds	r7, #68	; 0x44
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d332:	b480      	push	{r7}
 800d334:	b091      	sub	sp, #68	; 0x44
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d340:	2b21      	cmp	r3, #33	; 0x21
 800d342:	d160      	bne.n	800d406 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d34a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d34c:	e057      	b.n	800d3fe <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d354:	b29b      	uxth	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d133      	bne.n	800d3c2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3308      	adds	r3, #8
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	e853 3f00 	ldrex	r3, [r3]
 800d368:	623b      	str	r3, [r7, #32]
   return(result);
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d370:	63bb      	str	r3, [r7, #56]	; 0x38
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3308      	adds	r3, #8
 800d378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d37a:	633a      	str	r2, [r7, #48]	; 0x30
 800d37c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d382:	e841 2300 	strex	r3, r2, [r1]
 800d386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1e5      	bne.n	800d35a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	e853 3f00 	ldrex	r3, [r3]
 800d39a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ac:	61fb      	str	r3, [r7, #28]
 800d3ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b0:	69b9      	ldr	r1, [r7, #24]
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	e841 2300 	strex	r3, r2, [r1]
 800d3b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e6      	bne.n	800d38e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d3c0:	e021      	b.n	800d406 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69db      	ldr	r3, [r3, #28]
 800d3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d013      	beq.n	800d3f8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3d4:	781a      	ldrb	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d3f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d3fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1a4      	bne.n	800d34e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d404:	e7ff      	b.n	800d406 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d406:	bf00      	nop
 800d408:	3744      	adds	r7, #68	; 0x44
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d412:	b480      	push	{r7}
 800d414:	b091      	sub	sp, #68	; 0x44
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d420:	2b21      	cmp	r3, #33	; 0x21
 800d422:	d165      	bne.n	800d4f0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d42a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d42c:	e05c      	b.n	800d4e8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d434:	b29b      	uxth	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d133      	bne.n	800d4a2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3308      	adds	r3, #8
 800d440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	e853 3f00 	ldrex	r3, [r3]
 800d448:	61fb      	str	r3, [r7, #28]
   return(result);
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d450:	637b      	str	r3, [r7, #52]	; 0x34
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d45a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d45c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1e5      	bne.n	800d43a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	e853 3f00 	ldrex	r3, [r3]
 800d47a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d482:	633b      	str	r3, [r7, #48]	; 0x30
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	61bb      	str	r3, [r7, #24]
 800d48e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d490:	6979      	ldr	r1, [r7, #20]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	e841 2300 	strex	r3, r2, [r1]
 800d498:	613b      	str	r3, [r7, #16]
   return(result);
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1e6      	bne.n	800d46e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d4a0:	e026      	b.n	800d4f0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	69db      	ldr	r3, [r3, #28]
 800d4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d018      	beq.n	800d4e2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4c4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ca:	1c9a      	adds	r2, r3, #2
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d4e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d4e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d19f      	bne.n	800d42e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d4ee:	e7ff      	b.n	800d4f0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d4f0:	bf00      	nop
 800d4f2:	3744      	adds	r7, #68	; 0x44
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b088      	sub	sp, #32
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	e853 3f00 	ldrex	r3, [r3]
 800d510:	60bb      	str	r3, [r7, #8]
   return(result);
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	61bb      	str	r3, [r7, #24]
 800d524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6979      	ldr	r1, [r7, #20]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	613b      	str	r3, [r7, #16]
   return(result);
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e6      	bne.n	800d504 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2220      	movs	r2, #32
 800d53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7fe ffc3 	bl	800c4d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d54a:	bf00      	nop
 800d54c:	3720      	adds	r7, #32
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b09c      	sub	sp, #112	; 0x70
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d562:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d56c:	2b22      	cmp	r3, #34	; 0x22
 800d56e:	f040 80be 	bne.w	800d6ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d57c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d580:	b2d9      	uxtb	r1, r3
 800d582:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d586:	b2da      	uxtb	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d58c:	400a      	ands	r2, r1
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f040 80a1 	bne.w	800d6fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c4:	e853 3f00 	ldrex	r3, [r3]
 800d5c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5da:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5e2:	e841 2300 	strex	r3, r2, [r1]
 800d5e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1e6      	bne.n	800d5bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	e853 3f00 	ldrex	r3, [r3]
 800d5fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d600:	f023 0301 	bic.w	r3, r3, #1
 800d604:	667b      	str	r3, [r7, #100]	; 0x64
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3308      	adds	r3, #8
 800d60c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d60e:	647a      	str	r2, [r7, #68]	; 0x44
 800d610:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d616:	e841 2300 	strex	r3, r2, [r1]
 800d61a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1e5      	bne.n	800d5ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a33      	ldr	r2, [pc, #204]	; (800d708 <UART_RxISR_8BIT+0x1b4>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d01f      	beq.n	800d680 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d018      	beq.n	800d680 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	623b      	str	r3, [r7, #32]
   return(result);
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d662:	663b      	str	r3, [r7, #96]	; 0x60
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d66c:	633b      	str	r3, [r7, #48]	; 0x30
 800d66e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e6      	bne.n	800d64e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d684:	2b01      	cmp	r3, #1
 800d686:	d12e      	bne.n	800d6e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	e853 3f00 	ldrex	r3, [r3]
 800d69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f023 0310 	bic.w	r3, r3, #16
 800d6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ac:	61fb      	str	r3, [r7, #28]
 800d6ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b0:	69b9      	ldr	r1, [r7, #24]
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	e841 2300 	strex	r3, r2, [r1]
 800d6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1e6      	bne.n	800d68e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	69db      	ldr	r3, [r3, #28]
 800d6c6:	f003 0310 	and.w	r3, r3, #16
 800d6ca:	2b10      	cmp	r3, #16
 800d6cc:	d103      	bne.n	800d6d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2210      	movs	r2, #16
 800d6d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7fe ff0a 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6e4:	e00b      	b.n	800d6fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7f5 fc74 	bl	8002fd4 <HAL_UART_RxCpltCallback>
}
 800d6ec:	e007      	b.n	800d6fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	699a      	ldr	r2, [r3, #24]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f042 0208 	orr.w	r2, r2, #8
 800d6fc:	619a      	str	r2, [r3, #24]
}
 800d6fe:	bf00      	nop
 800d700:	3770      	adds	r7, #112	; 0x70
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	40008000 	.word	0x40008000

0800d70c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b09c      	sub	sp, #112	; 0x70
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d71a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d724:	2b22      	cmp	r3, #34	; 0x22
 800d726:	f040 80be 	bne.w	800d8a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d738:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d73a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d73e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d742:	4013      	ands	r3, r2
 800d744:	b29a      	uxth	r2, r3
 800d746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d748:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d74e:	1c9a      	adds	r2, r3, #2
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	3b01      	subs	r3, #1
 800d75e:	b29a      	uxth	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f040 80a1 	bne.w	800d8b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d788:	667b      	str	r3, [r7, #100]	; 0x64
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	461a      	mov	r2, r3
 800d790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d792:	657b      	str	r3, [r7, #84]	; 0x54
 800d794:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d79a:	e841 2300 	strex	r3, r2, [r1]
 800d79e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e6      	bne.n	800d774 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	f023 0301 	bic.w	r3, r3, #1
 800d7bc:	663b      	str	r3, [r7, #96]	; 0x60
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7c6:	643a      	str	r2, [r7, #64]	; 0x40
 800d7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e5      	bne.n	800d7a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2220      	movs	r2, #32
 800d7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a33      	ldr	r2, [pc, #204]	; (800d8c0 <UART_RxISR_16BIT+0x1b4>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d01f      	beq.n	800d838 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d018      	beq.n	800d838 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	e853 3f00 	ldrex	r3, [r3]
 800d812:	61fb      	str	r3, [r7, #28]
   return(result);
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d81a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	461a      	mov	r2, r3
 800d822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d824:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d826:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d82c:	e841 2300 	strex	r3, r2, [r1]
 800d830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1e6      	bne.n	800d806 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d12e      	bne.n	800d89e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	e853 3f00 	ldrex	r3, [r3]
 800d852:	60bb      	str	r3, [r7, #8]
   return(result);
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f023 0310 	bic.w	r3, r3, #16
 800d85a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d864:	61bb      	str	r3, [r7, #24]
 800d866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d868:	6979      	ldr	r1, [r7, #20]
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	e841 2300 	strex	r3, r2, [r1]
 800d870:	613b      	str	r3, [r7, #16]
   return(result);
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e6      	bne.n	800d846 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	69db      	ldr	r3, [r3, #28]
 800d87e:	f003 0310 	and.w	r3, r3, #16
 800d882:	2b10      	cmp	r3, #16
 800d884:	d103      	bne.n	800d88e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2210      	movs	r2, #16
 800d88c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7fe fe2e 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d89c:	e00b      	b.n	800d8b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7f5 fb98 	bl	8002fd4 <HAL_UART_RxCpltCallback>
}
 800d8a4:	e007      	b.n	800d8b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	699a      	ldr	r2, [r3, #24]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f042 0208 	orr.w	r2, r2, #8
 800d8b4:	619a      	str	r2, [r3, #24]
}
 800d8b6:	bf00      	nop
 800d8b8:	3770      	adds	r7, #112	; 0x70
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	40008000 	.word	0x40008000

0800d8c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b0ac      	sub	sp, #176	; 0xb0
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	69db      	ldr	r3, [r3, #28]
 800d8dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8fa:	2b22      	cmp	r3, #34	; 0x22
 800d8fc:	f040 8182 	bne.w	800dc04 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d906:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d90a:	e125      	b.n	800db58 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d912:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d916:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d91a:	b2d9      	uxtb	r1, r3
 800d91c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d920:	b2da      	uxtb	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d926:	400a      	ands	r2, r1
 800d928:	b2d2      	uxtb	r2, r2
 800d92a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	3b01      	subs	r3, #1
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d053      	beq.n	800da06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d95e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	2b00      	cmp	r3, #0
 800d968:	d011      	beq.n	800d98e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d96a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00b      	beq.n	800d98e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2201      	movs	r2, #1
 800d97c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d984:	f043 0201 	orr.w	r2, r3, #1
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d98e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d992:	f003 0302 	and.w	r3, r3, #2
 800d996:	2b00      	cmp	r3, #0
 800d998:	d011      	beq.n	800d9be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d99a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9b4:	f043 0204 	orr.w	r2, r3, #4
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9c2:	f003 0304 	and.w	r3, r3, #4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d011      	beq.n	800d9ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00b      	beq.n	800d9ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2204      	movs	r2, #4
 800d9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e4:	f043 0202 	orr.w	r2, r3, #2
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d006      	beq.n	800da06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7fe fd73 	bl	800c4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f040 80a2 	bne.w	800db58 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800da22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800da38:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800da3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800da44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e4      	bne.n	800da14 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3308      	adds	r3, #8
 800da50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da54:	e853 3f00 	ldrex	r3, [r3]
 800da58:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800da5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da60:	f023 0301 	bic.w	r3, r3, #1
 800da64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3308      	adds	r3, #8
 800da6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da72:	66ba      	str	r2, [r7, #104]	; 0x68
 800da74:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800da78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800da80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e1      	bne.n	800da4a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a5f      	ldr	r2, [pc, #380]	; (800dc1c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d021      	beq.n	800dae8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01a      	beq.n	800dae8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daba:	e853 3f00 	ldrex	r3, [r3]
 800dabe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	461a      	mov	r2, r3
 800dad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dad4:	657b      	str	r3, [r7, #84]	; 0x54
 800dad6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dada:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dadc:	e841 2300 	strex	r3, r2, [r1]
 800dae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1e4      	bne.n	800dab2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daec:	2b01      	cmp	r3, #1
 800daee:	d130      	bne.n	800db52 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafe:	e853 3f00 	ldrex	r3, [r3]
 800db02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	f023 0310 	bic.w	r3, r3, #16
 800db0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db18:	643b      	str	r3, [r7, #64]	; 0x40
 800db1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db20:	e841 2300 	strex	r3, r2, [r1]
 800db24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1e4      	bne.n	800daf6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	f003 0310 	and.w	r3, r3, #16
 800db36:	2b10      	cmp	r3, #16
 800db38:	d103      	bne.n	800db42 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2210      	movs	r2, #16
 800db40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7fe fcd4 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
 800db50:	e002      	b.n	800db58 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7f5 fa3e 	bl	8002fd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d006      	beq.n	800db6e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800db60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db64:	f003 0320 	and.w	r3, r3, #32
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f47f aecf 	bne.w	800d90c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800db78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d049      	beq.n	800dc14 <UART_RxISR_8BIT_FIFOEN+0x350>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d242      	bcs.n	800dc14 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3308      	adds	r3, #8
 800db94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	e853 3f00 	ldrex	r3, [r3]
 800db9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3308      	adds	r3, #8
 800dbae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dbb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dbb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbba:	e841 2300 	strex	r3, r2, [r1]
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e3      	bne.n	800db8e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a15      	ldr	r2, [pc, #84]	; (800dc20 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dbca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	e853 3f00 	ldrex	r3, [r3]
 800dbd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dbee:	61bb      	str	r3, [r7, #24]
 800dbf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf2:	6979      	ldr	r1, [r7, #20]
 800dbf4:	69ba      	ldr	r2, [r7, #24]
 800dbf6:	e841 2300 	strex	r3, r2, [r1]
 800dbfa:	613b      	str	r3, [r7, #16]
   return(result);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1e4      	bne.n	800dbcc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc02:	e007      	b.n	800dc14 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	699a      	ldr	r2, [r3, #24]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f042 0208 	orr.w	r2, r2, #8
 800dc12:	619a      	str	r2, [r3, #24]
}
 800dc14:	bf00      	nop
 800dc16:	37b0      	adds	r7, #176	; 0xb0
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	40008000 	.word	0x40008000
 800dc20:	0800d555 	.word	0x0800d555

0800dc24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b0ae      	sub	sp, #184	; 0xb8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc32:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc5a:	2b22      	cmp	r3, #34	; 0x22
 800dc5c:	f040 8186 	bne.w	800df6c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc66:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc6a:	e129      	b.n	800dec0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dc7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800dc82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800dc86:	4013      	ands	r3, r2
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc94:	1c9a      	adds	r2, r3, #2
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3b01      	subs	r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	69db      	ldr	r3, [r3, #28]
 800dcb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dcb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d053      	beq.n	800dd6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dcc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d011      	beq.n	800dcf2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800dcce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00b      	beq.n	800dcf2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2201      	movs	r2, #1
 800dce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce8:	f043 0201 	orr.w	r2, r3, #1
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcf6:	f003 0302 	and.w	r3, r3, #2
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d011      	beq.n	800dd22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dcfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00b      	beq.n	800dd22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd18:	f043 0204 	orr.w	r2, r3, #4
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d011      	beq.n	800dd52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dd2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00b      	beq.n	800dd52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2204      	movs	r2, #4
 800dd40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd48:	f043 0202 	orr.w	r2, r3, #2
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d006      	beq.n	800dd6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7fe fbc1 	bl	800c4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f040 80a4 	bne.w	800dec0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd80:	e853 3f00 	ldrex	r3, [r3]
 800dd84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	461a      	mov	r2, r3
 800dd96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dd9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dda2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dda6:	e841 2300 	strex	r3, r2, [r1]
 800ddaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ddac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1e2      	bne.n	800dd78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddbc:	e853 3f00 	ldrex	r3, [r3]
 800ddc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ddc8:	f023 0301 	bic.w	r3, r3, #1
 800ddcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3308      	adds	r3, #8
 800ddd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ddda:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dde0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dde2:	e841 2300 	strex	r3, r2, [r1]
 800dde6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dde8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d1e1      	bne.n	800ddb2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2220      	movs	r2, #32
 800ddf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a5f      	ldr	r2, [pc, #380]	; (800df84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d021      	beq.n	800de50 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d01a      	beq.n	800de50 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de22:	e853 3f00 	ldrex	r3, [r3]
 800de26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800de3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de44:	e841 2300 	strex	r3, r2, [r1]
 800de48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1e4      	bne.n	800de1a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de54:	2b01      	cmp	r3, #1
 800de56:	d130      	bne.n	800deba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	e853 3f00 	ldrex	r3, [r3]
 800de6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6e:	f023 0310 	bic.w	r3, r3, #16
 800de72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de80:	647b      	str	r3, [r7, #68]	; 0x44
 800de82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de88:	e841 2300 	strex	r3, r2, [r1]
 800de8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1e4      	bne.n	800de5e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	f003 0310 	and.w	r3, r3, #16
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d103      	bne.n	800deaa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2210      	movs	r2, #16
 800dea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7fe fb20 	bl	800c4f8 <HAL_UARTEx_RxEventCallback>
 800deb8:	e002      	b.n	800dec0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7f5 f88a 	bl	8002fd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dec0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d006      	beq.n	800ded6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800dec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800decc:	f003 0320 	and.w	r3, r3, #32
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f47f aecb 	bne.w	800dc6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dedc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dee0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d049      	beq.n	800df7c <UART_RxISR_16BIT_FIFOEN+0x358>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800deee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800def2:	429a      	cmp	r2, r3
 800def4:	d242      	bcs.n	800df7c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	3308      	adds	r3, #8
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	623b      	str	r3, [r7, #32]
   return(result);
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3308      	adds	r3, #8
 800df16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df1a:	633a      	str	r2, [r7, #48]	; 0x30
 800df1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e3      	bne.n	800def6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a15      	ldr	r2, [pc, #84]	; (800df88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800df32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	60fb      	str	r3, [r7, #12]
   return(result);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f043 0320 	orr.w	r3, r3, #32
 800df48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	461a      	mov	r2, r3
 800df52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5a:	69b9      	ldr	r1, [r7, #24]
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	e841 2300 	strex	r3, r2, [r1]
 800df62:	617b      	str	r3, [r7, #20]
   return(result);
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e4      	bne.n	800df34 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df6a:	e007      	b.n	800df7c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	699a      	ldr	r2, [r3, #24]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f042 0208 	orr.w	r2, r2, #8
 800df7a:	619a      	str	r2, [r3, #24]
}
 800df7c:	bf00      	nop
 800df7e:	37b8      	adds	r7, #184	; 0xb8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	40008000 	.word	0x40008000
 800df88:	0800d70d 	.word	0x0800d70d

0800df8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d101      	bne.n	800dfde <HAL_UARTEx_DisableFifoMode+0x16>
 800dfda:	2302      	movs	r3, #2
 800dfdc:	e027      	b.n	800e02e <HAL_UARTEx_DisableFifoMode+0x66>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2224      	movs	r2, #36	; 0x24
 800dfea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f022 0201 	bic.w	r2, r2, #1
 800e004:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e00c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2220      	movs	r2, #32
 800e020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b084      	sub	sp, #16
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d101      	bne.n	800e052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e04e:	2302      	movs	r3, #2
 800e050:	e02d      	b.n	800e0ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2224      	movs	r2, #36	; 0x24
 800e05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0201 	bic.w	r2, r2, #1
 800e078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	683a      	ldr	r2, [r7, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f850 	bl	800e134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d101      	bne.n	800e0ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0ca:	2302      	movs	r3, #2
 800e0cc:	e02d      	b.n	800e12a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2224      	movs	r2, #36	; 0x24
 800e0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f022 0201 	bic.w	r2, r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	683a      	ldr	r2, [r7, #0]
 800e106:	430a      	orrs	r2, r1
 800e108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f812 	bl	800e134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2220      	movs	r2, #32
 800e11c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
	...

0800e134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e140:	2b00      	cmp	r3, #0
 800e142:	d108      	bne.n	800e156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e154:	e031      	b.n	800e1ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e156:	2308      	movs	r3, #8
 800e158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e15a:	2308      	movs	r3, #8
 800e15c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	0e5b      	lsrs	r3, r3, #25
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 0307 	and.w	r3, r3, #7
 800e16c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	0f5b      	lsrs	r3, r3, #29
 800e176:	b2db      	uxtb	r3, r3
 800e178:	f003 0307 	and.w	r3, r3, #7
 800e17c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	7b3a      	ldrb	r2, [r7, #12]
 800e182:	4911      	ldr	r1, [pc, #68]	; (800e1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e184:	5c8a      	ldrb	r2, [r1, r2]
 800e186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e18a:	7b3a      	ldrb	r2, [r7, #12]
 800e18c:	490f      	ldr	r1, [pc, #60]	; (800e1cc <UARTEx_SetNbDataToProcess+0x98>)
 800e18e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e190:	fb93 f3f2 	sdiv	r3, r3, r2
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e19c:	7bfb      	ldrb	r3, [r7, #15]
 800e19e:	7b7a      	ldrb	r2, [r7, #13]
 800e1a0:	4909      	ldr	r1, [pc, #36]	; (800e1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e1a2:	5c8a      	ldrb	r2, [r1, r2]
 800e1a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1a8:	7b7a      	ldrb	r2, [r7, #13]
 800e1aa:	4908      	ldr	r1, [pc, #32]	; (800e1cc <UARTEx_SetNbDataToProcess+0x98>)
 800e1ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	0800ea70 	.word	0x0800ea70
 800e1cc:	0800ea78 	.word	0x0800ea78

0800e1d0 <__libc_init_array>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	4d0d      	ldr	r5, [pc, #52]	; (800e208 <__libc_init_array+0x38>)
 800e1d4:	4c0d      	ldr	r4, [pc, #52]	; (800e20c <__libc_init_array+0x3c>)
 800e1d6:	1b64      	subs	r4, r4, r5
 800e1d8:	10a4      	asrs	r4, r4, #2
 800e1da:	2600      	movs	r6, #0
 800e1dc:	42a6      	cmp	r6, r4
 800e1de:	d109      	bne.n	800e1f4 <__libc_init_array+0x24>
 800e1e0:	4d0b      	ldr	r5, [pc, #44]	; (800e210 <__libc_init_array+0x40>)
 800e1e2:	4c0c      	ldr	r4, [pc, #48]	; (800e214 <__libc_init_array+0x44>)
 800e1e4:	f000 f82e 	bl	800e244 <_init>
 800e1e8:	1b64      	subs	r4, r4, r5
 800e1ea:	10a4      	asrs	r4, r4, #2
 800e1ec:	2600      	movs	r6, #0
 800e1ee:	42a6      	cmp	r6, r4
 800e1f0:	d105      	bne.n	800e1fe <__libc_init_array+0x2e>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1f8:	4798      	blx	r3
 800e1fa:	3601      	adds	r6, #1
 800e1fc:	e7ee      	b.n	800e1dc <__libc_init_array+0xc>
 800e1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e202:	4798      	blx	r3
 800e204:	3601      	adds	r6, #1
 800e206:	e7f2      	b.n	800e1ee <__libc_init_array+0x1e>
 800e208:	0800ea88 	.word	0x0800ea88
 800e20c:	0800ea88 	.word	0x0800ea88
 800e210:	0800ea88 	.word	0x0800ea88
 800e214:	0800ea8c 	.word	0x0800ea8c

0800e218 <memcpy>:
 800e218:	440a      	add	r2, r1
 800e21a:	4291      	cmp	r1, r2
 800e21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e220:	d100      	bne.n	800e224 <memcpy+0xc>
 800e222:	4770      	bx	lr
 800e224:	b510      	push	{r4, lr}
 800e226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e22e:	4291      	cmp	r1, r2
 800e230:	d1f9      	bne.n	800e226 <memcpy+0xe>
 800e232:	bd10      	pop	{r4, pc}

0800e234 <memset>:
 800e234:	4402      	add	r2, r0
 800e236:	4603      	mov	r3, r0
 800e238:	4293      	cmp	r3, r2
 800e23a:	d100      	bne.n	800e23e <memset+0xa>
 800e23c:	4770      	bx	lr
 800e23e:	f803 1b01 	strb.w	r1, [r3], #1
 800e242:	e7f9      	b.n	800e238 <memset+0x4>

0800e244 <_init>:
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	bf00      	nop
 800e248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e24a:	bc08      	pop	{r3}
 800e24c:	469e      	mov	lr, r3
 800e24e:	4770      	bx	lr

0800e250 <_fini>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	bf00      	nop
 800e254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e256:	bc08      	pop	{r3}
 800e258:	469e      	mov	lr, r3
 800e25a:	4770      	bx	lr

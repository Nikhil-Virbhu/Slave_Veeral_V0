
Slave_Veeral_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd94  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800bf6c  0800bf6c  0001bf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c78c  0800c78c  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c78c  0800c78c  0001c78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c794  0800c794  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c794  0800c794  0001c794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c798  0800c798  0001c798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800c79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  200001c4  0800c960  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  0800c960  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dce9  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005638  00000000  00000000  0004dedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e0  00000000  00000000  00053518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002168  00000000  00000000  000558f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070cc  00000000  00000000  00057a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030168  00000000  00000000  0005eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013db7f  00000000  00000000  0008ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009930  00000000  00000000  001cc864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bf54 	.word	0x0800bf54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800bf54 	.word	0x0800bf54

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <DAC_Update>:
* Input: NONE
* Output: NONE
*
*/
uint32_t DAC_Update(uint8_t signal)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	float out,gain,offset;
	switch(signal)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	f200 80d8 	bhi.w	8000f1c <DAC_Update+0x1c4>
 8000d6c:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <DAC_Update+0x1c>)
 8000d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d72:	bf00      	nop
 8000d74:	08000d95 	.word	0x08000d95
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000e15 	.word	0x08000e15
 8000d80:	08000e55 	.word	0x08000e55
 8000d84:	08000e93 	.word	0x08000e93
 8000d88:	08000eb5 	.word	0x08000eb5
 8000d8c:	08000ee7 	.word	0x08000ee7
 8000d90:	08000efb 	.word	0x08000efb
	{
		case(1):
			offset = 0.0f; //TBD
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[IAFE].Gain * ConfigPara.calFactor[IAFE].corFac);
 8000d9a:	4b67      	ldr	r3, [pc, #412]	; (8000f38 <DAC_Update+0x1e0>)
 8000d9c:	edd3 6a00 	vldr	s13, [r3]
 8000da0:	4b66      	ldr	r3, [pc, #408]	; (8000f3c <DAC_Update+0x1e4>)
 8000da2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <DAC_Update+0x1e4>)
 8000da8:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8000dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db4:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Iafe[procValue] * gain + offset;
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <DAC_Update+0x1e8>)
 8000dba:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dce:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000dd2:	e0a3      	b.n	8000f1c <DAC_Update+0x1c4>
		case(2):
			offset = 0.0f; //TBD
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[VSUP].Gain * ConfigPara.calFactor[VSUP].corFac);
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <DAC_Update+0x1e0>)
 8000ddc:	edd3 6a00 	vldr	s13, [r3]
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <DAC_Update+0x1e4>)
 8000de2:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8000de6:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <DAC_Update+0x1e4>)
 8000de8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8000dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df4:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Vsup[procValue] * gain + offset;
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <DAC_Update+0x1ec>)
 8000dfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e06:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e12:	e083      	b.n	8000f1c <DAC_Update+0x1c4>

		case(3):
			offset = 0.0f; //TBD
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[ISUP].Gain * ConfigPara.calFactor[ISUP].corFac);
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <DAC_Update+0x1e0>)
 8000e1c:	edd3 6a00 	vldr	s13, [r3]
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <DAC_Update+0x1e4>)
 8000e22:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8000e26:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <DAC_Update+0x1e4>)
 8000e28:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8000e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e34:	edc7 7a03 	vstr	s15, [r7, #12]
			out = Isup[procValue] * gain + offset;
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <DAC_Update+0x1f0>)
 8000e3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000e52:	e063      	b.n	8000f1c <DAC_Update+0x1c4>

		case(4):
			offset = 0.0f; //TBD
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
			gain = VphBase/(ConfigPara.calFactor[ISUP].Gain * ConfigPara.calFactor[ISUP].corFac);
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <DAC_Update+0x1e0>)
 8000e5c:	edd3 6a00 	vldr	s13, [r3]
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <DAC_Update+0x1e4>)
 8000e62:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8000e66:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <DAC_Update+0x1e4>)
 8000e68:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8000e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e74:	edc7 7a03 	vstr	s15, [r7, #12]
			out = DutyRef_R * 1/* gain*/ + offset;
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <DAC_Update+0x1f4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e84:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8000e90:	e044      	b.n	8000f1c <DAC_Update+0x1c4>
		case (5):
			out = (uint16_t)status1.bits.sHealthStatus * 3500;
 8000e92:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <DAC_Update+0x1f8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eae:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000eb2:	e033      	b.n	8000f1c <DAC_Update+0x1c4>
		case (6):
			out = (uint16_t)V_cmd*0.1;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <DAC_Update+0x1fc>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ebe:	ee17 3a90 	vmov	r3, s15
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faf9 	bl	80004bc <__aeabi_i2d>
 8000eca:	a319      	add	r3, pc, #100	; (adr r3, 8000f30 <DAC_Update+0x1d8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb5e 	bl	8000590 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fd6a 	bl	80009b4 <__aeabi_d2f>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	617b      	str	r3, [r7, #20]
		break;
 8000ee4:	e01a      	b.n	8000f1c <DAC_Update+0x1c4>
		case(7):
			out = (uint16_t)Adc_Avg_Buffer[VBUS];
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <DAC_Update+0x200>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef4:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000ef8:	e010      	b.n	8000f1c <DAC_Update+0x1c4>
		case(8):
		out = (uint16_t)fault3.bits.driver_not_ready * 3500;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <DAC_Update+0x204>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000f1a:	bf00      	nop
	}
	return (uint32_t) out;
 8000f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	9999999a 	.word	0x9999999a
 8000f34:	3fb99999 	.word	0x3fb99999
 8000f38:	2000044c 	.word	0x2000044c
 8000f3c:	2000029c 	.word	0x2000029c
 8000f40:	20000470 	.word	0x20000470
 8000f44:	20000458 	.word	0x20000458
 8000f48:	20000464 	.word	0x20000464
 8000f4c:	200004cc 	.word	0x200004cc
 8000f50:	2000054c 	.word	0x2000054c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000268 	.word	0x20000268
 8000f5c:	20000538 	.word	0x20000538

08000f60 <DAC_Out>:
* Input: NONE
* Output: NONE
*
*/
void DAC_Out(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

	dac1 = 8;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <DAC_Out+0x50>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	701a      	strb	r2, [r3, #0]
	dac2 = 5;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <DAC_Out+0x54>)
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	701a      	strb	r2, [r3, #0]
	DAC_value1 = (unsigned int) DAC_Update(dac1);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <DAC_Out+0x50>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff feef 	bl	8000d58 <DAC_Update>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <DAC_Out+0x58>)
 8000f7e:	6013      	str	r3, [r2, #0]
	DAC_value2 = (unsigned int) DAC_Update(dac2);
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <DAC_Out+0x54>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fee7 	bl	8000d58 <DAC_Update>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <DAC_Out+0x5c>)
 8000f8e:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value1);
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <DAC_Out+0x58>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <DAC_Out+0x60>)
 8000f9a:	f005 fc29 	bl	80067f0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAC_value2);
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <DAC_Out+0x5c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <DAC_Out+0x60>)
 8000fa8:	f005 fc22 	bl	80067f0 <HAL_DAC_SetValue>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001e0 	.word	0x200001e0
 8000fb4:	200001e1 	.word	0x200001e1
 8000fb8:	200004d8 	.word	0x200004d8
 8000fbc:	200004dc 	.word	0x200004dc
 8000fc0:	20000784 	.word	0x20000784

08000fc4 <eeprom_crc_generate>:
configParameters configpara_receive;
writeStructureToEeprom((uint8_t*)&ConfigPara, sizeof(ConfigPara));
readStructurefromEeprom((uint8_t*)&configpara_receive, sizeof(configpara_receive));
*/
uint16_t eeprom_crc_generate(uint8_t* config_pointer, uint16_t size_of_structure)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	const uint16_t generator_polynomial = 0x1021;
 8000fd0:	f241 0321 	movw	r3, #4129	; 0x1021
 8000fd4:	81fb      	strh	r3, [r7, #14]
	uint16_t crc = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i=0; i<size_of_structure; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	82bb      	strh	r3, [r7, #20]
 8000fde:	e025      	b.n	800102c <eeprom_crc_generate+0x68>
	{
		crc ^= (uint16_t)((*(config_pointer + i)) << 8);
 8000fe0:	8abb      	ldrh	r3, [r7, #20]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	8afb      	ldrh	r3, [r7, #22]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	82fb      	strh	r3, [r7, #22]

		for (int j = 0; j < 8; j++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e012      	b.n	8001020 <eeprom_crc_generate+0x5c>
		{
			if((crc & 0x8000) != 0)
 8000ffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da08      	bge.n	8001014 <eeprom_crc_generate+0x50>
				crc = (uint16_t)((crc << 1) ^ generator_polynomial);
 8001002:	8afb      	ldrh	r3, [r7, #22]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	b21a      	sxth	r2, r3
 8001008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100c:	4053      	eors	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	82fb      	strh	r3, [r7, #22]
 8001012:	e002      	b.n	800101a <eeprom_crc_generate+0x56>
			else
				crc <<= 1;
 8001014:	8afb      	ldrh	r3, [r7, #22]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3301      	adds	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b07      	cmp	r3, #7
 8001024:	dde9      	ble.n	8000ffa <eeprom_crc_generate+0x36>
	for (uint16_t i=0; i<size_of_structure; i++)
 8001026:	8abb      	ldrh	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	82bb      	strh	r3, [r7, #20]
 800102c:	8aba      	ldrh	r2, [r7, #20]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3d5      	bcc.n	8000fe0 <eeprom_crc_generate+0x1c>
		}
	}
	return crc;
 8001034:	8afb      	ldrh	r3, [r7, #22]
}
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <writeStructureToEeprom>:

void writeStructureToEeprom(uint8_t* config_pointer, uint16_t size_of_structure)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
	if(HAL_I2C_Mem_Write(&hi2c4 , EEPROM_ADDR1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t*)config_pointer, size_of_structure,300) != HAL_OK){
 8001050:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	2200      	movs	r2, #0
 8001062:	21a0      	movs	r1, #160	; 0xa0
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <writeStructureToEeprom+0x88>)
 8001066:	f007 fbf9 	bl	800885c <HAL_I2C_Mem_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <writeStructureToEeprom+0x3c>
//			Error_Handler();
		fault3.bits.eeprom_fault = 1;
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <writeStructureToEeprom+0x8c>)
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 800107a:	200c      	movs	r0, #12
 800107c:	f002 fa8c 	bl	8003598 <add_error_to_list>
		}
	uint16_t eeprom_crc_write = eeprom_crc_generate(config_pointer,size_of_structure);
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff9d 	bl	8000fc4 <eeprom_crc_generate>
 800108a:	4603      	mov	r3, r0
 800108c:	81fb      	strh	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(&hi2c4 , EEPROM_ADDR1, 1000, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&eeprom_crc_write, 2,300) != HAL_OK){
 800108e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2302      	movs	r3, #2
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f107 030e 	add.w	r3, r7, #14
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2302      	movs	r3, #2
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	21a0      	movs	r1, #160	; 0xa0
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <writeStructureToEeprom+0x88>)
 80010a8:	f007 fbd8 	bl	800885c <HAL_I2C_Mem_Write>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <writeStructureToEeprom+0x7e>
		fault3.bits.eeprom_fault = 1;
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <writeStructureToEeprom+0x8c>)
 80010b4:	7813      	ldrb	r3, [r2, #0]
 80010b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ba:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 80010bc:	200c      	movs	r0, #12
 80010be:	f002 fa6b 	bl	8003598 <add_error_to_list>
//				Error_Handler();
			}

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000089c 	.word	0x2000089c
 80010d0:	20000538 	.word	0x20000538

080010d4 <readStructurefromEeprom>:

uint8_t readStructurefromEeprom(uint8_t* config_pointer, uint16_t size_of_structure)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
	uint16_t crc_received_from_eeprom;
	if(HAL_I2C_IsDeviceReady(&hi2c4, EEPROM_ADDR1, 10, 200) == HAL_OK){
 80010e0:	23c8      	movs	r3, #200	; 0xc8
 80010e2:	220a      	movs	r2, #10
 80010e4:	21a0      	movs	r1, #160	; 0xa0
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <readStructurefromEeprom+0xb0>)
 80010e8:	f007 fde6 	bl	8008cb8 <HAL_I2C_IsDeviceReady>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d119      	bne.n	8001126 <readStructurefromEeprom+0x52>
			if(HAL_I2C_Mem_Read(&hi2c4, EEPROM_ADDR1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t *)config_pointer, size_of_structure,300) != HAL_OK){
 80010f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	2200      	movs	r2, #0
 8001104:	21a0      	movs	r1, #160	; 0xa0
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <readStructurefromEeprom+0xb0>)
 8001108:	f007 fcbc 	bl	8008a84 <HAL_I2C_Mem_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <readStructurefromEeprom+0x52>
//				Error_Handler();
				fault3.bits.eeprom_fault = 1;
 8001112:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <readStructurefromEeprom+0xb4>)
 8001114:	7813      	ldrb	r3, [r2, #0]
 8001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111a:	7013      	strb	r3, [r2, #0]
				add_error_to_list(12);
 800111c:	200c      	movs	r0, #12
 800111e:	f002 fa3b 	bl	8003598 <add_error_to_list>
				 return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e029      	b.n	800117a <readStructurefromEeprom+0xa6>
			}
		}
	if(HAL_I2C_Mem_Read(&hi2c4, EEPROM_ADDR1, 1000, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&crc_received_from_eeprom, 2,300) != HAL_OK){
 8001126:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2302      	movs	r3, #2
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2302      	movs	r3, #2
 8001138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113c:	21a0      	movs	r1, #160	; 0xa0
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <readStructurefromEeprom+0xb0>)
 8001140:	f007 fca0 	bl	8008a84 <HAL_I2C_Mem_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <readStructurefromEeprom+0x8a>
//		Error_Handler();
		fault3.bits.eeprom_fault = 1;
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <readStructurefromEeprom+0xb4>)
 800114c:	7813      	ldrb	r3, [r2, #0]
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	7013      	strb	r3, [r2, #0]
		add_error_to_list(12);
 8001154:	200c      	movs	r0, #12
 8001156:	f002 fa1f 	bl	8003598 <add_error_to_list>
		 return 0;
 800115a:	2300      	movs	r3, #0
 800115c:	e00d      	b.n	800117a <readStructurefromEeprom+0xa6>
	}
	uint16_t generated_crc = eeprom_crc_generate(config_pointer,size_of_structure);
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff2e 	bl	8000fc4 <eeprom_crc_generate>
 8001168:	4603      	mov	r3, r0
 800116a:	81fb      	strh	r3, [r7, #14]
	if(generated_crc == crc_received_from_eeprom)
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	89fa      	ldrh	r2, [r7, #14]
 8001170:	429a      	cmp	r2, r3
 8001172:	d101      	bne.n	8001178 <readStructurefromEeprom+0xa4>
		return 1;
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <readStructurefromEeprom+0xa6>
	else
		return 0;
 8001178:	2300      	movs	r3, #0

}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000089c 	.word	0x2000089c
 8001188:	20000538 	.word	0x20000538

0800118c <para_load>:

/*
This function is used to load the default parameter and save them to FRAM
*/
void para_load()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if (readStructurefromEeprom((uint8_t*)&ConfigPara, sizeof(ConfigPara)) == 0) {
 8001190:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <para_load+0x48>)
 8001196:	f7ff ff9d 	bl	80010d4 <readStructurefromEeprom>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d116      	bne.n	80011ce <para_load+0x42>
		 ParaInit();
 80011a0:	f001 f806 	bl	80021b0 <ParaInit>
		 if(fault3.bits.eeprom_fault == 0)
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <para_load+0x4c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <para_load+0x2e>
		 {remove_error_from_list(12);}
 80011b2:	200c      	movs	r0, #12
 80011b4:	f002 fa0c 	bl	80035d0 <remove_error_from_list>
		 else if (fault3.bits.eeprom_fault == 1)
		 {add_error_to_list(12);}
	}else{
		 {/*Action to be added*/}
	}
}
 80011b8:	e009      	b.n	80011ce <para_load+0x42>
		 else if (fault3.bits.eeprom_fault == 1)
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <para_load+0x4c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <para_load+0x42>
		 {add_error_to_list(12);}
 80011c8:	200c      	movs	r0, #12
 80011ca:	f002 f9e5 	bl	8003598 <add_error_to_list>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000029c 	.word	0x2000029c
 80011d8:	20000538 	.word	0x20000538

080011dc <para_save>:

/*
This function is used to save the present parameters to the FRAM
*/
void para_save()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	writeStructureToEeprom((uint8_t*)&ConfigPara,sizeof(ConfigPara));
 80011e0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <para_save+0x14>)
 80011e6:	f7ff ff2d 	bl	8001044 <writeStructureToEeprom>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000029c 	.word	0x2000029c

080011f4 <getDigiIn>:
}

/* Function description: Function to read pin state of the digital input
 */
uint8_t getDigiIn(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
			ss2 = 0;
		}
	}*/

	// function not in use anymore
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <parameterCalculations_ADC1>:
* Function Description: Function to calculate Average of ADC1 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC1(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[VBUS]=0,Adc_Sum_Buffer[IAFE]=0, Adc_Sum_Buffer[IPSFB]=0, Adc_Sum_Buffer[VOUT]=0;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]

	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e017      	b.n	8001258 <parameterCalculations_ADC1+0x54>
	{
		Adc_Sum_Buffer[VBUS] += Adc1_Buffer[i*ADC1_CHN + 0];
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4914      	ldr	r1, [pc, #80]	; (8001284 <parameterCalculations_ADC1+0x80>)
 8001232:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001236:	4413      	add	r3, r2
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800123a:	6013      	str	r3, [r2, #0]
		//Adc_Sum_Buffer[IAFE] += Adc1_Buffer[i*ADC1_CHN + 1];		//This section is not mounted in slave PCB
		Adc_Sum_Buffer[IPSFB] += Adc1_Buffer[i*ADC1_CHN + 2];
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	3202      	adds	r2, #2
 8001246:	490f      	ldr	r1, [pc, #60]	; (8001284 <parameterCalculations_ADC1+0x80>)
 8001248:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800124c:	4413      	add	r3, r2
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001250:	6093      	str	r3, [r2, #8]
	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b03      	cmp	r3, #3
 800125c:	dde4      	ble.n	8001228 <parameterCalculations_ADC1+0x24>
	//	Adc_Sum_Buffer[VOUT] += Adc1_Buffer[i*ADC1_CHN + 3];		//This section is not mounted in slave PCB
	}
	Adc_Avg_Buffer[VBUS] = Adc_Sum_Buffer[VBUS]/ADC_SAMPLE_SIZE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <parameterCalculations_ADC1+0x84>)
 8001266:	6013      	str	r3, [r2, #0]
	//Adc_Avg_Buffer[IAFE] = Adc_Sum_Buffer[IAFE]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	Adc_Avg_Buffer[IPSFB] = Adc_Sum_Buffer[IPSFB]/ADC_SAMPLE_SIZE;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <parameterCalculations_ADC1+0x7c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <parameterCalculations_ADC1+0x84>)
 8001270:	6093      	str	r3, [r2, #8]
	//Adc_Avg_Buffer[VOUT] = Adc_Sum_Buffer[VOUT]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000023c 	.word	0x2000023c
 8001284:	200001e4 	.word	0x200001e4
 8001288:	20000268 	.word	0x20000268

0800128c <parameterCalculations_ADC2>:
* Function Description: Function to calculate Average of ADC2 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC2(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[IOUT]=0,Adc_Sum_Buffer[VSUP]=0,Adc_Sum_Buffer[ISUP]=0,Adc_Sum_Buffer[TPSFB]=0;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]

	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e017      	b.n	80012e0 <parameterCalculations_ADC2+0x54>
		Adc_Sum_Buffer[IOUT] += Adc2_Buffer[i*ADC2_CHN + 0];
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4914      	ldr	r1, [pc, #80]	; (800130c <parameterCalculations_ADC2+0x80>)
 80012ba:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012be:	4413      	add	r3, r2
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012c2:	6113      	str	r3, [r2, #16]
	//	Adc_Sum_Buffer[VSUP] += Adc2_Buffer[i*ADC2_CHN + 1];	//This section is not mounted in slave PCB
	//	Adc_Sum_Buffer[ISUP] += Adc2_Buffer[i*ADC2_CHN + 2];		//This section is not mounted in slave PCB
		Adc_Sum_Buffer[TPSFB] += Adc2_Buffer[i*ADC2_CHN + 3];
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	3203      	adds	r2, #3
 80012ce:	490f      	ldr	r1, [pc, #60]	; (800130c <parameterCalculations_ADC2+0x80>)
 80012d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012d8:	61d3      	str	r3, [r2, #28]
	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	dde4      	ble.n	80012b0 <parameterCalculations_ADC2+0x24>
	}
	Adc_Avg_Buffer[IOUT] = Adc_Sum_Buffer[IOUT]/ADC_SAMPLE_SIZE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <parameterCalculations_ADC2+0x84>)
 80012ee:	6113      	str	r3, [r2, #16]
	//Adc_Avg_Buffer[VSUP] = Adc_Sum_Buffer[VSUP]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	//Adc_Avg_Buffer[ISUP] = Adc_Sum_Buffer[ISUP]/ADC_SAMPLE_SIZE;	//This section is not mounted in slave PCB
	Adc_Avg_Buffer[TPSFB] = Adc_Sum_Buffer[TPSFB]/ADC_SAMPLE_SIZE;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <parameterCalculations_ADC2+0x7c>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <parameterCalculations_ADC2+0x84>)
 80012f8:	61d3      	str	r3, [r2, #28]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2000023c 	.word	0x2000023c
 800130c:	20000204 	.word	0x20000204
 8001310:	20000268 	.word	0x20000268

08001314 <parameterCalculations_ADC3>:
* Function Description: Function to calculate Average of ADC3 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC3(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[TAFE]=0,Adc_Sum_Buffer[TDIODE]=0;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e017      	b.n	800135c <parameterCalculations_ADC3+0x48>
		Adc_Sum_Buffer[TAFE] += Adc3_Buffer[i*ADC3_CHN + 0];
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	4914      	ldr	r1, [pc, #80]	; (8001388 <parameterCalculations_ADC3+0x74>)
 8001336:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800133a:	4413      	add	r3, r2
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800133e:	6213      	str	r3, [r2, #32]
		Adc_Sum_Buffer[TDIODE] += Adc3_Buffer[i*ADC3_CHN + 1];
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	3201      	adds	r2, #1
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <parameterCalculations_ADC3+0x74>)
 800134c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001350:	4413      	add	r3, r2
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001354:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i=0;i<ADC_SAMPLE_SIZE;i++){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	dde4      	ble.n	800132c <parameterCalculations_ADC3+0x18>
	}
	Adc_Avg_Buffer[TAFE] = Adc_Sum_Buffer[TAFE]/ADC_SAMPLE_SIZE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <parameterCalculations_ADC3+0x70>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <parameterCalculations_ADC3+0x78>)
 800136a:	6213      	str	r3, [r2, #32]
	Adc_Avg_Buffer[TDIODE] = Adc_Sum_Buffer[TDIODE]/ADC_SAMPLE_SIZE;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <parameterCalculations_ADC3+0x70>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <parameterCalculations_ADC3+0x78>)
 8001374:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000023c 	.word	0x2000023c
 8001388:	20000224 	.word	0x20000224
 800138c:	20000268 	.word	0x20000268

08001390 <parameterCalculations_ADC4>:
* Function Description: Function to calculate Average of ADC4 Parameters
* Input:
* Return:
*/
void parameterCalculations_ADC4(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	Adc_Sum_Buffer[TTRAFO]=0;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28

	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	e00b      	b.n	80013ba <parameterCalculations_ADC4+0x2a>
		Adc_Sum_Buffer[TTRAFO] += Adc4_Buffer[i*ADC4_CHN + 0];
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <parameterCalculations_ADC4+0x4c>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013b2:	6293      	str	r3, [r2, #40]	; 0x28
	for(int i=0;i<ADC_SAMPLE_SIZE;i++)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	ddf0      	ble.n	80013a2 <parameterCalculations_ADC4+0x12>

	Adc_Avg_Buffer[TTRAFO] = Adc_Sum_Buffer[TTRAFO]/ADC_SAMPLE_SIZE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <parameterCalculations_ADC4+0x48>)
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <parameterCalculations_ADC4+0x50>)
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000023c 	.word	0x2000023c
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000268 	.word	0x20000268

080013e4 <calculateTemperature>:
 * Calculates temperature from resistance based on a lookup table values
    * @param resistance: NTC resistance in Ohms
    * @return temperature in Celsius
 */
float calculateTemperature(float resistance)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
    // Check if the resistance is outside the table range
    if (resistance >= resistance_values[0])
 80013ee:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80014ac <calculateTemperature+0xc8>
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	db01      	blt.n	8001404 <calculateTemperature+0x20>
        return 25.0; // Return default temperature
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <calculateTemperature+0xcc>)
 8001402:	e049      	b.n	8001498 <calculateTemperature+0xb4>

    int i = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    while ((float)resistance_values[i] > (float)resistance){
 8001408:	e002      	b.n	8001410 <calculateTemperature+0x2c>
        i++;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
    while ((float)resistance_values[i] > (float)resistance){
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <calculateTemperature+0xd0>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d4ef      	bmi.n	800140a <calculateTemperature+0x26>
    }

    float rlow = resistance_values[i - 1];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <calculateTemperature+0xd0>)
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
    float rhigh = resistance_values[i];
 8001438:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <calculateTemperature+0xd0>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
    float tempLower = temperature_values[i - 1];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3b01      	subs	r3, #1
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <calculateTemperature+0xd4>)
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
    float tempUpper = temperature_values[i];
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <calculateTemperature+0xd4>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]

    // Interpolating the temperature value
    float tmpcel = tempLower + (resistance - rlow) * (tempUpper - tempLower) / (rhigh - rlow);
 800145e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001462:	edd7 7a06 	vldr	s15, [r7, #24]
 8001466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146a:	edd7 6a03 	vldr	s13, [r7, #12]
 800146e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001472:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001476:	ee67 6a27 	vmul.f32	s13, s14, s15
 800147a:	ed97 7a05 	vldr	s14, [r7, #20]
 800147e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148a:	ed97 7a04 	vldr	s14, [r7, #16]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	edc7 7a02 	vstr	s15, [r7, #8]

    return tmpcel;
 8001496:	68bb      	ldr	r3, [r7, #8]
}
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	461c4000 	.word	0x461c4000
 80014b0:	41c80000 	.word	0x41c80000
 80014b4:	0800c1c8 	.word	0x0800c1c8
 80014b8:	0800bf6c 	.word	0x0800bf6c

080014bc <calculateTrafoTemperature>:
{
	return  (tempCelsius + 273.15);
}

float calculateTrafoTemperature(float trafo_temp)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (trafo_temp <= trafo_meas_values[0])
 80014c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001524 <calculateTrafoTemperature+0x68>
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d802      	bhi.n	80014de <calculateTrafoTemperature+0x22>
		return 0;
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e019      	b.n	8001512 <calculateTrafoTemperature+0x56>

	int j=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
	while((float)trafo_temp >=trafo_meas_values[j] )
 80014e2:	e002      	b.n	80014ea <calculateTrafoTemperature+0x2e>
	{
		j++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
	while((float)trafo_temp >=trafo_meas_values[j] )
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <calculateTrafoTemperature+0x6c>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	daef      	bge.n	80014e4 <calculateTrafoTemperature+0x28>
	}
		float trafo_actual_temp =  trafo_temp_values[j];
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <calculateTrafoTemperature+0x70>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60bb      	str	r3, [r7, #8]
		return trafo_actual_temp;
 8001510:	68bb      	ldr	r3, [r7, #8]
}
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	c013e76d 	.word	0xc013e76d
 8001528:	0800c424 	.word	0x0800c424
 800152c:	0800c5b8 	.word	0x0800c5b8

08001530 <generate_address>:
* Input:
* Return:
*/
uint8_t switch_states[6];
uint16_t generate_address()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
//	uint8_t switch_states[6];
	uint16_t address;
	switch_states[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	482a      	ldr	r0, [pc, #168]	; (80015e4 <generate_address+0xb4>)
 800153a:	f005 ff47 	bl	80073cc <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <generate_address+0xb8>)
 8001544:	701a      	strb	r2, [r3, #0]
	switch_states[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <generate_address+0xb4>)
 800154a:	f005 ff3f 	bl	80073cc <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <generate_address+0xb8>)
 8001554:	705a      	strb	r2, [r3, #1]
	switch_states[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001556:	2120      	movs	r1, #32
 8001558:	4822      	ldr	r0, [pc, #136]	; (80015e4 <generate_address+0xb4>)
 800155a:	f005 ff37 	bl	80073cc <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <generate_address+0xb8>)
 8001564:	709a      	strb	r2, [r3, #2]
	switch_states[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001566:	2110      	movs	r1, #16
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <generate_address+0xb4>)
 800156a:	f005 ff2f 	bl	80073cc <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <generate_address+0xb8>)
 8001574:	70da      	strb	r2, [r3, #3]
	switch_states[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8001576:	2108      	movs	r1, #8
 8001578:	481a      	ldr	r0, [pc, #104]	; (80015e4 <generate_address+0xb4>)
 800157a:	f005 ff27 	bl	80073cc <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <generate_address+0xb8>)
 8001584:	711a      	strb	r2, [r3, #4]
	switch_states[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8001586:	2101      	movs	r1, #1
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <generate_address+0xb4>)
 800158a:	f005 ff1f 	bl	80073cc <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <generate_address+0xb8>)
 8001594:	715a      	strb	r2, [r3, #5]
	address = (uint16_t)(((uint16_t)switch_states[0] << 5) | ((uint16_t)switch_states[1] << 4) | ((uint16_t)switch_states[2] << 3) | ((uint16_t)switch_states[3]) << 2 | ((uint16_t)switch_states[4]) << 1 | ((uint16_t)switch_states[5]));
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <generate_address+0xb8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	015b      	lsls	r3, r3, #5
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <generate_address+0xb8>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <generate_address+0xb8>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <generate_address+0xb8>)
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <generate_address+0xb8>)
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <generate_address+0xb8>)
 80015d0:	795b      	ldrb	r3, [r3, #5]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	80fb      	strh	r3, [r7, #6]
	return address;
 80015da:	88fb      	ldrh	r3, [r7, #6]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	20000294 	.word	0x20000294

080015ec <CELL_TEST>:
 * 2) Lower the protection levels of some functions
 * 3) bypass some of the faults
 * */

void CELL_TEST(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
/ * Not deleting this code because this may be needed in future.
 *
 */

//	g_AFE_switch = GET_AFE_SWITCH;
  if((g_AFE_switch ==0) && (PWMON_flag==0) && (status1.bits.sHealthStatus == 0))
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <CELL_TEST+0x120>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d118      	bne.n	800162a <CELL_TEST+0x3e>
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <CELL_TEST+0x124>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d114      	bne.n	800162a <CELL_TEST+0x3e>
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <CELL_TEST+0x128>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <CELL_TEST+0x3e>
		{
			//TIM1->CCR1 =TIM1->ARR/2;
		//	TIM1->CCR2 =TIM1->ARR/2;
			PWMON();
 800160e:	f000 f921 	bl	8001854 <PWMON>
			PWMON_flag = 1;
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <CELL_TEST+0x124>)
 8001614:	2201      	movs	r2, #1
 8001616:	801a      	strh	r2, [r3, #0]
			TurnONFlag=1;
 8001618:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <CELL_TEST+0x12c>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
			LED3_ON;
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	483e      	ldr	r0, [pc, #248]	; (800171c <CELL_TEST+0x130>)
 8001624:	f005 feea 	bl	80073fc <HAL_GPIO_WritePin>
 8001628:	e027      	b.n	800167a <CELL_TEST+0x8e>

		}
		else if ((g_AFE_switch ==0) && (PWMON_flag==1) && (status1.bits.sHealthStatus == 0))
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <CELL_TEST+0x120>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d110      	bne.n	8001654 <CELL_TEST+0x68>
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <CELL_TEST+0x124>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <CELL_TEST+0x68>
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <CELL_TEST+0x128>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <CELL_TEST+0x68>
		{
			LED3_ON;
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	4833      	ldr	r0, [pc, #204]	; (800171c <CELL_TEST+0x130>)
 800164e:	f005 fed5 	bl	80073fc <HAL_GPIO_WritePin>
 8001652:	e012      	b.n	800167a <CELL_TEST+0x8e>
		}
		else
		{
			PWMOFF();
 8001654:	f000 f908 	bl	8001868 <PWMOFF>
			TurnONFlag=0;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <CELL_TEST+0x12c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			LED3_OFF;
 800165e:	2200      	movs	r2, #0
 8001660:	2110      	movs	r1, #16
 8001662:	482e      	ldr	r0, [pc, #184]	; (800171c <CELL_TEST+0x130>)
 8001664:	f005 feca 	bl	80073fc <HAL_GPIO_WritePin>

			if(PSFBON_flag == 0)
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <CELL_TEST+0x134>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <CELL_TEST+0x8e>
			{
				LED3_OFF;
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4829      	ldr	r0, [pc, #164]	; (800171c <CELL_TEST+0x130>)
 8001676:	f005 fec1 	bl	80073fc <HAL_GPIO_WritePin>
			}
         }

		//PSFB switching function
//  	  g_PSFB_switch = GET_PSFB_SWITCH;
  	  if((g_PSFB_switch==0) && (PSFBON_flag ==0)  && (status1.bits.sHealthStatus == 0))
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <CELL_TEST+0x138>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <CELL_TEST+0xc8>
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <CELL_TEST+0x134>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <CELL_TEST+0xc8>
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <CELL_TEST+0x128>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10d      	bne.n	80016b4 <CELL_TEST+0xc8>
		{
			PSFBON();
 8001698:	f000 f84e 	bl	8001738 <PSFBON>
			PSFBON_flag = 1;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <CELL_TEST+0x134>)
 800169e:	2201      	movs	r2, #1
 80016a0:	801a      	strh	r2, [r3, #0]
			Psfb_OnOffFlag = 1;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <CELL_TEST+0x13c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
			LED3_ON;
 80016a8:	2201      	movs	r2, #1
 80016aa:	2110      	movs	r1, #16
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <CELL_TEST+0x130>)
 80016ae:	f005 fea5 	bl	80073fc <HAL_GPIO_WritePin>
 80016b2:	e01f      	b.n	80016f4 <CELL_TEST+0x108>
		}
		else if ((g_PSFB_switch==0) && (PSFBON_flag ==1) && (status1.bits.sHealthStatus == 0))
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <CELL_TEST+0x138>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d110      	bne.n	80016de <CELL_TEST+0xf2>
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <CELL_TEST+0x134>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10c      	bne.n	80016de <CELL_TEST+0xf2>
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <CELL_TEST+0x128>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <CELL_TEST+0xf2>
		{
			LED3_ON;
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <CELL_TEST+0x130>)
 80016d8:	f005 fe90 	bl	80073fc <HAL_GPIO_WritePin>
 80016dc:	e00a      	b.n	80016f4 <CELL_TEST+0x108>
		}
		else
		{
			PSFBOFF();
 80016de:	f000 f85b 	bl	8001798 <PSFBOFF>

			if(PWMON_flag == 0)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <CELL_TEST+0x124>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d104      	bne.n	80016f4 <CELL_TEST+0x108>
			{
				LED3_OFF;
 80016ea:	2200      	movs	r2, #0
 80016ec:	2110      	movs	r1, #16
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <CELL_TEST+0x130>)
 80016f0:	f005 fe84 	bl	80073fc <HAL_GPIO_WritePin>
			}
        }

		//Lowering the threshold of faults for the test mode
		overlinkVolt.threshold = 850.0f;		//dc link over voltage setting
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <CELL_TEST+0x140>)
 80016f6:	f240 3252 	movw	r2, #850	; 0x352
 80016fa:	821a      	strh	r2, [r3, #16]
		overlinkCurr.threshold = 5.0f;		// dc link over current setting
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <CELL_TEST+0x144>)
 80016fe:	2205      	movs	r2, #5
 8001700:	821a      	strh	r2, [r3, #16]
		overIout.threshold = 5.0f;				// Iout over current setting
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <CELL_TEST+0x148>)
 8001704:	2205      	movs	r2, #5
 8001706:	821a      	strh	r2, [r3, #16]

		//TODO: bypass some of the faults
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000052c 	.word	0x2000052c
 8001710:	20000518 	.word	0x20000518
 8001714:	2000054c 	.word	0x2000054c
 8001718:	200004d3 	.word	0x200004d3
 800171c:	48000400 	.word	0x48000400
 8001720:	2000051a 	.word	0x2000051a
 8001724:	2000052d 	.word	0x2000052d
 8001728:	200004d2 	.word	0x200004d2
 800172c:	2000057c 	.word	0x2000057c
 8001730:	20000550 	.word	0x20000550
 8001734:	200005a8 	.word	0x200005a8

08001738 <PSFBON>:
* Function Description: Function to start PSFB output waveform
* Input:
* Return:
*/
void PSFBON(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	SoftStartFlag = 1;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <PSFBON+0x4c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
	phase_diff.Fix = 2800;			// 4250 is for 50 % phase shift (8500*0.5)= 4250
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <PSFBON+0x50>)
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <PSFBON+0x54>)
 8001746:	605a      	str	r2, [r3, #4]
	phase_diff.Dynamic = 0;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <PSFBON+0x50>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	HAL_HRTIM_WaveformCounterStart(&hhrtim1,HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E);
 8001750:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001754:	480e      	ldr	r0, [pc, #56]	; (8001790 <PSFBON+0x58>)
 8001756:	f006 fb4a 	bl	8007dee <HAL_HRTIM_WaveformCountStart>
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=500;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <PSFBON+0x5c>)
 800175c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001760:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=500;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <PSFBON+0x5c>)
 8001766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800176a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CNTxR=500;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <PSFBON+0x5c>)
 8001770:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001774:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 ); //Timer C and D for PSFB
 8001778:	21f0      	movs	r1, #240	; 0xf0
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <PSFBON+0x58>)
 800177c:	f006 fadd 	bl	8007d3a <HAL_HRTIM_WaveformOutputStart>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200004d4 	.word	0x200004d4
 8001788:	200006b0 	.word	0x200006b0
 800178c:	452f0000 	.word	0x452f0000
 8001790:	200007a0 	.word	0x200007a0
 8001794:	40016800 	.word	0x40016800

08001798 <PSFBOFF>:
* Function Description: Function to stop PSFB output waveform
* Input:
* Return:
*/
void PSFBOFF(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	Psfb_OnOffFlag = 0;
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <PSFBOFF+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	cmd.bits.psfb_on = 0;
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <PSFBOFF+0x98>)
 80017a4:	7813      	ldrb	r3, [r2, #0]
 80017a6:	f36f 03c3 	bfc	r3, #3, #1
 80017aa:	7013      	strb	r3, [r2, #0]
	status1.bits.psfbFeedback = 0;
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <PSFBOFF+0x9c>)
 80017ae:	7813      	ldrb	r3, [r2, #0]
 80017b0:	f36f 0341 	bfc	r3, #1, #1
 80017b4:	7013      	strb	r3, [r2, #0]
	SoftStartFlag = 0;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <PSFBOFF+0xa0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	phase_diff.Fix = 2800;			// 4250 is for 50 % phase shift (8500*0.5)= 4250
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <PSFBOFF+0xa4>)
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <PSFBOFF+0xa8>)
 80017c0:	605a      	str	r2, [r3, #4]
	phase_diff.Dynamic = 0;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <PSFBOFF+0xa4>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 );
 80017ca:	21f0      	movs	r1, #240	; 0xf0
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <PSFBOFF+0xac>)
 80017ce:	f006 fae1 	bl	8007d94 <HAL_HRTIM_WaveformOutputStop>
	PSFBON_flag = 0;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <PSFBOFF+0xb0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 1+ phase_diff.Dynamic;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <PSFBOFF+0xa4>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <PSFBOFF+0xb4>)
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 4250 + phase_diff.Dynamic;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <PSFBOFF+0xa4>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001850 <PSFBOFF+0xb8>
 80017fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <PSFBOFF+0xb4>)
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 2a90 	vmov	r2, s15
 800180c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	//HAL_HRTIM_WaveformCounterStop(&hhrtim1,HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E);
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CNTxR=0;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <PSFBOFF+0xb4>)
 8001812:	2200      	movs	r2, #0
 8001814:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CNTxR=0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <PSFBOFF+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].CNTxR=0;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <PSFBOFF+0xb4>)
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200004d2 	.word	0x200004d2
 8001830:	20000548 	.word	0x20000548
 8001834:	2000054c 	.word	0x2000054c
 8001838:	200004d4 	.word	0x200004d4
 800183c:	200006b0 	.word	0x200006b0
 8001840:	452f0000 	.word	0x452f0000
 8001844:	200007a0 	.word	0x200007a0
 8001848:	2000051a 	.word	0x2000051a
 800184c:	40016800 	.word	0x40016800
 8001850:	4584d000 	.word	0x4584d000

08001854 <PWMON>:
* Function Description:
* Input:
* Return:
*/
void PWMON(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	//Pwm control configurations TBD
//	Psfb_OnOffFlag = 1;
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 ); //Timer A and B for AFE PWM
 8001858:	210f      	movs	r1, #15
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <PWMON+0x10>)
 800185c:	f006 fa6d 	bl	8007d3a <HAL_HRTIM_WaveformOutputStart>

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200007a0 	.word	0x200007a0

08001868 <PWMOFF>:
* Function Description:
* Input:
* Return:
*/
void PWMOFF(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	//Pwm control configurations TBD
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 ); //Timer A and B for PWM AFE
 800186c:	210f      	movs	r1, #15
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <PWMOFF+0x18>)
 8001870:	f006 fa90 	bl	8007d94 <HAL_HRTIM_WaveformOutputStop>
	PWMON_flag = 0;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <PWMOFF+0x1c>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200007a0 	.word	0x200007a0
 8001884:	20000518 	.word	0x20000518

08001888 <protectionMonitoring_DC>:
* Function Description:
* Input:
* Return:
*/
void protectionMonitoring_DC(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
		fault1.bits.over_Ilink =  0;
		remove_error_from_list(1);
		}
*/

	check_over_limitI(&overIout,Iout[procValue] );
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <protectionMonitoring_DC+0x7c>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <protectionMonitoring_DC+0x80>)
 8001898:	f001 f9c0 	bl	8002c1c <check_over_limitI>
	if(overIout.ovlFault){
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <protectionMonitoring_DC+0x80>)
 800189e:	885b      	ldrh	r3, [r3, #2]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <protectionMonitoring_DC+0x2e>
		fault1.bits.over_Iout = 1;
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <protectionMonitoring_DC+0x84>)
 80018a6:	7813      	ldrb	r3, [r2, #0]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	7013      	strb	r3, [r2, #0]
		add_error_to_list(3);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f001 fe72 	bl	8003598 <add_error_to_list>
 80018b4:	e007      	b.n	80018c6 <protectionMonitoring_DC+0x3e>
	}
	else{
		fault1.bits.over_Iout = 0;
 80018b6:	4a15      	ldr	r2, [pc, #84]	; (800190c <protectionMonitoring_DC+0x84>)
 80018b8:	7813      	ldrb	r3, [r2, #0]
 80018ba:	f36f 0382 	bfc	r3, #2, #1
 80018be:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f001 fe85 	bl	80035d0 <remove_error_from_list>
		fault1.bits.over_Vout = 1;
	else
		fault1.bits.over_Vout = 0;
*/

	check_over_limit(&overlinkVolt, Vbus[procValue]);
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <protectionMonitoring_DC+0x88>)
 80018c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	4810      	ldr	r0, [pc, #64]	; (8001914 <protectionMonitoring_DC+0x8c>)
 80018d2:	f001 f8ed 	bl	8002ab0 <check_over_limit>
	if(overlinkVolt.ovlFault){
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <protectionMonitoring_DC+0x8c>)
 80018d8:	885b      	ldrh	r3, [r3, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <protectionMonitoring_DC+0x68>
		fault1.bits.over_Vlink = 1;
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <protectionMonitoring_DC+0x84>)
 80018e0:	7813      	ldrb	r3, [r2, #0]
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	7013      	strb	r3, [r2, #0]
		add_error_to_list(2);
 80018e8:	2002      	movs	r0, #2
 80018ea:	f001 fe55 	bl	8003598 <add_error_to_list>
	else{
		fault2.bits.underVlink = 0;
		remove_error_from_list(5);
		}
		*/
}
 80018ee:	e007      	b.n	8001900 <protectionMonitoring_DC+0x78>
		fault1.bits.over_Vlink = 0;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <protectionMonitoring_DC+0x84>)
 80018f2:	7813      	ldrb	r3, [r2, #0]
 80018f4:	f36f 0341 	bfc	r3, #1, #1
 80018f8:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(2);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f001 fe68 	bl	80035d0 <remove_error_from_list>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000048c 	.word	0x2000048c
 8001908:	200005a8 	.word	0x200005a8
 800190c:	20000530 	.word	0x20000530
 8001910:	20000484 	.word	0x20000484
 8001914:	2000057c 	.word	0x2000057c

08001918 <protectionMonitoring_Temp>:
		fault2.bits.underSupVolt = 1;
	else
		fault2.bits.underSupVolt = 0;
}*/

void protectionMonitoring_Temp(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	if(overDiodeTemp.ovlFault){
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <protectionMonitoring_Temp+0xb0>)
 800191e:	885b      	ldrh	r3, [r3, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <protectionMonitoring_Temp+0x1e>
		fault4.bits.overTemp_diode = 1;
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001926:	7813      	ldrb	r3, [r2, #0]
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	7013      	strb	r3, [r2, #0]
		add_error_to_list(17);
 800192e:	2011      	movs	r0, #17
 8001930:	f001 fe32 	bl	8003598 <add_error_to_list>
 8001934:	e007      	b.n	8001946 <protectionMonitoring_Temp+0x2e>
	}
	else{
		fault4.bits.overTemp_diode = 0;
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001938:	7813      	ldrb	r3, [r2, #0]
 800193a:	f36f 03c3 	bfc	r3, #3, #1
 800193e:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(17);
 8001940:	2011      	movs	r0, #17
 8001942:	f001 fe45 	bl	80035d0 <remove_error_from_list>
	}

	if(overAfeTemp.ovlFault){
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <protectionMonitoring_Temp+0xb8>)
 8001948:	885b      	ldrh	r3, [r3, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <protectionMonitoring_Temp+0x48>
		fault4.bits.overTemp_afe = 1;
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001950:	7813      	ldrb	r3, [r2, #0]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	7013      	strb	r3, [r2, #0]
		add_error_to_list(14);
 8001958:	200e      	movs	r0, #14
 800195a:	f001 fe1d 	bl	8003598 <add_error_to_list>
 800195e:	e007      	b.n	8001970 <protectionMonitoring_Temp+0x58>
	}
	else{
		fault4.bits.overTemp_afe = 0;
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 8001962:	7813      	ldrb	r3, [r2, #0]
 8001964:	f36f 0300 	bfc	r3, #0, #1
 8001968:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(14);
 800196a:	200e      	movs	r0, #14
 800196c:	f001 fe30 	bl	80035d0 <remove_error_from_list>
	}

	if(overPsfbTemp.ovlFault){
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <protectionMonitoring_Temp+0xbc>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <protectionMonitoring_Temp+0x72>
		fault4.bits.overTemp_psfb = 1;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 800197a:	7813      	ldrb	r3, [r2, #0]
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	7013      	strb	r3, [r2, #0]
		add_error_to_list(16);
 8001982:	2010      	movs	r0, #16
 8001984:	f001 fe08 	bl	8003598 <add_error_to_list>
 8001988:	e007      	b.n	800199a <protectionMonitoring_Temp+0x82>
	}
	else{
		fault4.bits.overTemp_psfb = 0;
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 800198c:	7813      	ldrb	r3, [r2, #0]
 800198e:	f36f 0382 	bfc	r3, #2, #1
 8001992:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(16);
 8001994:	2010      	movs	r0, #16
 8001996:	f001 fe1b 	bl	80035d0 <remove_error_from_list>
	}

	if(overTrafoTemp.ovlFault){
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <protectionMonitoring_Temp+0xc0>)
 800199c:	885b      	ldrh	r3, [r3, #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <protectionMonitoring_Temp+0x9c>
		fault4.bits.overTemp_trafo = 1;
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 80019a4:	7813      	ldrb	r3, [r2, #0]
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	7013      	strb	r3, [r2, #0]
		add_error_to_list(15);
 80019ac:	200f      	movs	r0, #15
 80019ae:	f001 fdf3 	bl	8003598 <add_error_to_list>
	}
	else{
		fault4.bits.overTemp_trafo = 0;
		remove_error_from_list(15);
	}
}
 80019b2:	e007      	b.n	80019c4 <protectionMonitoring_Temp+0xac>
		fault4.bits.overTemp_trafo = 0;
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <protectionMonitoring_Temp+0xb4>)
 80019b6:	7813      	ldrb	r3, [r2, #0]
 80019b8:	f36f 0341 	bfc	r3, #1, #1
 80019bc:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(15);
 80019be:	200f      	movs	r0, #15
 80019c0:	f001 fe06 	bl	80035d0 <remove_error_from_list>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200005d4 	.word	0x200005d4
 80019cc:	2000053c 	.word	0x2000053c
 80019d0:	2000062c 	.word	0x2000062c
 80019d4:	20000600 	.word	0x20000600
 80019d8:	20000658 	.word	0x20000658

080019dc <Parameter_Calculations>:
* Function Description:
* Input:
* Return:
*/
void Parameter_Calculations(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	parameterCalculations_ADC1(); //ADC1 measurement
 80019e0:	f7ff fc10 	bl	8001204 <parameterCalculations_ADC1>
	parameterCalculations_ADC2(); //ADC2 measurement
 80019e4:	f7ff fc52 	bl	800128c <parameterCalculations_ADC2>
	Vout[rawValue] = ((Vout[rawValue]*ConfigPara.calFactor[VOUT].Slope)+ ConfigPara.calFactor[VOUT].Offset)*(ConfigPara.calFactor[VOUT].corFac); // Low pass filter for Vout
	Vout_LPF.xn = Vout[rawValue];
	Vout_LPF.yn = Vout_LPF.xn + ((float)ConfigPara.lpf_factor.Vout*(Vout_LPF.yn-Vout_LPF.xn));
	Vout[procValue] = Vout_LPF.yn;*/

	Ipsfb[rawValue] = ((float)Adc_Avg_Buffer[IPSFB]*ADC_RESOLUTION);
 80019e8:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <Parameter_Calculations+0x18c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001b6c <Parameter_Calculations+0x190>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <Parameter_Calculations+0x194>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
	Ipsfb[rawValue] = ((Ipsfb[rawValue]*ConfigPara.calFactor[IPSFB].Slope) + ConfigPara.calFactor[IPSFB].Offset)*(ConfigPara.calFactor[IPSFB].corFac); // Low pass filter for Irect
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a0a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8001a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a14:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a1e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	Ipsfb_LPF.xn = Ipsfb[rawValue];
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a32:	6013      	str	r3, [r2, #0]
	Ipsfb_LPF.yn = Ipsfb_LPF.xn + ((float)ConfigPara.lpf_factor.Ipsfb*(Ipsfb_LPF.yn-Ipsfb_LPF.xn));
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a3c:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a42:	ed93 6a01 	vldr	s12, [r3, #4]
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a5a:	edc3 7a01 	vstr	s15, [r3, #4]
	Ipsfb[procValue] = Ipsfb_LPF.yn;
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <Parameter_Calculations+0x19c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a43      	ldr	r2, [pc, #268]	; (8001b70 <Parameter_Calculations+0x194>)
 8001a64:	6053      	str	r3, [r2, #4]

	Iout[rawValue] = ((float)Adc_Avg_Buffer[IOUT]*ADC_RESOLUTION);
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <Parameter_Calculations+0x18c>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a72:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001b6c <Parameter_Calculations+0x190>
 8001a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
	Iout[rawValue] = ((Iout[rawValue]*ConfigPara.calFactor[IOUT].Slope) + ConfigPara.calFactor[IOUT].Offset)*(ConfigPara.calFactor[IOUT].corFac); // Low pass filter for Iout
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a88:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8001a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a92:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <Parameter_Calculations+0x198>)
 8001a9c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	Iout_LPF.xn = Iout[rawValue];
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ab0:	6013      	str	r3, [r2, #0]
	Iout_LPF.yn = Iout_LPF.xn + ((float)ConfigPara.lpf_factor.Iout*(Iout_LPF.yn-Iout_LPF.xn));
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ab4:	ed93 7a00 	vldr	s14, [r3]
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <Parameter_Calculations+0x198>)
 8001aba:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ac0:	ed93 6a01 	vldr	s12, [r3, #4]
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ad8:	edc3 7a01 	vstr	s15, [r3, #4]
	Iout[procValue] = Iout_LPF.yn;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <Parameter_Calculations+0x1a4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <Parameter_Calculations+0x1a0>)
 8001ae2:	6053      	str	r3, [r2, #4]

	Vbus[rawValue] = ((float)Adc_Avg_Buffer[VBUS] * ADC_RESOLUTION);
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <Parameter_Calculations+0x18c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b6c <Parameter_Calculations+0x190>
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
	{
//		Vbus[rawValue] = ((Vbus[rawValue]*393.45f) - 18.305f )*(ConfigPara.calFactor[VBUS].corFac); // Low pass filter for VDC bus
	}
//	else
	{
		Vbus[rawValue] = ((Vbus[rawValue]*ConfigPara.calFactor[VBUS].Slope) + ConfigPara.calFactor[VBUS].Offset)*(ConfigPara.calFactor[VBUS].corFac); // Low pass filter for VDC bus
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b06:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b10:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b1a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	}

	Vbus_LPF.xn = Vbus[rawValue];
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b2e:	6013      	str	r3, [r2, #0]
	Vbus_LPF.yn = Vbus_LPF.xn + ((float)ConfigPara.lpf_factor.VBus*(Vbus_LPF.yn-Vbus_LPF.xn));
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <Parameter_Calculations+0x198>)
 8001b38:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b3e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b56:	edc3 7a01 	vstr	s15, [r3, #4]
	Vbus[procValue] = Vbus_LPF.yn;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <Parameter_Calculations+0x1ac>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <Parameter_Calculations+0x1a8>)
 8001b60:	6053      	str	r3, [r2, #4]


	// Calculating the RMS and AC Protection function at every 1 mSec
	//calculateRMS(ConfigPara.freqInner, ConfigPara.Fsystem);	//Removing entire function because none of the section is mounted on PCB

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000268 	.word	0x20000268
 8001b6c:	3a5332ed 	.word	0x3a5332ed
 8001b70:	2000047c 	.word	0x2000047c
 8001b74:	2000029c 	.word	0x2000029c
 8001b78:	200004e0 	.word	0x200004e0
 8001b7c:	2000048c 	.word	0x2000048c
 8001b80:	200004f0 	.word	0x200004f0
 8001b84:	20000484 	.word	0x20000484
 8001b88:	200004e8 	.word	0x200004e8
 8001b8c:	00000000 	.word	0x00000000

08001b90 <tempParameter_Calculations>:
* Function Description:
* Input:
* Return:
*/
void tempParameter_Calculations(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	parameterCalculations_ADC3(); //ADC3 measurement for temperature sensing at low rate 10*4 Hz
 8001b94:	f7ff fbbe 	bl	8001314 <parameterCalculations_ADC3>
	parameterCalculations_ADC4();
 8001b98:	f7ff fbfa 	bl	8001390 <parameterCalculations_ADC4>
	//Calculation of Temperature and low pass filtering
	TDiode_Res[rawValue] = (((float)Adc_Avg_Buffer[TDIODE]) * ADC_RESOLUTION); // Low pass filter for Ttrafo (in resistance)
 8001b9c:	4bb6      	ldr	r3, [pc, #728]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]
	TDiode_LPF.xn = TDiode_Res[rawValue];
 8001bb6:	4bb2      	ldr	r3, [pc, #712]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4ab2      	ldr	r2, [pc, #712]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bbc:	6013      	str	r3, [r2, #0]
	TDiode_LPF.yn = TDiode_LPF.xn + ((float)ConfigPara.lpf_factor.Tdiode*(TDiode_LPF.yn-TDiode_LPF.xn));
 8001bbe:	4bb1      	ldr	r3, [pc, #708]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001bc6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8001bca:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bcc:	ed93 6a01 	vldr	s12, [r3, #4]
 8001bd0:	4bac      	ldr	r3, [pc, #688]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001be4:	edc3 7a01 	vstr	s15, [r3, #4]
	TDiode_Res[procValue] = TDiode_LPF.yn;
 8001be8:	4ba6      	ldr	r3, [pc, #664]	; (8001e84 <tempParameter_Calculations+0x2f4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4aa4      	ldr	r2, [pc, #656]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bee:	6053      	str	r3, [r2, #4]
	TDiode_Res[procValue] = ((TDiode_Res[procValue] * ConfigPara.calFactor[TDIODE].Slope) + ConfigPara.calFactor[TDIODE].Offset)*(ConfigPara.calFactor[TDIODE].corFac);
 8001bf0:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bf6:	4ba4      	ldr	r3, [pc, #656]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001bf8:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8001bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c02:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8001c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0a:	4b9f      	ldr	r3, [pc, #636]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c0c:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001c16:	edc3 7a01 	vstr	s15, [r3, #4]
	TDiode = calculateTemperature(TDiode_Res[procValue]); //Converting resistance to temperature
 8001c1a:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <tempParameter_Calculations+0x2f0>)
 8001c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f7ff fbde 	bl	80013e4 <calculateTemperature>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <tempParameter_Calculations+0x2fc>)
 8001c2e:	edc3 7a00 	vstr	s15, [r3]

	TTrafo_Res[rawValue] = (((float)Adc_Avg_Buffer[TTRAFO]) * ADC_RESOLUTION); // Low pass filter for Tfec (in resistance)
 8001c32:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c46:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c48:	edc3 7a00 	vstr	s15, [r3]
	Ttrafo_LPF.xn = TTrafo_Res[rawValue];
 8001c4c:	4b90      	ldr	r3, [pc, #576]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a90      	ldr	r2, [pc, #576]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c52:	6013      	str	r3, [r2, #0]
	Ttrafo_LPF.yn = Ttrafo_LPF.xn + ((float)ConfigPara.lpf_factor.Ttrafo*(Ttrafo_LPF.yn-Ttrafo_LPF.xn));
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c5c:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c62:	ed93 6a01 	vldr	s12, [r3, #4]
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	4b86      	ldr	r3, [pc, #536]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c7a:	edc3 7a01 	vstr	s15, [r3, #4]
	TTrafo_Res[procValue] = Ttrafo_LPF.yn;
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <tempParameter_Calculations+0x304>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c84:	6053      	str	r3, [r2, #4]
	TTrafo_Res[procValue] = ((TTrafo_Res[procValue] * ConfigPara.calFactor[TTRAFO].Slope) + ConfigPara.calFactor[TTRAFO].Offset)*(ConfigPara.calFactor[TTRAFO].corFac);
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001c88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c8e:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	4b7c      	ldr	r3, [pc, #496]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001c98:	edd3 7a5d 	vldr	s15, [r3, #372]	; 0x174
 8001c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001ca2:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001cac:	edc3 7a01 	vstr	s15, [r3, #4]
	//TTrafo = calculateTemperature(TTrafo_Res[procValue]); //Converting resistance to temperature

	//This calculation is taken reference from Sensing.xlsx
	TTrafo_calc = (TTrafo_Res[procValue] /5.5455)*1000;
 8001cb0:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <tempParameter_Calculations+0x300>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc13 	bl	80004e0 <__aeabi_f2d>
 8001cba:	a36b      	add	r3, pc, #428	; (adr r3, 8001e68 <tempParameter_Calculations+0x2d8>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fd90 	bl	80007e4 <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <tempParameter_Calculations+0x308>)
 8001cd2:	f7fe fc5d 	bl	8000590 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe fe69 	bl	80009b4 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <tempParameter_Calculations+0x30c>)
 8001ce6:	6013      	str	r3, [r2, #0]
	TTrafo_meas = (TTrafo_calc -100) /0.39;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <tempParameter_Calculations+0x30c>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001ea0 <tempParameter_Calculations+0x310>
 8001cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fbf1 	bl	80004e0 <__aeabi_f2d>
 8001cfe:	a35c      	add	r3, pc, #368	; (adr r3, 8001e70 <tempParameter_Calculations+0x2e0>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fd6e 	bl	80007e4 <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fe50 	bl	80009b4 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <tempParameter_Calculations+0x314>)
 8001d18:	6013      	str	r3, [r2, #0]
	TTrafo = calculateTrafoTemperature(TTrafo_meas);
 8001d1a:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <tempParameter_Calculations+0x314>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	f7ff fbca 	bl	80014bc <calculateTrafoTemperature>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <tempParameter_Calculations+0x318>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]

	//For temperature calibration (power board), R28_1 and R28_2 changed to 1.5K (earlier 2.2K) and R29_1 and R29_2 changed to 15K (earlier 22K)
	TAfe_Res[rawValue] = (((float)Adc_Avg_Buffer[TAFE]) * ADC_RESOLUTION); // Low pass filter for Tfec (in resistance)
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	4b59      	ldr	r3, [pc, #356]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
	TAfe_LPF.xn = TAfe_Res[rawValue];
 8001d4c:	4b57      	ldr	r3, [pc, #348]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d52:	6013      	str	r3, [r2, #0]
	TAfe_LPF.yn = TAfe_LPF.xn + ((float)ConfigPara.lpf_factor.Tafe*(TAfe_LPF.yn - TAfe_LPF.xn));
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d5c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d62:	ed93 6a01 	vldr	s12, [r3, #4]
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d7a:	edc3 7a01 	vstr	s15, [r3, #4]
	TAfe_Res[procValue] = TAfe_LPF.yn;
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <tempParameter_Calculations+0x320>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d84:	6053      	str	r3, [r2, #4]
	TAfe_Res[procValue] = ((TAfe_Res[procValue] * ConfigPara.calFactor[TAFE].Slope) + ConfigPara.calFactor[TAFE].Offset)*(ConfigPara.calFactor[TAFE].corFac);
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001d88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d8e:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001d98:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8001d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001da2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8001da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001dac:	edc3 7a01 	vstr	s15, [r3, #4]
	TAfe = calculateTemperature(TAfe_Res[procValue]); //Converting resistance to temperature
 8001db0:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <tempParameter_Calculations+0x31c>)
 8001db2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	f7ff fb13 	bl	80013e4 <calculateTemperature>
 8001dbe:	eef0 7a40 	vmov.f32	s15, s0
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <tempParameter_Calculations+0x324>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]

	TPsfb_Res[rawValue] = (((float)Adc_Avg_Buffer[TPSFB]) * ADC_RESOLUTION); // Low pass filter for Tpsfb (in resistance)
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <tempParameter_Calculations+0x2e8>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e7c <tempParameter_Calculations+0x2ec>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001dde:	edc3 7a00 	vstr	s15, [r3]
	TPsfb_LPF.xn = TPsfb_Res[rawValue];
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001de8:	6013      	str	r3, [r2, #0]
	TPsfb_LPF.yn = TPsfb_LPF.xn + ((float)ConfigPara.lpf_factor.Tpsfb *(TPsfb_LPF.yn-TPsfb_LPF.xn));
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001df2:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001df8:	ed93 6a01 	vldr	s12, [r3, #4]
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001e10:	edc3 7a01 	vstr	s15, [r3, #4]
	TPsfb_Res[procValue] = TPsfb_LPF.yn;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <tempParameter_Calculations+0x32c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e1a:	6053      	str	r3, [r2, #4]
	TPsfb_Res[procValue] = /*TPsfb_Res[procValue]/0.000083; */((TPsfb_Res[procValue] * ConfigPara.calFactor[TPSFB].Slope) + ConfigPara.calFactor[TPSFB].Offset)*(ConfigPara.calFactor[TPSFB].corFac);
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e24:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8001e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e2e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8001e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <tempParameter_Calculations+0x2f8>)
 8001e38:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e42:	edc3 7a01 	vstr	s15, [r3, #4]
	TPsfb = calculateTemperature(TPsfb_Res[procValue]); //Converting resistance to
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <tempParameter_Calculations+0x328>)
 8001e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f7ff fac8 	bl	80013e4 <calculateTemperature>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <tempParameter_Calculations+0x330>)
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
    protectionMonitoring_Temp();
 8001e5e:	f7ff fd5b 	bl	8001918 <protectionMonitoring_Temp>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	8d4fdf3b 	.word	0x8d4fdf3b
 8001e6c:	40162e97 	.word	0x40162e97
 8001e70:	8f5c28f6 	.word	0x8f5c28f6
 8001e74:	3fd8f5c2 	.word	0x3fd8f5c2
 8001e78:	20000268 	.word	0x20000268
 8001e7c:	3a5332ed 	.word	0x3a5332ed
 8001e80:	20000494 	.word	0x20000494
 8001e84:	200004f8 	.word	0x200004f8
 8001e88:	2000029c 	.word	0x2000029c
 8001e8c:	200004bc 	.word	0x200004bc
 8001e90:	2000049c 	.word	0x2000049c
 8001e94:	20000500 	.word	0x20000500
 8001e98:	408f4000 	.word	0x408f4000
 8001e9c:	200004b4 	.word	0x200004b4
 8001ea0:	42c80000 	.word	0x42c80000
 8001ea4:	200004b8 	.word	0x200004b8
 8001ea8:	200004c0 	.word	0x200004c0
 8001eac:	200004a4 	.word	0x200004a4
 8001eb0:	20000508 	.word	0x20000508
 8001eb4:	200004c4 	.word	0x200004c4
 8001eb8:	200004ac 	.word	0x200004ac
 8001ebc:	20000510 	.word	0x20000510
 8001ec0:	200004c8 	.word	0x200004c8

08001ec4 <phaseShift_Pwm>:

/* Call this function once after Control Initialisation */
void phaseShift_Pwm(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	if((u8Slavenumber > 0 && u8Slavenumber <= 4)  || (u8Slavenumber > 13 && u8Slavenumber <= 17) || (u8Slavenumber > 26 && u8Slavenumber <= 30 )){
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <phaseShift_Pwm+0x14>
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d90f      	bls.n	8001ef8 <phaseShift_Pwm+0x34>
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b0d      	cmp	r3, #13
 8001ede:	d903      	bls.n	8001ee8 <phaseShift_Pwm+0x24>
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d907      	bls.n	8001ef8 <phaseShift_Pwm+0x34>
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b1a      	cmp	r3, #26
 8001eee:	d907      	bls.n	8001f00 <phaseShift_Pwm+0x3c>
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b1e      	cmp	r3, #30
 8001ef6:	d803      	bhi.n	8001f00 <phaseShift_Pwm+0x3c>
		HRTIM1->sMasterRegs.MCMP1R = 1; //0 degree phase shift
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	61da      	str	r2, [r3, #28]
 8001efe:	e03d      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else if((u8Slavenumber > 4 && u8Slavenumber <= 8) || (u8Slavenumber > 17 && u8Slavenumber <= 21) || (u8Slavenumber > 30 && u8Slavenumber <= 34 )){
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d903      	bls.n	8001f10 <phaseShift_Pwm+0x4c>
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d90f      	bls.n	8001f30 <phaseShift_Pwm+0x6c>
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d903      	bls.n	8001f20 <phaseShift_Pwm+0x5c>
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b15      	cmp	r3, #21
 8001f1e:	d907      	bls.n	8001f30 <phaseShift_Pwm+0x6c>
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b1e      	cmp	r3, #30
 8001f26:	d908      	bls.n	8001f3a <phaseShift_Pwm+0x76>
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b22      	cmp	r3, #34	; 0x22
 8001f2e:	d804      	bhi.n	8001f3a <phaseShift_Pwm+0x76>
			HRTIM1->sMasterRegs.MCMP1R = 11333; //120 degree phase shift
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f32:	f642 4245 	movw	r2, #11333	; 0x2c45
 8001f36:	61da      	str	r2, [r3, #28]
 8001f38:	e020      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else if((u8Slavenumber > 8 && u8Slavenumber <= 13) || (u8Slavenumber > 21 && u8Slavenumber <= 26) || (u8Slavenumber > 34 && u8Slavenumber <= 39 )){
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d903      	bls.n	8001f4a <phaseShift_Pwm+0x86>
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	2b0d      	cmp	r3, #13
 8001f48:	d90f      	bls.n	8001f6a <phaseShift_Pwm+0xa6>
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2b15      	cmp	r3, #21
 8001f50:	d903      	bls.n	8001f5a <phaseShift_Pwm+0x96>
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	2b1a      	cmp	r3, #26
 8001f58:	d907      	bls.n	8001f6a <phaseShift_Pwm+0xa6>
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b22      	cmp	r3, #34	; 0x22
 8001f60:	d908      	bls.n	8001f74 <phaseShift_Pwm+0xb0>
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <phaseShift_Pwm+0xc4>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b27      	cmp	r3, #39	; 0x27
 8001f68:	d804      	bhi.n	8001f74 <phaseShift_Pwm+0xb0>
			HRTIM1->sMasterRegs.MCMP1R = 22666; //240 degree phase shift
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f6c:	f645 028a 	movw	r2, #22666	; 0x588a
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	e003      	b.n	8001f7c <phaseShift_Pwm+0xb8>
	}
	else{
		HRTIM1->sMasterRegs.MCMP1R = 0; //No waveform
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <phaseShift_Pwm+0xc8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200008f2 	.word	0x200008f2
 8001f8c:	40016800 	.word	0x40016800

08001f90 <dutyUpdate>:

void dutyUpdate(void){
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

	if(u8Slavenumber > 0 && u8Slavenumber <= 13  ){
 8001f94:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <dutyUpdate+0x124>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <dutyUpdate+0x34>
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <dutyUpdate+0x124>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b0d      	cmp	r3, #13
 8001fa2:	d80f      	bhi.n	8001fc4 <dutyUpdate+0x34>
		V_cmd = ((float)(DutyRef_R - 2000)/(10 * 100));
 8001fa4:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <dutyUpdate+0x128>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80020bc <dutyUpdate+0x12c>
 8001fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fbc:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <dutyUpdate+0x130>)
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
 8001fc2:	e02e      	b.n	8002022 <dutyUpdate+0x92>
	}
	else if (u8Slavenumber > 13 && u8Slavenumber <= 26  ){
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <dutyUpdate+0x124>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	2b0d      	cmp	r3, #13
 8001fca:	d913      	bls.n	8001ff4 <dutyUpdate+0x64>
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <dutyUpdate+0x124>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2b1a      	cmp	r3, #26
 8001fd2:	d80f      	bhi.n	8001ff4 <dutyUpdate+0x64>
		V_cmd = ((float)(DutyRef_Y - 2000)/(10 * 100));
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <dutyUpdate+0x134>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	eddf 6a35 	vldr	s13, [pc, #212]	; 80020bc <dutyUpdate+0x12c>
 8001fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <dutyUpdate+0x130>)
 8001fee:	edc3 7a00 	vstr	s15, [r3]
 8001ff2:	e016      	b.n	8002022 <dutyUpdate+0x92>
	}
	else if(u8Slavenumber > 26 && u8Slavenumber <= 39 ){
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <dutyUpdate+0x124>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b1a      	cmp	r3, #26
 8001ffa:	d912      	bls.n	8002022 <dutyUpdate+0x92>
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <dutyUpdate+0x124>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	2b27      	cmp	r3, #39	; 0x27
 8002002:	d80e      	bhi.n	8002022 <dutyUpdate+0x92>
		V_cmd = ((float)(DutyRef_B - 2000)/(10 * 100));
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <dutyUpdate+0x138>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002014:	eddf 6a29 	vldr	s13, [pc, #164]	; 80020bc <dutyUpdate+0x12c>
 8002018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <dutyUpdate+0x130>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
	}

	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP3xR = (uint16_t)(((float) V_cmd * HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR  + (float) HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR) * 0.5f) ;
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <dutyUpdate+0x13c>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <dutyUpdate+0x130>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <dutyUpdate+0x13c>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002058:	ee17 3a90 	vmov	r3, s15
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <dutyUpdate+0x13c>)
 8002060:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP3xR = (uint16_t)(((float)(- V_cmd) * HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR + (float) HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR) * 0.5f);
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <dutyUpdate+0x130>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb1 7a67 	vneg.f32	s14, s15
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <dutyUpdate+0x13c>)
 8002070:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <dutyUpdate+0x13c>)
 8002082:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209e:	ee17 3a90 	vmov	r3, s15
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <dutyUpdate+0x13c>)
 80020a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	200008f2 	.word	0x200008f2
 80020b8:	200004cc 	.word	0x200004cc
 80020bc:	447a0000 	.word	0x447a0000
 80020c0:	20000000 	.word	0x20000000
 80020c4:	200004ce 	.word	0x200004ce
 80020c8:	200004d0 	.word	0x200004d0
 80020cc:	40016800 	.word	0x40016800

080020d0 <ControlInit>:
* Function Description: Initializing peripherals
* Input:
* Return:
*/
void ControlInit(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	// System Interrupt for Low priority task based on RoundRobin
	TIM6->PSC = 1; //Timer 6 (2 KHz= 500us)
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <ControlInit+0xb4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = (uint16_t)(SystemCoreClock/((1+TIM6->PSC)*(2000))) - 1;
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <ControlInit+0xb8>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <ControlInit+0xb4>)
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	3301      	adds	r3, #1
 80020e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <ControlInit+0xb4>)
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// High Priority System Interrupt for Control System, --> ADC1 and ADC2 triggered with this timer
	TIM7->PSC = 0; //Timer 7
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <ControlInit+0xbc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = (uint16_t)(SystemCoreClock/((1+TIM7->PSC)*(5000))) - 1;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <ControlInit+0xb8>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <ControlInit+0xbc>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	3301      	adds	r3, #1
 8002108:	f241 3188 	movw	r1, #5000	; 0x1388
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <ControlInit+0xbc>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

	// for Slow Quantities Measurement like Temperature-> ADC3 and ADC4  is triggered with this timer
	TIM4->PSC=249; //Timer 4 at 10*4 = 40 Hz
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <ControlInit+0xc0>)
 800211e:	22f9      	movs	r2, #249	; 0xf9
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = (uint16_t)(SystemCoreClock/((1+TIM4->PSC)*(40))) - 1;
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <ControlInit+0xb8>)
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <ControlInit+0xc0>)
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	fbb1 f3f3 	udiv	r3, r1, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <ControlInit+0xc0>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start_IT(&htim4);
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <ControlInit+0xc4>)
 8002142:	f008 fb31 	bl	800a7a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <ControlInit+0xc8>)
 8002148:	f008 fb2e 	bl	800a7a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800214c:	4813      	ldr	r0, [pc, #76]	; (800219c <ControlInit+0xcc>)
 800214e:	f008 fb2b 	bl	800a7a8 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Adc1_Buffer, ADC1_BUFFER_SIZE); //Start ADC1
 8002152:	2210      	movs	r2, #16
 8002154:	4912      	ldr	r1, [pc, #72]	; (80021a0 <ControlInit+0xd0>)
 8002156:	4813      	ldr	r0, [pc, #76]	; (80021a4 <ControlInit+0xd4>)
 8002158:	f003 f9cc 	bl	80054f4 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)Adc2_Buffer, ADC2_BUFFER_SIZE); //Start ADC2
//	HAL_ADC_Start_DMA(&hadc3,(uint32_t*)Adc3_Buffer, ADC3_BUFFER_SIZE); //Start ADC3
//	HAL_ADC_Start_DMA(&hadc4,(uint32_t*)Adc4_Buffer, ADC4_BUFFER_SIZE); //Start ADC4

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC
 800215c:	2100      	movs	r1, #0
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <ControlInit+0xd8>)
 8002160:	f004 fa84 	bl	800666c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start DAC
 8002164:	2110      	movs	r1, #16
 8002166:	4810      	ldr	r0, [pc, #64]	; (80021a8 <ControlInit+0xd8>)
 8002168:	f004 fa80 	bl	800666c <HAL_DAC_Start>

//	HAL_GPIO_WritePin(INH_GPIO_Port, INH_Pin, GPIO_PIN_RESET); // It is to be set Low for enable the pulses from Hardware IC (74HC573).

	HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_MASTER + HRTIM_TIMERID_TIMER_A + HRTIM_TIMERID_TIMER_B + HRTIM_TIMERID_TIMER_C + HRTIM_TIMERID_TIMER_D+HRTIM_TIMERID_TIMER_E ); //Timer A,B,C and D of HRTIM1 counter start
 800216c:	f44f 117c 	mov.w	r1, #4128768	; 0x3f0000
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <ControlInit+0xdc>)
 8002172:	f005 fe3c 	bl	8007dee <HAL_HRTIM_WaveformCountStart>
	
	faultInit(); // Fault Structure Initialization
 8002176:	f000 faef 	bl	8002758 <faultInit>
	reset_driver(); // To reset all the driver before starting Pulses
 800217a:	f000 fae5 	bl	8002748 <reset_driver>

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40001000 	.word	0x40001000
 8002188:	200001b8 	.word	0x200001b8
 800218c:	40001400 	.word	0x40001400
 8002190:	40000800 	.word	0x40000800
 8002194:	200009a8 	.word	0x200009a8
 8002198:	200009f4 	.word	0x200009f4
 800219c:	20000a40 	.word	0x20000a40
 80021a0:	200001e4 	.word	0x200001e4
 80021a4:	200006b8 	.word	0x200006b8
 80021a8:	20000784 	.word	0x20000784
 80021ac:	200007a0 	.word	0x200007a0

080021b0 <ParaInit>:
* Function Description: Parameter initialization
* Input:
* Return:
*/
void ParaInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	ConfigPara.Vrated = 1000.0f; //system rated Line to Line voltage (RMS)
 80021b4:	4b63      	ldr	r3, [pc, #396]	; (8002344 <ParaInit+0x194>)
 80021b6:	4a64      	ldr	r2, [pc, #400]	; (8002348 <ParaInit+0x198>)
 80021b8:	601a      	str	r2, [r3, #0]
	ConfigPara.Prated = 15000.0f; //system rated Power (Peak Power)
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <ParaInit+0x194>)
 80021bc:	4a63      	ldr	r2, [pc, #396]	; (800234c <ParaInit+0x19c>)
 80021be:	609a      	str	r2, [r3, #8]
	ConfigPara.Irated = ConfigPara.Prated/(1.73f*ConfigPara.Vrated); //system rated Current (RMS)
 80021c0:	4b60      	ldr	r3, [pc, #384]	; (8002344 <ParaInit+0x194>)
 80021c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <ParaInit+0x194>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002350 <ParaInit+0x1a0>
 80021d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <ParaInit+0x194>)
 80021da:	edc3 7a01 	vstr	s15, [r3, #4]
	ConfigPara.Voutrated = 1000.0f; //converter DC output voltage
 80021de:	4b59      	ldr	r3, [pc, #356]	; (8002344 <ParaInit+0x194>)
 80021e0:	4a59      	ldr	r2, [pc, #356]	; (8002348 <ParaInit+0x198>)
 80021e2:	60da      	str	r2, [r3, #12]
	ConfigPara.Fsystem = 50.0f; //supply frequency
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <ParaInit+0x194>)
 80021e6:	4a5b      	ldr	r2, [pc, #364]	; (8002354 <ParaInit+0x1a4>)
 80021e8:	621a      	str	r2, [r3, #32]
	ConfigPara.Ioutrated = ConfigPara.Prated/ConfigPara.Voutrated;
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <ParaInit+0x194>)
 80021ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80021f0:	4b54      	ldr	r3, [pc, #336]	; (8002344 <ParaInit+0x194>)
 80021f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80021f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fa:	4b52      	ldr	r3, [pc, #328]	; (8002344 <ParaInit+0x194>)
 80021fc:	edc3 7a04 	vstr	s15, [r3, #16]

	ConfigPara.freqInner = 5000.0f ;//AFE switching freq.
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <ParaInit+0x194>)
 8002202:	4a55      	ldr	r2, [pc, #340]	; (8002358 <ParaInit+0x1a8>)
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
	ConfigPara.freqAfe = 5000.0f; //Front-End-Converter switching frequency
 8002206:	4b4f      	ldr	r3, [pc, #316]	; (8002344 <ParaInit+0x194>)
 8002208:	4a53      	ldr	r2, [pc, #332]	; (8002358 <ParaInit+0x1a8>)
 800220a:	61da      	str	r2, [r3, #28]
	ConfigPara.PSFBdeadband = 1.2f; //deadband value in uSecond for PSFB
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <ParaInit+0x194>)
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <ParaInit+0x1ac>)
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
	ConfigPara.FECdeadband = 1.2f; //deadband value in uSecond for FEC
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <ParaInit+0x194>)
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <ParaInit+0x1ac>)
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
	ConfigPara.freqPSFB = 20000.0f; //Phase-Shifted-Full-Bridge switching frequency
 8002218:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <ParaInit+0x194>)
 800221a:	4a51      	ldr	r2, [pc, #324]	; (8002360 <ParaInit+0x1b0>)
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
	ConfigPara.calFactor[IAFE].corFac = 0;
	ConfigPara.calFactor[ISUP].Gain = (AC_CURRENT_GAIN*2.0*1.41/3.0f);
	ConfigPara.calFactor[ISUP].corFac = 0;*/

	//  Calibration factor for DC quantities
	ConfigPara.calFactor[IPSFB].Slope = (OUTPUT_CURRENT_GAIN/3.0f);
 800221e:	4b49      	ldr	r3, [pc, #292]	; (8002344 <ParaInit+0x194>)
 8002220:	4a50      	ldr	r2, [pc, #320]	; (8002364 <ParaInit+0x1b4>)
 8002222:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ConfigPara.calFactor[IPSFB].Offset = 0;
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <ParaInit+0x194>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ConfigPara.calFactor[IPSFB].corFac = 1;
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <ParaInit+0x194>)
 8002232:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/*	This section is not mounted in slave PCB
 * ConfigPara.calFactor[VOUT].Slope = 637.7848f;
	ConfigPara.calFactor[VOUT].Offset = -36.7093f;
	ConfigPara.calFactor[VOUT].corFac = 1;*/

	ConfigPara.calFactor[IOUT].Slope =  9.4845f; /*(OUTPUT_CURRENT_GAIN/3.0f)*/
 800223a:	4b42      	ldr	r3, [pc, #264]	; (8002344 <ParaInit+0x194>)
 800223c:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <ParaInit+0x1b8>)
 800223e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	ConfigPara.calFactor[IOUT].Offset = -9.089f;
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <ParaInit+0x194>)
 8002244:	4a49      	ldr	r2, [pc, #292]	; (800236c <ParaInit+0x1bc>)
 8002246:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ConfigPara.calFactor[IOUT].Gain = ConfigPara.calFactor[IOUT].boardGain * ConfigPara.calFactor[IOUT].sensorGain * ADC_RESOLUTION;
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <ParaInit+0x194>)
 800224c:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <ParaInit+0x194>)
 8002252:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002370 <ParaInit+0x1c0>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <ParaInit+0x194>)
 8002264:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	ConfigPara.calFactor[IOUT].boardGain = 1;
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <ParaInit+0x194>)
 800226a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800226e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	ConfigPara.calFactor[IOUT].sensorGain = 1;
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <ParaInit+0x194>)
 8002274:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002278:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	ConfigPara.calFactor[IOUT].corFac = 0.64;
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <ParaInit+0x194>)
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <ParaInit+0x1c4>)
 8002280:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	//ConfigPara.calFactor[VDC_BUS].Gain=SENSOR_GAIN*CKT_GAIN;//
	ConfigPara.calFactor[VBUS].Slope = 372.51f;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <ParaInit+0x194>)
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <ParaInit+0x1c8>)
 8002288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ConfigPara.calFactor[VBUS].Offset = -0.3692f;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <ParaInit+0x194>)
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <ParaInit+0x1cc>)
 8002290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	ConfigPara.calFactor[VBUS].corFac = 1;
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <ParaInit+0x194>)
 8002296:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800229a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Calibration factor for temperature sensing (Slope currently zero will add the formula later on)
	//ConfigPara.calFactor[NTCDIODE].Gain=0;
	ConfigPara.calFactor[TDIODE].Slope = 12079.0f;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <ParaInit+0x194>)
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <ParaInit+0x1d0>)
 80022a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	ConfigPara.calFactor[TDIODE].Offset = 0;
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <ParaInit+0x194>)
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	ConfigPara.calFactor[TDIODE].corFac = 1;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <ParaInit+0x194>)
 80022b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022b6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168



	//ConfigPara.calFactor[TTRAFO].Gain=0;
	ConfigPara.calFactor[TTRAFO].Slope = 1.0f;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <ParaInit+0x194>)
 80022bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022c0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	ConfigPara.calFactor[TTRAFO].Offset = 0;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <ParaInit+0x194>)
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	ConfigPara.calFactor[TTRAFO].corFac = 1;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <ParaInit+0x194>)
 80022d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180



	//ConfigPara.calFactor[TFEC].Gain=0;
	ConfigPara.calFactor[TAFE].Slope = 12079.0f; //From calibration
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <ParaInit+0x194>)
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <ParaInit+0x1d0>)
 80022dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	ConfigPara.calFactor[TAFE].Offset = 0.0f; //From calibration
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <ParaInit+0x194>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	ConfigPara.calFactor[TAFE].corFac = 1;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <ParaInit+0x194>)
 80022ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022f0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	//ConfigPara.calFactor[TPSFB].Gain=0;
	ConfigPara.calFactor[TPSFB].Slope = 12079.0f; //From calibration
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <ParaInit+0x194>)
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <ParaInit+0x1d0>)
 80022f8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	ConfigPara.calFactor[TPSFB].Offset = 0.0f; //From calibration
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <ParaInit+0x194>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	ConfigPara.calFactor[TPSFB].corFac = 1;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <ParaInit+0x194>)
 8002308:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800230c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 * ConfigPara.DcBlocker_factor.Iafe = 0.998f;
	ConfigPara.DcBlocker_factor.Vsup = 0.998f;
	ConfigPara.DcBlocker_factor.Isup = 0.998f;*/

	//Low Pass Filter factor for DC quantities
	ConfigPara.lpf_factor.Tdiode = 0.8f;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <ParaInit+0x194>)
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <ParaInit+0x1d4>)
 8002314:	671a      	str	r2, [r3, #112]	; 0x70
	ConfigPara.lpf_factor.Ttrafo = 0.8f;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <ParaInit+0x194>)
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <ParaInit+0x1d4>)
 800231a:	675a      	str	r2, [r3, #116]	; 0x74
	ConfigPara.lpf_factor.Tafe = 0.8f;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <ParaInit+0x194>)
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <ParaInit+0x1d4>)
 8002320:	67da      	str	r2, [r3, #124]	; 0x7c
	ConfigPara.lpf_factor.Tpsfb = 0.8f;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <ParaInit+0x194>)
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <ParaInit+0x1d4>)
 8002326:	679a      	str	r2, [r3, #120]	; 0x78
	ConfigPara.lpf_factor.Ipsfb = 0.995f;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ParaInit+0x194>)
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <ParaInit+0x1d8>)
 800232c:	661a      	str	r2, [r3, #96]	; 0x60
	//ConfigPara.lpf_factor.Vout = 0.995f;		//This section is not mounted in slave PCB
	ConfigPara.lpf_factor.VBus = 0.995f;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <ParaInit+0x194>)
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <ParaInit+0x1d8>)
 8002332:	669a      	str	r2, [r3, #104]	; 0x68
	ConfigPara.lpf_factor.Iout = 0.995f;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <ParaInit+0x194>)
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <ParaInit+0x1d8>)
 8002338:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	2000029c 	.word	0x2000029c
 8002348:	447a0000 	.word	0x447a0000
 800234c:	466a6000 	.word	0x466a6000
 8002350:	3fdd70a4 	.word	0x3fdd70a4
 8002354:	42480000 	.word	0x42480000
 8002358:	459c4000 	.word	0x459c4000
 800235c:	3f99999a 	.word	0x3f99999a
 8002360:	469c4000 	.word	0x469c4000
 8002364:	40a00000 	.word	0x40a00000
 8002368:	4117c083 	.word	0x4117c083
 800236c:	c1116c8b 	.word	0xc1116c8b
 8002370:	3a5332ed 	.word	0x3a5332ed
 8002374:	3f23d70a 	.word	0x3f23d70a
 8002378:	43ba4148 	.word	0x43ba4148
 800237c:	bebd07c8 	.word	0xbebd07c8
 8002380:	463cbc00 	.word	0x463cbc00
 8002384:	3f4ccccd 	.word	0x3f4ccccd
 8002388:	3f7eb852 	.word	0x3f7eb852

0800238c <Tim7_Execution>:
* Function Description:
* Input:
* Return:
*/
void Tim7_Execution(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	error_display(); // Error display function
 8002390:	f001 f986 	bl	80036a0 <error_display>
//	MCU_LIVE_ON;
    Parameter_Calculations();
 8002394:	f7ff fb22 	bl	80019dc <Parameter_Calculations>
    protectionMonitoring_DC();
 8002398:	f7ff fa76 	bl	8001888 <protectionMonitoring_DC>

	faultDetection(); // keep this enable to detect fault
 800239c:	f000 fdb6 	bl	8002f0c <faultDetection>
	slave_health();
 80023a0:	f000 fcb6 	bl	8002d10 <slave_health>
	DAC_Out();
 80023a4:	f7fe fddc 	bl	8000f60 <DAC_Out>
	turnOn_Scan();
 80023a8:	f000 f90c 	bl	80025c4 <turnOn_Scan>

	if(SoftStartFlag == 1){
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <Tim7_Execution+0x158>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d11a      	bne.n	80023ea <Tim7_Execution+0x5e>
		if((phase_diff.Dynamic == phase_diff.Fix) && (phase_diff.Fix > 0)  ){
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <Tim7_Execution+0x15c>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <Tim7_Execution+0x15c>)
 80023bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	d10f      	bne.n	80023ea <Tim7_Execution+0x5e>
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <Tim7_Execution+0x15c>)
 80023cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	dd07      	ble.n	80023ea <Tim7_Execution+0x5e>
			SoftStartFlag = 0;
 80023da:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <Tim7_Execution+0x158>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
			status1.bits.psfbFeedback = 1;
 80023e0:	4a42      	ldr	r2, [pc, #264]	; (80024ec <Tim7_Execution+0x160>)
 80023e2:	7813      	ldrb	r3, [r2, #0]
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	7013      	strb	r3, [r2, #0]
		}
	}

	if(Psfb_OnOffFlag == 1){
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <Tim7_Execution+0x164>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d124      	bne.n	800243c <Tim7_Execution+0xb0>
		softStartVariable(&phase_diff, 5000.0f, 4250.0f/7.0f , 4250.0f/7.0f);
 80023f2:	ed9f 1a40 	vldr	s2, [pc, #256]	; 80024f4 <Tim7_Execution+0x168>
 80023f6:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80024f4 <Tim7_Execution+0x168>
 80023fa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80024f8 <Tim7_Execution+0x16c>
 80023fe:	483a      	ldr	r0, [pc, #232]	; (80024e8 <Tim7_Execution+0x15c>)
 8002400:	f000 fd8b 	bl	8002f1a <softStartVariable>
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = 1+ phase_diff.Dynamic;
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <Tim7_Execution+0x15c>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800240e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <Tim7_Execution+0x170>)
 8002414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002418:	ee17 2a90 	vmov	r2, s15
 800241c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = 4250 + phase_diff.Dynamic;
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <Tim7_Execution+0x15c>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002500 <Tim7_Execution+0x174>
 800242a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <Tim7_Execution+0x170>)
 8002430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002434:	ee17 2a90 	vmov	r2, s15
 8002438:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

				/* Removing the AFE sine wave generation function as it is not needed now.
				 * Not removing from code because it maybe needed in future
				 */
//				if(HAL_GPIO_ReadPin(AFE_Switch_GPIO_Port,AFE_Switch_Pin) ==0 && PWMON_flag==1 && (status1.bits.sHealthStatus == 0))
				if(PWMON_flag==1 && (status1.bits.sHealthStatus == 0))
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <Tim7_Execution+0x178>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d149      	bne.n	80024d8 <Tim7_Execution+0x14c>
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <Tim7_Execution+0x160>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d142      	bne.n	80024d8 <Tim7_Execution+0x14c>
				{
					test_mode_count++;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <Tim7_Execution+0x17c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <Tim7_Execution+0x17c>)
 800245c:	701a      	strb	r2, [r3, #0]
					if(test_mode_count>=100)
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <Tim7_Execution+0x17c>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b63      	cmp	r3, #99	; 0x63
 8002464:	d902      	bls.n	800246c <Tim7_Execution+0xe0>
					{
						test_mode_count =0;
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <Tim7_Execution+0x17c>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
					}
					timer_period = HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR;
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <Tim7_Execution+0x170>)
 800246e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <Tim7_Execution+0x180>)
 8002474:	6013      	str	r3, [r2, #0]

					V_cmd = (R_sine_wave[test_mode_count]* mod_index+1) * (timer_period/2) ;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <Tim7_Execution+0x17c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4a25      	ldr	r2, [pc, #148]	; (8002510 <Tim7_Execution+0x184>)
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <Tim7_Execution+0x188>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <Tim7_Execution+0x180>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <Tim7_Execution+0x18c>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]
					//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, V_cmd*0.1);

					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP3xR = V_cmd;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <Tim7_Execution+0x18c>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <Tim7_Execution+0x170>)
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	ee17 2a90 	vmov	r2, s15
 80024be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP3xR = V_cmd;
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <Tim7_Execution+0x18c>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <Tim7_Execution+0x170>)
 80024ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80024d6:	e002      	b.n	80024de <Tim7_Execution+0x152>
				}
				else
				{
					dutyUpdate();
 80024d8:	f7ff fd5a 	bl	8001f90 <dutyUpdate>
				}
		#endif

//				MCU_LIVE_OFF;
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200004d4 	.word	0x200004d4
 80024e8:	200006b0 	.word	0x200006b0
 80024ec:	2000054c 	.word	0x2000054c
 80024f0:	200004d2 	.word	0x200004d2
 80024f4:	4417c925 	.word	0x4417c925
 80024f8:	459c4000 	.word	0x459c4000
 80024fc:	40016800 	.word	0x40016800
 8002500:	4584d000 	.word	0x4584d000
 8002504:	20000518 	.word	0x20000518
 8002508:	20000524 	.word	0x20000524
 800250c:	20000528 	.word	0x20000528
 8002510:	20000008 	.word	0x20000008
 8002514:	20000004 	.word	0x20000004
 8002518:	20000000 	.word	0x20000000

0800251c <TIM6_Execution>:
* Function Description:Low priority tasks execution in round robin algorithm
* Input:
* Return:
*/
void TIM6_Execution(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

	CNT_TIM6++; // Increment at every 50 mSec
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <TIM6_Execution+0x88>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <TIM6_Execution+0x88>)
 8002528:	6013      	str	r3, [r2, #0]
	if (CNT_TIM6%2 == 0){
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <TIM6_Execution+0x88>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <TIM6_Execution+0x20>
		mSec1_Flag = 1; // Every 1 mSec
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <TIM6_Execution+0x8c>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
	}
	if (CNT_TIM6%80 == 0){
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <TIM6_Execution+0x88>)
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <TIM6_Execution+0x90>)
 8002542:	fba3 2301 	umull	r2, r3, r3, r1
 8002546:	099a      	lsrs	r2, r3, #6
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1aca      	subs	r2, r1, r3
 8002552:	2a00      	cmp	r2, #0
 8002554:	d102      	bne.n	800255c <TIM6_Execution+0x40>
		mSec40_Flag = 1; // Every 40 mSec
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <TIM6_Execution+0x94>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
	}
	if (CNT_TIM6%2000 == 0){
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <TIM6_Execution+0x88>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <TIM6_Execution+0x98>)
 8002562:	fba3 1302 	umull	r1, r3, r3, r2
 8002566:	09db      	lsrs	r3, r3, #7
 8002568:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <TIM6_Execution+0x60>
		Sec1_Flag = 1; // Every 1 Sec
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <TIM6_Execution+0x9c>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
	}
	if(CNT_TIM6%100 == 0){
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <TIM6_Execution+0x88>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <TIM6_Execution+0xa0>)
 8002582:	fba3 1302 	umull	r1, r3, r3, r2
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <TIM6_Execution+0x82>
		tempParameter_Calculations();
 8002594:	f7ff fafc 	bl	8001b90 <tempParameter_Calculations>
		mSec100_Flag = 1; //Every 100 mSec
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <TIM6_Execution+0xa4>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
	}
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000454 	.word	0x20000454
 80025a8:	20000450 	.word	0x20000450
 80025ac:	cccccccd 	.word	0xcccccccd
 80025b0:	20000451 	.word	0x20000451
 80025b4:	10624dd3 	.word	0x10624dd3
 80025b8:	20000452 	.word	0x20000452
 80025bc:	51eb851f 	.word	0x51eb851f
 80025c0:	20000453 	.word	0x20000453

080025c4 <turnOn_Scan>:
* Function Description: //Function to turn on the slave (SYNC pin will receive signal from master
* Input:
* Return:
*/
void turnOn_Scan(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0

//	g_cell_test_switch =GET_CELL_TEST_SWITCH;
	if (g_cell_test_switch ==0)		// CELL TEST MODE
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <turnOn_Scan+0x110>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <turnOn_Scan+0x22>
	{
		LED1_ON;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2120      	movs	r1, #32
 80025d4:	4840      	ldr	r0, [pc, #256]	; (80026d8 <turnOn_Scan+0x114>)
 80025d6:	f004 ff11 	bl	80073fc <HAL_GPIO_WritePin>
		CELL_Mode = 1;		//Test mode enable
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <turnOn_Scan+0x118>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
		CELL_TEST();
 80025e0:	f7ff f804 	bl	80015ec <CELL_TEST>
 80025e4:	e060      	b.n	80026a8 <turnOn_Scan+0xe4>
	}

	else
	{
		CELL_Mode = 0;		// Normal mode of operation
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <turnOn_Scan+0x118>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
		LED1_OFF;
 80025ec:	2200      	movs	r2, #0
 80025ee:	2120      	movs	r1, #32
 80025f0:	4839      	ldr	r0, [pc, #228]	; (80026d8 <turnOn_Scan+0x114>)
 80025f2:	f004 ff03 	bl	80073fc <HAL_GPIO_WritePin>
		if((cmd.bits.psfb_on == 1) && (Psfb_OnOffFlag == 0) && (TurnONFlag == 0)  && (status1.bits.sHealthStatus == 0) )
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <turnOn_Scan+0x11c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <turnOn_Scan+0x68>
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <turnOn_Scan+0x120>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10f      	bne.n	800262c <turnOn_Scan+0x68>
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <turnOn_Scan+0x124>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <turnOn_Scan+0x68>
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <turnOn_Scan+0x128>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <turnOn_Scan+0x68>
		{
			Psfb_OnOffFlag = 1;
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <turnOn_Scan+0x120>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
			PSFBON();
 8002628:	f7ff f886 	bl	8001738 <PSFBON>
		}

		if((cmd.bits.system_on == 1) && (TurnONFlag == 0) && (status1.bits.psfbFeedback == 1)   && (status1.bits.sHealthStatus == 0) )
 800262c:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <turnOn_Scan+0x11c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d014      	beq.n	8002664 <turnOn_Scan+0xa0>
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <turnOn_Scan+0x124>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d110      	bne.n	8002664 <turnOn_Scan+0xa0>
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <turnOn_Scan+0x128>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <turnOn_Scan+0xa0>
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <turnOn_Scan+0x128>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <turnOn_Scan+0xa0>
		{
			turnOn();
 800265e:	f000 f84b 	bl	80026f8 <turnOn>
 8002662:	e021      	b.n	80026a8 <turnOn_Scan+0xe4>
		}
		else if ((cmd.bits.system_on == 0 && TurnONFlag == 1 )  || (status1.bits.sHealthStatus != 0)  || ( (status1.bits.psfbFeedback == 1) && (cmd.bits.psfb_on == 0) )  )
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <turnOn_Scan+0x11c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <turnOn_Scan+0xb6>
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <turnOn_Scan+0x124>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d014      	beq.n	80026a4 <turnOn_Scan+0xe0>
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <turnOn_Scan+0x128>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <turnOn_Scan+0xe0>
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <turnOn_Scan+0x128>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <turnOn_Scan+0xe4>
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <turnOn_Scan+0x11c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <turnOn_Scan+0xe4>
		{
			turnOff();
 80026a4:	f000 f83c 	bl	8002720 <turnOff>
			//NOP;
		}
	}

//	g_reset_switch = GET_RESET_SWITCH;
    if (g_reset_switch ==0)        //fault reset through hardware switch for testing purpose
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <turnOn_Scan+0x12c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10e      	bne.n	80026ce <turnOn_Scan+0x10a>
    {
        fault_det++;
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <turnOn_Scan+0x130>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <turnOn_Scan+0x130>)
 80026b8:	6013      	str	r3, [r2, #0]
    	cmd.bits.fault_reset=1;
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <turnOn_Scan+0x11c>)
 80026bc:	7813      	ldrb	r3, [r2, #0]
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	7013      	strb	r3, [r2, #0]
    	LED2_OFF;
 80026c4:	2200      	movs	r2, #0
 80026c6:	2108      	movs	r1, #8
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <turnOn_Scan+0x114>)
 80026ca:	f004 fe97 	bl	80073fc <HAL_GPIO_WritePin>
    }
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000052e 	.word	0x2000052e
 80026d8:	48000400 	.word	0x48000400
 80026dc:	2000051c 	.word	0x2000051c
 80026e0:	20000548 	.word	0x20000548
 80026e4:	200004d2 	.word	0x200004d2
 80026e8:	200004d3 	.word	0x200004d3
 80026ec:	2000054c 	.word	0x2000054c
 80026f0:	2000052f 	.word	0x2000052f
 80026f4:	20000520 	.word	0x20000520

080026f8 <turnOn>:

void turnOn()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	TurnONFlag=1;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <turnOn+0x20>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
	if(cmd.bits.afe_pwm_mask == 1){
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <turnOn+0x24>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <turnOn+0x1c>
		PWMON();
 8002710:	f7ff f8a0 	bl	8001854 <PWMON>
	}
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200004d3 	.word	0x200004d3
 800271c:	20000548 	.word	0x20000548

08002720 <turnOff>:

void turnOff()
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	cmd.bits.system_on = 0;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <turnOff+0x20>)
 8002726:	7813      	ldrb	r3, [r2, #0]
 8002728:	f36f 0300 	bfc	r3, #0, #1
 800272c:	7013      	strb	r3, [r2, #0]
	TurnONFlag = 0;
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <turnOff+0x24>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
	PWMOFF();
 8002734:	f7ff f898 	bl	8001868 <PWMOFF>
	PSFBOFF();
 8002738:	f7ff f82e 	bl	8001798 <PSFBOFF>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000548 	.word	0x20000548
 8002744:	200004d3 	.word	0x200004d3

08002748 <reset_driver>:
#include "interface.h"
#include "error_display.h"
uint8_t fault_timer=0;

void reset_driver()
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(DRST_GPIO_Port, DRST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(DRST_GPIO_Port, DRST_Pin, GPIO_PIN_SET);
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <faultInit>:
 * We will check the parameter after calling the function
 * That will enable us to set the fault bit
 */
//Currently dummy values are given to the faults
void faultInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	//Over Idc (link current) parameters
	overlinkCurr.ovlCount = 0; //always initialized as 0
 800275c:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <faultInit+0x280>)
 800275e:	2200      	movs	r2, #0
 8002760:	801a      	strh	r2, [r3, #0]
	overlinkCurr.ovlFault = 0; //always initialized as 0
 8002762:	4b9d      	ldr	r3, [pc, #628]	; (80029d8 <faultInit+0x280>)
 8002764:	2200      	movs	r2, #0
 8002766:	805a      	strh	r2, [r3, #2]
	overlinkCurr.ovlResetCount = 0; //always initialized as 0
 8002768:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <faultInit+0x280>)
 800276a:	2200      	movs	r2, #0
 800276c:	809a      	strh	r2, [r3, #4]
	overlinkCurr.ovlNoOfReset = 3;
 800276e:	4b9a      	ldr	r3, [pc, #616]	; (80029d8 <faultInit+0x280>)
 8002770:	2203      	movs	r2, #3
 8002772:	80da      	strh	r2, [r3, #6]
	overlinkCurr.ovlFaultLatched = 0;
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <faultInit+0x280>)
 8002776:	2200      	movs	r2, #0
 8002778:	811a      	strh	r2, [r3, #8]
	overlinkCurr.ovlCoolDownCount = 0; //always initialized as 0
 800277a:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <faultInit+0x280>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
	overlinkCurr.threshold = 17.0f;
 8002780:	4b95      	ldr	r3, [pc, #596]	; (80029d8 <faultInit+0x280>)
 8002782:	2211      	movs	r2, #17
 8002784:	821a      	strh	r2, [r3, #16]
	overlinkCurr.threshold_time = 5.0f/1000.0f;
 8002786:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <faultInit+0x280>)
 8002788:	4a94      	ldr	r2, [pc, #592]	; (80029dc <faultInit+0x284>)
 800278a:	615a      	str	r2, [r3, #20]
	overlinkCurr.reset_threshold = 0; //Not applicable for current
 800278c:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <faultInit+0x280>)
 800278e:	2200      	movs	r2, #0
 8002790:	831a      	strh	r2, [r3, #24]
	overlinkCurr.reset_threshold_time = 0; //Not applicable for current
 8002792:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <faultInit+0x280>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
	overlinkCurr.no_of_reset = 0; //Not applicable for current
 800279a:	4b8f      	ldr	r3, [pc, #572]	; (80029d8 <faultInit+0x280>)
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overlinkCurr.autoreset = 0;  //Not applicable for current
 80027a2:	4b8d      	ldr	r3, [pc, #564]	; (80029d8 <faultInit+0x280>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]
	overlinkCurr.cooldown_enable = 1;
 80027aa:	4b8b      	ldr	r3, [pc, #556]	; (80029d8 <faultInit+0x280>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overlinkCurr.cooldown_time = 86400;
 80027b2:	4b89      	ldr	r3, [pc, #548]	; (80029d8 <faultInit+0x280>)
 80027b4:	4a8a      	ldr	r2, [pc, #552]	; (80029e0 <faultInit+0x288>)
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
	overlinkCurr.sampleFreq = 5000.0f;
 80027b8:	4b87      	ldr	r3, [pc, #540]	; (80029d8 <faultInit+0x280>)
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Over output current parameters
	overIout.ovlCount = 0; //always initialized as 0
 80027c0:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <faultInit+0x28c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	801a      	strh	r2, [r3, #0]
	overIout.ovlFault = 0; //always initialized as 0
 80027c6:	4b87      	ldr	r3, [pc, #540]	; (80029e4 <faultInit+0x28c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	805a      	strh	r2, [r3, #2]
	overIout.ovlResetCount = 0; //always initialized as 0
 80027cc:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <faultInit+0x28c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	809a      	strh	r2, [r3, #4]
	overIout.ovlNoOfReset = 3;
 80027d2:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <faultInit+0x28c>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	80da      	strh	r2, [r3, #6]
	overIout.ovlFaultLatched = 0;
 80027d8:	4b82      	ldr	r3, [pc, #520]	; (80029e4 <faultInit+0x28c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	811a      	strh	r2, [r3, #8]
	overIout.ovlCoolDownCount = 0; //always initialized as 0
 80027de:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <faultInit+0x28c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
	overIout.threshold = 17.0f;
 80027e4:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <faultInit+0x28c>)
 80027e6:	2211      	movs	r2, #17
 80027e8:	821a      	strh	r2, [r3, #16]
	overIout.threshold_time = 5.0f/1000.0f;
 80027ea:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <faultInit+0x28c>)
 80027ec:	4a7b      	ldr	r2, [pc, #492]	; (80029dc <faultInit+0x284>)
 80027ee:	615a      	str	r2, [r3, #20]
	overIout.reset_threshold = 0; //Not applicable for current
 80027f0:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <faultInit+0x28c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	831a      	strh	r2, [r3, #24]
	overIout.reset_threshold_time = 0; //Not applicable for current
 80027f6:	4b7b      	ldr	r3, [pc, #492]	; (80029e4 <faultInit+0x28c>)
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
	overIout.no_of_reset = 0; //Not applicable for current
 80027fe:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <faultInit+0x28c>)
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overIout.autoreset = 0;  //Not applicable for current
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <faultInit+0x28c>)
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]
	overIout.cooldown_enable = 1;
 800280e:	4b75      	ldr	r3, [pc, #468]	; (80029e4 <faultInit+0x28c>)
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overIout.cooldown_time = 86400;
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <faultInit+0x28c>)
 8002818:	4a71      	ldr	r2, [pc, #452]	; (80029e0 <faultInit+0x288>)
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
	overIout.sampleFreq = 5000.0f;
 800281c:	4b71      	ldr	r3, [pc, #452]	; (80029e4 <faultInit+0x28c>)
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Over Vdc (link voltage) parameters
	overlinkVolt.ovlCount = 0;  //always initialized as 0
 8002824:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <faultInit+0x290>)
 8002826:	2200      	movs	r2, #0
 8002828:	801a      	strh	r2, [r3, #0]
	overlinkVolt.ovlFault = 0; //always initialized as 0
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <faultInit+0x290>)
 800282c:	2200      	movs	r2, #0
 800282e:	805a      	strh	r2, [r3, #2]
	overlinkVolt.ovlResetCount = 0;
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <faultInit+0x290>)
 8002832:	2200      	movs	r2, #0
 8002834:	809a      	strh	r2, [r3, #4]
	overlinkVolt.ovlNoOfReset = 3;
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <faultInit+0x290>)
 8002838:	2203      	movs	r2, #3
 800283a:	80da      	strh	r2, [r3, #6]
	overlinkVolt.ovlFaultLatched = 0;
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <faultInit+0x290>)
 800283e:	2200      	movs	r2, #0
 8002840:	811a      	strh	r2, [r3, #8]
	overlinkVolt.ovlCoolDownCount = 0; //always initialized as 0
 8002842:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <faultInit+0x290>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
	overlinkVolt.threshold = 1190.0f;
 8002848:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <faultInit+0x290>)
 800284a:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800284e:	821a      	strh	r2, [r3, #16]
	overlinkVolt.threshold_time = 5.0f/1000.0f;
 8002850:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <faultInit+0x290>)
 8002852:	4a62      	ldr	r2, [pc, #392]	; (80029dc <faultInit+0x284>)
 8002854:	615a      	str	r2, [r3, #20]
	overlinkVolt.reset_threshold = 900; //TBD
 8002856:	4b64      	ldr	r3, [pc, #400]	; (80029e8 <faultInit+0x290>)
 8002858:	f44f 7261 	mov.w	r2, #900	; 0x384
 800285c:	831a      	strh	r2, [r3, #24]
	overlinkVolt.reset_threshold_time =5.0f/1000.0f;
 800285e:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <faultInit+0x290>)
 8002860:	4a5e      	ldr	r2, [pc, #376]	; (80029dc <faultInit+0x284>)
 8002862:	61da      	str	r2, [r3, #28]
	overlinkVolt.no_of_reset = 0;
 8002864:	4b60      	ldr	r3, [pc, #384]	; (80029e8 <faultInit+0x290>)
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overlinkVolt.autoreset = 0;
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <faultInit+0x290>)
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]
	overlinkVolt.cooldown_enable = 1;
 8002874:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <faultInit+0x290>)
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overlinkVolt.cooldown_time = 86400;
 800287c:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <faultInit+0x290>)
 800287e:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <faultInit+0x288>)
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
	overlinkVolt.sampleFreq = 5000.0f;
 8002882:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <faultInit+0x290>)
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

	//Under Vdc (link voltage) parameters
	underlinkVolt.underLCount = 0; //always initialized as 0
 800288a:	4b58      	ldr	r3, [pc, #352]	; (80029ec <faultInit+0x294>)
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]
	underlinkVolt.underLFault = 0; //always initialized as 0
 8002890:	4b56      	ldr	r3, [pc, #344]	; (80029ec <faultInit+0x294>)
 8002892:	2200      	movs	r2, #0
 8002894:	805a      	strh	r2, [r3, #2]
	underlinkVolt.underLResetCount = 0; //always initialized as 0
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <faultInit+0x294>)
 8002898:	2200      	movs	r2, #0
 800289a:	809a      	strh	r2, [r3, #4]
	underlinkVolt.underLNoOfReset = 3;
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <faultInit+0x294>)
 800289e:	2203      	movs	r2, #3
 80028a0:	80da      	strh	r2, [r3, #6]
	underlinkVolt.underLFaultLatched = 0;
 80028a2:	4b52      	ldr	r3, [pc, #328]	; (80029ec <faultInit+0x294>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	811a      	strh	r2, [r3, #8]
	underlinkVolt.underLCoolDownCount = 0;
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <faultInit+0x294>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	815a      	strh	r2, [r3, #10]
	underlinkVolt.threshold = 90; //TBD
 80028ae:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <faultInit+0x294>)
 80028b0:	225a      	movs	r2, #90	; 0x5a
 80028b2:	819a      	strh	r2, [r3, #12]
	underlinkVolt.threshold_time = 5.0f/1000.0f;
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <faultInit+0x294>)
 80028b6:	4a49      	ldr	r2, [pc, #292]	; (80029dc <faultInit+0x284>)
 80028b8:	611a      	str	r2, [r3, #16]
	underlinkVolt.reset_threshold = 95; //TBD
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <faultInit+0x294>)
 80028bc:	225f      	movs	r2, #95	; 0x5f
 80028be:	829a      	strh	r2, [r3, #20]
	underlinkVolt.reset_threshold_time = 5.0f/1000.0f;
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <faultInit+0x294>)
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <faultInit+0x284>)
 80028c4:	619a      	str	r2, [r3, #24]
	underlinkVolt.no_of_reset = 3;
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <faultInit+0x294>)
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	underlinkVolt.autoreset = 0;
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <faultInit+0x294>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
	underlinkVolt.cooldown_enable = 1;
 80028d4:	4b45      	ldr	r3, [pc, #276]	; (80029ec <faultInit+0x294>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	775a      	strb	r2, [r3, #29]
	underlinkVolt.cooldown_time = 86400;
 80028da:	4b44      	ldr	r3, [pc, #272]	; (80029ec <faultInit+0x294>)
 80028dc:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <faultInit+0x288>)
 80028de:	621a      	str	r2, [r3, #32]
	underlinkVolt.sampleFreq = 5000.0f;
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <faultInit+0x294>)
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	84da      	strh	r2, [r3, #38]	; 0x26
//	overtimedIout.cooldown_enable = 1;
//	overtimedIout.cooldown_time = 1000;
//	overtimedIout.sampleFreq = 5000.0f;

// Over diode temperature parameters
	overDiodeTemp.ovlCount = 0; //always initialized as 0
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <faultInit+0x298>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	801a      	strh	r2, [r3, #0]
	overDiodeTemp.ovlFault = 0; //always initialized as 0
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <faultInit+0x298>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	805a      	strh	r2, [r3, #2]
	overDiodeTemp.ovlResetCount = 0; //always initialized as 0
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <faultInit+0x298>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	809a      	strh	r2, [r3, #4]
	overDiodeTemp.ovlNoOfReset = 3;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <faultInit+0x298>)
 80028fc:	2203      	movs	r2, #3
 80028fe:	80da      	strh	r2, [r3, #6]
	overDiodeTemp.ovlFaultLatched = 0;
 8002900:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <faultInit+0x298>)
 8002902:	2200      	movs	r2, #0
 8002904:	811a      	strh	r2, [r3, #8]
	overDiodeTemp.ovlCoolDownCount = 0;
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <faultInit+0x298>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
	overDiodeTemp.threshold =  90;
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <faultInit+0x298>)
 800290e:	225a      	movs	r2, #90	; 0x5a
 8002910:	821a      	strh	r2, [r3, #16]
	overDiodeTemp.threshold_time = 1000; // 1/40*5
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <faultInit+0x298>)
 8002914:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <faultInit+0x29c>)
 8002916:	615a      	str	r2, [r3, #20]
	overDiodeTemp.reset_threshold = 80;
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <faultInit+0x298>)
 800291a:	2250      	movs	r2, #80	; 0x50
 800291c:	831a      	strh	r2, [r3, #24]
	overDiodeTemp.reset_threshold_time = 1000; // 1/40*5
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <faultInit+0x298>)
 8002920:	4a34      	ldr	r2, [pc, #208]	; (80029f4 <faultInit+0x29c>)
 8002922:	61da      	str	r2, [r3, #28]
	overDiodeTemp.no_of_reset = 0;
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <faultInit+0x298>)
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overDiodeTemp.autoreset = 0;
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <faultInit+0x298>)
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
	overDiodeTemp.cooldown_enable = 1;
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <faultInit+0x298>)
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overDiodeTemp.cooldown_time = 1000;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <faultInit+0x298>)
 800293e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
	overDiodeTemp.sampleFreq = 40.0f;
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <faultInit+0x298>)
 8002946:	2228      	movs	r2, #40	; 0x28
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over psfb temperature parameters
	overPsfbTemp.ovlCount = 0; //always initialized as 0
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <faultInit+0x2a0>)
 800294c:	2200      	movs	r2, #0
 800294e:	801a      	strh	r2, [r3, #0]
	overPsfbTemp.ovlFault = 0; //always initialized as 0
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <faultInit+0x2a0>)
 8002952:	2200      	movs	r2, #0
 8002954:	805a      	strh	r2, [r3, #2]
	overPsfbTemp.ovlResetCount = 0; //always initialized as 0
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <faultInit+0x2a0>)
 8002958:	2200      	movs	r2, #0
 800295a:	809a      	strh	r2, [r3, #4]
	overPsfbTemp.ovlNoOfReset = 3;
 800295c:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <faultInit+0x2a0>)
 800295e:	2203      	movs	r2, #3
 8002960:	80da      	strh	r2, [r3, #6]
	overPsfbTemp.ovlFaultLatched = 0;
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <faultInit+0x2a0>)
 8002964:	2200      	movs	r2, #0
 8002966:	811a      	strh	r2, [r3, #8]
	overPsfbTemp.ovlCoolDownCount = 0;
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <faultInit+0x2a0>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
	overPsfbTemp.threshold = 90;
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <faultInit+0x2a0>)
 8002970:	225a      	movs	r2, #90	; 0x5a
 8002972:	821a      	strh	r2, [r3, #16]
	overPsfbTemp.threshold_time = 1000; // 1/40*5
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <faultInit+0x2a0>)
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <faultInit+0x29c>)
 8002978:	615a      	str	r2, [r3, #20]
	overPsfbTemp.reset_threshold = 80;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <faultInit+0x2a0>)
 800297c:	2250      	movs	r2, #80	; 0x50
 800297e:	831a      	strh	r2, [r3, #24]
	overPsfbTemp.reset_threshold_time = 1000; // 1/40*5
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <faultInit+0x2a0>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <faultInit+0x29c>)
 8002984:	61da      	str	r2, [r3, #28]
	overPsfbTemp.no_of_reset = 0;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <faultInit+0x2a0>)
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overPsfbTemp.autoreset = 0;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <faultInit+0x2a0>)
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2020 	strb.w	r2, [r3, #32]
	overPsfbTemp.cooldown_enable = 1;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <faultInit+0x2a0>)
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overPsfbTemp.cooldown_time = 1000;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <faultInit+0x2a0>)
 80029a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
	overPsfbTemp.sampleFreq = 40.0f;
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <faultInit+0x2a0>)
 80029a8:	2228      	movs	r2, #40	; 0x28
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over AFE temperature parameters
	overAfeTemp.ovlCount = 0; //always initialized as 0
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <faultInit+0x2a4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	801a      	strh	r2, [r3, #0]
	overAfeTemp.ovlFault = 0; //always initialized as 0
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <faultInit+0x2a4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	805a      	strh	r2, [r3, #2]
	overAfeTemp.ovlResetCount = 0; //always initialized as 0
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <faultInit+0x2a4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	809a      	strh	r2, [r3, #4]
	overAfeTemp.ovlNoOfReset = 3;
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <faultInit+0x2a4>)
 80029c0:	2203      	movs	r2, #3
 80029c2:	80da      	strh	r2, [r3, #6]
	overAfeTemp.ovlFaultLatched = 0;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <faultInit+0x2a4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	811a      	strh	r2, [r3, #8]
	overAfeTemp.ovlCoolDownCount = 0;
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <faultInit+0x2a4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
	overAfeTemp.threshold = 90;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <faultInit+0x2a4>)
 80029d2:	225a      	movs	r2, #90	; 0x5a
 80029d4:	821a      	strh	r2, [r3, #16]
 80029d6:	e013      	b.n	8002a00 <faultInit+0x2a8>
 80029d8:	20000550 	.word	0x20000550
 80029dc:	3ba3d70a 	.word	0x3ba3d70a
 80029e0:	00015180 	.word	0x00015180
 80029e4:	200005a8 	.word	0x200005a8
 80029e8:	2000057c 	.word	0x2000057c
 80029ec:	20000684 	.word	0x20000684
 80029f0:	200005d4 	.word	0x200005d4
 80029f4:	447a0000 	.word	0x447a0000
 80029f8:	20000600 	.word	0x20000600
 80029fc:	2000062c 	.word	0x2000062c
	overAfeTemp.threshold_time = 1000; // 1/40*5
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <faultInit+0x34c>)
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <faultInit+0x350>)
 8002a04:	615a      	str	r2, [r3, #20]
	overAfeTemp.reset_threshold = 80;
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <faultInit+0x34c>)
 8002a08:	2250      	movs	r2, #80	; 0x50
 8002a0a:	831a      	strh	r2, [r3, #24]
	overAfeTemp.reset_threshold_time = 1000; // 1/40*5
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <faultInit+0x34c>)
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <faultInit+0x350>)
 8002a10:	61da      	str	r2, [r3, #28]
	overAfeTemp.no_of_reset = 0;
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <faultInit+0x34c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overAfeTemp.autoreset = 0;
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <faultInit+0x34c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
	overAfeTemp.cooldown_enable = 1;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <faultInit+0x34c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overAfeTemp.cooldown_time = 1000;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <faultInit+0x34c>)
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
	overAfeTemp.sampleFreq = 40.0f;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <faultInit+0x34c>)
 8002a34:	2228      	movs	r2, #40	; 0x28
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

	// Over Trafo temperature parameters
	overTrafoTemp.ovlCount = 0; //always initialized as 0
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <faultInit+0x354>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
	overTrafoTemp.ovlFault = 0; //always initialized as 0
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <faultInit+0x354>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	805a      	strh	r2, [r3, #2]
	overTrafoTemp.ovlResetCount = 0; //always initialized as 0
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <faultInit+0x354>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	809a      	strh	r2, [r3, #4]
	overTrafoTemp.ovlNoOfReset = 3;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <faultInit+0x354>)
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	80da      	strh	r2, [r3, #6]
	overTrafoTemp.ovlFaultLatched = 0;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <faultInit+0x354>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	811a      	strh	r2, [r3, #8]
	overTrafoTemp.ovlCoolDownCount = 0;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <faultInit+0x354>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
	overTrafoTemp.threshold = 90;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <faultInit+0x354>)
 8002a5e:	225a      	movs	r2, #90	; 0x5a
 8002a60:	821a      	strh	r2, [r3, #16]
	overTrafoTemp.threshold_time = 1000; // 1/40*5
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <faultInit+0x354>)
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <faultInit+0x350>)
 8002a66:	615a      	str	r2, [r3, #20]
	overTrafoTemp.reset_threshold = 80;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <faultInit+0x354>)
 8002a6a:	2250      	movs	r2, #80	; 0x50
 8002a6c:	831a      	strh	r2, [r3, #24]
	overTrafoTemp.reset_threshold_time = 1000; // 1/40*5
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <faultInit+0x354>)
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <faultInit+0x350>)
 8002a72:	61da      	str	r2, [r3, #28]
	overTrafoTemp.no_of_reset = 0;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <faultInit+0x354>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	overTrafoTemp.autoreset = 0;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <faultInit+0x354>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]
	overTrafoTemp.cooldown_enable = 1;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <faultInit+0x354>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	overTrafoTemp.cooldown_time = 1000;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <faultInit+0x354>)
 8002a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
	overTrafoTemp.sampleFreq = 40.0f;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <faultInit+0x354>)
 8002a96:	2228      	movs	r2, #40	; 0x28
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	2000062c 	.word	0x2000062c
 8002aa8:	447a0000 	.word	0x447a0000
 8002aac:	20000658 	.word	0x20000658

08002ab0 <check_over_limit>:


void check_over_limit(ovLFault_t *fhand, float value)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	ed87 0a00 	vstr	s0, [r7]


	if(fhand->ovlFault!=1){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	885b      	ldrh	r3, [r3, #2]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d033      	beq.n	8002b2c <check_over_limit+0x7c>
	//check if the quantity is above the threshold
		if(value > fhand->threshold){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8a1b      	ldrh	r3, [r3, #16]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	ed97 7a00 	vldr	s14, [r7]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	dd06      	ble.n	8002aec <check_over_limit+0x3c>
			fhand->ovlCount = fhand->ovlCount + 1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e002      	b.n	8002af2 <check_over_limit+0x42>
		}else{
			fhand->ovlCount = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
		}


		//check if the quantity is above the threshold for given time

		if(fhand->ovlCount > (fhand->sampleFreq*fhand->threshold_time)){
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd48      	ble.n	8002bb0 <check_over_limit+0x100>
			fhand->ovlCount = 0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]
			fhand->ovlFault = 1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	805a      	strh	r2, [r3, #2]
 8002b2a:	e041      	b.n	8002bb0 <check_over_limit+0x100>
					}

	}else{
		//try auto reset if the fault is not latched
		if(fhand->autoreset && (!fhand->ovlFaultLatched)){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03c      	beq.n	8002bb0 <check_over_limit+0x100>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	891b      	ldrh	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d138      	bne.n	8002bb0 <check_over_limit+0x100>
		 //check if the voltage is below the reset threshold
			if(value < fhand->reset_threshold){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8b1b      	ldrh	r3, [r3, #24]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4a:	ed97 7a00 	vldr	s14, [r7]
 8002b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	d506      	bpl.n	8002b66 <check_over_limit+0xb6>
				fhand->ovlResetCount = fhand->ovlResetCount + 1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	809a      	strh	r2, [r3, #4]
 8002b64:	e002      	b.n	8002b6c <check_over_limit+0xbc>
			}else{
				fhand->ovlResetCount =0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	809a      	strh	r2, [r3, #4]
			}
			//check if the quantity is below the reset threshold for given time
			if(fhand->ovlResetCount > (fhand->sampleFreq*fhand->reset_threshold_time)){
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	889b      	ldrh	r3, [r3, #4]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	dd0b      	ble.n	8002bb0 <check_over_limit+0x100>
				fhand->ovlResetCount = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	809a      	strh	r2, [r3, #4]
				fhand->ovlFault = 0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	805a      	strh	r2, [r3, #2]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset + 1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	88db      	ldrh	r3, [r3, #6]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	80da      	strh	r2, [r3, #6]
	//cool down time means that "no_of_reset" will be reduced by one for every given time
	//this is to prevent the fault accumulation.
	//example: if one over voltage fault occurred today and next one occurred previous week
	//with COOLDOWN_ENABLE "no_of_reset" will be 1
	//without COOLDOWN_ENABLE "no_of_reset" will be 2
	if(fhand->cooldown_enable){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01c      	beq.n	8002bf4 <check_over_limit+0x144>
		if(fhand->ovlNoOfReset > 0){
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <check_over_limit+0x144>
			fhand->ovlCoolDownCount = fhand->ovlCoolDownCount + 1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
			if(fhand->ovlCoolDownCount > (fhand->sampleFreq*fhand->cooldown_time)){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d908      	bls.n	8002bf4 <check_over_limit+0x144>
				fhand->ovlCoolDownCount = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset - 1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	88db      	ldrh	r3, [r3, #6]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	80da      	strh	r2, [r3, #6]
			}
		}
	}
	//if the fault is reset for given number of times, latch the fault
	if(fhand->ovlNoOfReset > fhand->no_of_reset){
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	88da      	ldrh	r2, [r3, #6]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d905      	bls.n	8002c10 <check_over_limit+0x160>
		fhand->ovlNoOfReset = 0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	80da      	strh	r2, [r3, #6]
		fhand->ovlFaultLatched = 1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	811a      	strh	r2, [r3, #8]
	}
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <check_over_limitI>:
			fhand->underLFaultLatched = 1;
		}
}

void check_over_limitI(ovLFault_t *fhand, float value)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	ed87 0a00 	vstr	s0, [r7]
	if(fhand->ovlFault!=1){
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	885b      	ldrh	r3, [r3, #2]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d038      	beq.n	8002ca2 <check_over_limitI+0x86>
	//check if the quantity is above the threshold
		if(value > fhand->threshold){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8a1b      	ldrh	r3, [r3, #16]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	ed97 7a00 	vldr	s14, [r7]
 8002c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	dd06      	ble.n	8002c58 <check_over_limitI+0x3c>
			fhand->ovlCount = fhand->ovlCount + 1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e002      	b.n	8002c5e <check_over_limitI+0x42>
		}else{
			fhand->ovlCount = 0;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
		}

		//check if the quantity is above the threshold for given time
		if(fhand->ovlCount > (fhand->sampleFreq*fhand->threshold_time)){
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	dd0b      	ble.n	8002ca2 <check_over_limitI+0x86>
			fhand->ovlCount = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
			fhand->ovlFault = 1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	805a      	strh	r2, [r3, #2]
			fhand->ovlNoOfReset += 1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	88db      	ldrh	r3, [r3, #6]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	80da      	strh	r2, [r3, #6]
			//cool down time means that "no_of_reset" will be reduced by one for every given time
			//this is to prevent the fault accumulation.
			//example: if one over voltage fault occurred today and next one occurred previous week
			//with COOLDOWN_ENABLE "no_of_reset" will be 1
			//without COOLDOWN_ENABLE "no_of_reset" will be 2
	if(fhand->cooldown_enable){
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01c      	beq.n	8002ce6 <check_over_limitI+0xca>
		if(fhand->ovlNoOfReset > 0){
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	88db      	ldrh	r3, [r3, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d018      	beq.n	8002ce6 <check_over_limitI+0xca>
			fhand->ovlCoolDownCount = fhand->ovlCoolDownCount + 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
			if(fhand->ovlCoolDownCount > (fhand->sampleFreq*fhand->cooldown_time)){
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d908      	bls.n	8002ce6 <check_over_limitI+0xca>
				fhand->ovlCoolDownCount = 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
				fhand->ovlNoOfReset = fhand->ovlNoOfReset - 1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	88db      	ldrh	r3, [r3, #6]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	80da      	strh	r2, [r3, #6]
			}
		}
	}

	//if the fault is reset for given number of times, latch the fault
	if(fhand->ovlNoOfReset > fhand->no_of_reset){
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	88da      	ldrh	r2, [r3, #6]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d905      	bls.n	8002d02 <check_over_limitI+0xe6>
		fhand->ovlNoOfReset = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	80da      	strh	r2, [r3, #6]
		fhand->ovlFaultLatched = 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	811a      	strh	r2, [r3, #8]
	}
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <slave_health>:

void slave_health()
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

	if(fault1.byte != 0|| /*fault2.byte != 0 || fault3.byte != 0|| fault4.byte != 0 ||*/ fault5.byte != 0 /*|| fault6.byte != 0 || fault7.byte != 0*/)
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <slave_health+0x44>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <slave_health+0x14>
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <slave_health+0x48>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d011      	beq.n	8002d48 <slave_health+0x38>
	{
		status1.bits.sHealthStatus = 1;
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <slave_health+0x4c>)
 8002d26:	7813      	ldrb	r3, [r2, #0]
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	7013      	strb	r3, [r2, #0]
		fault_timer++;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <slave_health+0x50>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <slave_health+0x50>)
 8002d38:	701a      	strb	r2, [r3, #0]
		if (fault_timer > 250)
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <slave_health+0x50>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d40:	d902      	bls.n	8002d48 <slave_health+0x38>
		{
			//LED2_TOGGLE;
			fault_timer = 0;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <slave_health+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000530 	.word	0x20000530
 8002d58:	20000540 	.word	0x20000540
 8002d5c:	2000054c 	.word	0x2000054c
 8002d60:	200006ad 	.word	0x200006ad

08002d64 <manual_fault_reset>:
/*
 * This function will try to reset the fault if the faults are no longer present.
 * whenever cmd.bits.fault_reset = 1; this function will be executed once
 */
void manual_fault_reset(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	status1.bits.sHealthStatus = 0;
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <manual_fault_reset+0x164>)
 8002d6a:	7813      	ldrb	r3, [r2, #0]
 8002d6c:	f36f 0300 	bfc	r3, #0, #1
 8002d70:	7013      	strb	r3, [r2, #0]
	sHealthStatus = 0;
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <manual_fault_reset+0x168>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	cmd.bits.fault_reset = 0;
 8002d78:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <manual_fault_reset+0x16c>)
 8002d7a:	7813      	ldrb	r3, [r2, #0]
 8002d7c:	f36f 0341 	bfc	r3, #1, #1
 8002d80:	7013      	strb	r3, [r2, #0]
	turnOff();
 8002d82:	f7ff fccd 	bl	8002720 <turnOff>
	LED2_OFF;
 8002d86:	2200      	movs	r2, #0
 8002d88:	2108      	movs	r1, #8
 8002d8a:	4852      	ldr	r0, [pc, #328]	; (8002ed4 <manual_fault_reset+0x170>)
 8002d8c:	f004 fb36 	bl	80073fc <HAL_GPIO_WritePin>
	if (fault5.byte!= 0)
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <manual_fault_reset+0x174>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <manual_fault_reset+0x6e>
	{
	reset_driver(); //reset the driver
 8002d98:	f7ff fcd6 	bl	8002748 <reset_driver>
	fault5.byte = 0;
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <manual_fault_reset+0x174>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	remove_error_from_list(18);
 8002da2:	2012      	movs	r0, #18
 8002da4:	f000 fc14 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(19);
 8002da8:	2013      	movs	r0, #19
 8002daa:	f000 fc11 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(20);
 8002dae:	2014      	movs	r0, #20
 8002db0:	f000 fc0e 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(21);
 8002db4:	2015      	movs	r0, #21
 8002db6:	f000 fc0b 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(22);
 8002dba:	2016      	movs	r0, #22
 8002dbc:	f000 fc08 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(23);
 8002dc0:	2017      	movs	r0, #23
 8002dc2:	f000 fc05 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(24);
 8002dc6:	2018      	movs	r0, #24
 8002dc8:	f000 fc02 	bl	80035d0 <remove_error_from_list>
	remove_error_from_list(25);
 8002dcc:	2019      	movs	r0, #25
 8002dce:	f000 fbff 	bl	80035d0 <remove_error_from_list>
	}
	if(fault1.bits.over_Ilink == 1){ //check if fault is present
 8002dd2:	4b42      	ldr	r3, [pc, #264]	; (8002edc <manual_fault_reset+0x178>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <manual_fault_reset+0x88>
		overlinkCurr.ovlFault = 0;
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <manual_fault_reset+0x17c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f000 fbf2 	bl	80035d0 <remove_error_from_list>
	}
	if(fault1.bits.over_Vlink == 1){
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <manual_fault_reset+0x178>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <manual_fault_reset+0xa2>
		overlinkVolt.ovlFault = 0;
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <manual_fault_reset+0x180>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(2);
 8002e00:	2002      	movs	r0, #2
 8002e02:	f000 fbe5 	bl	80035d0 <remove_error_from_list>
	}
		if(fault2.bits.under_Vout == 1){
		underVout.underLFault = 0;
	}
	*/
	if(fault1.bits.over_Iout == 1){
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <manual_fault_reset+0x178>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <manual_fault_reset+0xbc>
		overIout.ovlFault = 0;
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <manual_fault_reset+0x184>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(3);
 8002e1a:	2003      	movs	r0, #3
 8002e1c:	f000 fbd8 	bl	80035d0 <remove_error_from_list>

//	if(fault1.bits.overTimed_Iout == 1){
//		overtimedIout.ovlFault = 0;
//	}

	if(fault2.bits.underVlink == 1){
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <manual_fault_reset+0x188>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <manual_fault_reset+0xd6>
		underlinkVolt.underLFault = 0;
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <manual_fault_reset+0x18c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(5);
 8002e34:	2005      	movs	r0, #5
 8002e36:	f000 fbcb 	bl	80035d0 <remove_error_from_list>
	}

	if(fault4.bits.overTemp_diode == 1){
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <manual_fault_reset+0xf0>
		overDiodeTemp.ovlFault = 0;
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <manual_fault_reset+0x194>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(17);
 8002e4e:	2011      	movs	r0, #17
 8002e50:	f000 fbbe 	bl	80035d0 <remove_error_from_list>
	}
	if(fault4.bits.overTemp_afe == 1){
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <manual_fault_reset+0x10a>
		overAfeTemp.ovlFault = 0;
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <manual_fault_reset+0x198>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(14);
 8002e68:	200e      	movs	r0, #14
 8002e6a:	f000 fbb1 	bl	80035d0 <remove_error_from_list>
	}
	if(fault4.bits.overTemp_psfb == 1){
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <manual_fault_reset+0x124>
		overPsfbTemp.ovlFault = 0;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <manual_fault_reset+0x19c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(16);
 8002e82:	2010      	movs	r0, #16
 8002e84:	f000 fba4 	bl	80035d0 <remove_error_from_list>
	}
	if(fault4.bits.overTemp_trafo == 1){
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <manual_fault_reset+0x190>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <manual_fault_reset+0x13e>
		overTrafoTemp.ovlFault = 0;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <manual_fault_reset+0x1a0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	805a      	strh	r2, [r3, #2]
		remove_error_from_list(15);
 8002e9c:	200f      	movs	r0, #15
 8002e9e:	f000 fb97 	bl	80035d0 <remove_error_from_list>
	}
	if(fault3.bits.driver_not_ready == 1){
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <manual_fault_reset+0x1a4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <manual_fault_reset+0x160>
		reset_driver();
 8002eb0:	f7ff fc4a 	bl	8002748 <reset_driver>
		fault3.bits.driver_not_ready= 0;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <manual_fault_reset+0x1a4>)
 8002eb6:	7813      	ldrb	r3, [r2, #0]
 8002eb8:	f36f 0382 	bfc	r3, #2, #1
 8002ebc:	7013      	strb	r3, [r2, #0]
		remove_error_from_list(8);
 8002ebe:	2008      	movs	r0, #8
 8002ec0:	f000 fb86 	bl	80035d0 <remove_error_from_list>
	}
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000054c 	.word	0x2000054c
 8002ecc:	200006ac 	.word	0x200006ac
 8002ed0:	20000548 	.word	0x20000548
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	20000540 	.word	0x20000540
 8002edc:	20000530 	.word	0x20000530
 8002ee0:	20000550 	.word	0x20000550
 8002ee4:	2000057c 	.word	0x2000057c
 8002ee8:	200005a8 	.word	0x200005a8
 8002eec:	20000534 	.word	0x20000534
 8002ef0:	20000684 	.word	0x20000684
 8002ef4:	2000053c 	.word	0x2000053c
 8002ef8:	200005d4 	.word	0x200005d4
 8002efc:	2000062c 	.word	0x2000062c
 8002f00:	20000600 	.word	0x20000600
 8002f04:	20000658 	.word	0x20000658
 8002f08:	20000538 	.word	0x20000538

08002f0c <faultDetection>:

void faultDetection(void){
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	}
	if((HAL_GPIO_ReadPin(OCFm_GPIO_Port, OCFm_Pin) == 0) && fault7.bits.ocf_m == 0){
		fault7.bits.ocf_m = 1;
		add_error_to_list(26);
	}*/
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <softStartVariable>:
/*
* Function Description: To give soft start to variables
* Input:
* Return:
*/
void softStartVariable(softStart_Structure *Temp, float sampleFreq, float Positive_SlwRate, float Negative_SlwRate){
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f26:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f2a:	ed87 1a00 	vstr	s2, [r7]
	float positiveStepSize = (float)Positive_SlwRate/sampleFreq;
 8002f2e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f32:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float negativeStepSize = (float)Negative_SlwRate/sampleFreq;
 8002f3e:	edd7 6a00 	vldr	s13, [r7]
 8002f42:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	edc7 7a04 	vstr	s15, [r7, #16]

	if(Temp -> Dynamic <= (Temp -> Fix - positiveStepSize*2.0f)){
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	d80a      	bhi.n	8002f86 <softStartVariable+0x6c>
		Temp -> Dynamic = Temp -> Dynamic + positiveStepSize;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	ed93 7a00 	vldr	s14, [r3]
 8002f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	edc3 7a00 	vstr	s15, [r3]
	}else if(Temp -> Dynamic >= (Temp -> Fix + negativeStepSize*2.0f)){
	Temp -> Dynamic = Temp -> Dynamic - negativeStepSize;
 }else {
	Temp -> Dynamic = Temp -> Fix;
 }
}
 8002f84:	e01f      	b.n	8002fc6 <softStartVariable+0xac>
	}else if(Temp -> Dynamic >= (Temp -> Fix + negativeStepSize*2.0f)){
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	db0a      	blt.n	8002fbe <softStartVariable+0xa4>
	Temp -> Dynamic = Temp -> Dynamic - negativeStepSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	ed93 7a00 	vldr	s14, [r3]
 8002fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	edc3 7a00 	vstr	s15, [r3]
}
 8002fbc:	e003      	b.n	8002fc6 <softStartVariable+0xac>
	Temp -> Dynamic = Temp -> Fix;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	2220      	movs	r2, #32
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f008 ffa9 	bl	800bf44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ff2:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <MX_ADC1_Init+0x100>)
 8002ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <MX_ADC1_Init+0x100>)
 8002ffc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003000:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <MX_ADC1_Init+0x100>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003016:	2201      	movs	r2, #1
 8003018:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800301a:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <MX_ADC1_Init+0x100>)
 800301c:	2204      	movs	r2, #4
 800301e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003028:	2200      	movs	r2, #0
 800302a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <MX_ADC1_Init+0x100>)
 800302e:	2202      	movs	r2, #2
 8003030:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <MX_ADC1_Init+0x100>)
 800303c:	2200      	movs	r2, #0
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003050:	2200      	movs	r2, #0
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <MX_ADC1_Init+0x100>)
 800305e:	f002 f88d 	bl	800517c <HAL_ADC_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003068:	f001 f96c 	bl	8004344 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003074:	4619      	mov	r1, r3
 8003076:	4817      	ldr	r0, [pc, #92]	; (80030d4 <MX_ADC1_Init+0x100>)
 8003078:	f003 f8be 	bl	80061f8 <HAL_ADCEx_MultiModeConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003082:	f001 f95f 	bl	8004344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_ADC1_Init+0x104>)
 8003088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800308a:	2306      	movs	r3, #6
 800308c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003092:	237f      	movs	r3, #127	; 0x7f
 8003094:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003096:	2304      	movs	r3, #4
 8003098:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	480c      	ldr	r0, [pc, #48]	; (80030d4 <MX_ADC1_Init+0x100>)
 80030a4:	f002 fb18 	bl	80056d8 <HAL_ADC_ConfigChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80030ae:	f001 f949 	bl	8004344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030b2:	230c      	movs	r3, #12
 80030b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4806      	ldr	r0, [pc, #24]	; (80030d4 <MX_ADC1_Init+0x100>)
 80030bc:	f002 fb0c 	bl	80056d8 <HAL_ADC_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80030c6:	f001 f93d 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200006b8 	.word	0x200006b8
 80030d8:	04300002 	.word	0x04300002

080030dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b09e      	sub	sp, #120	; 0x78
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	2254      	movs	r2, #84	; 0x54
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f008 ff21 	bl	800bf44 <memset>
  if(adcHandle->Instance==ADC1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310a:	d15f      	bne.n	80031cc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800310c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003110:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003112:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003116:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f006 fff3 	bl	800a108 <HAL_RCCEx_PeriphCLKConfig>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003128:	f001 f90c 	bl	8004344 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 800312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003130:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 8003132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 800313a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_ADC_MspInit+0xf8>)
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ZCP_Pin|ZCN_Pin;
 800315c:	2303      	movs	r3, #3
 800315e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003160:	2303      	movs	r3, #3
 8003162:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003172:	f003 ffa9 	bl	80070c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_ADC_MspInit+0x100>)
 800317a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 800317e:	2205      	movs	r2, #5
 8003180:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 8003196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 80031b2:	f003 fd17 	bl	8006be4 <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80031bc:	f001 f8c2 	bl	8004344 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
 80031c6:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_ADC_MspInit+0xfc>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80031cc:	bf00      	nop
 80031ce:	3778      	adds	r7, #120	; 0x78
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	20000724 	.word	0x20000724
 80031dc:	40020008 	.word	0x40020008

080031e0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80031e6:	463b      	mov	r3, r7
 80031e8:	2230      	movs	r2, #48	; 0x30
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f008 fea9 	bl	800bf44 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <MX_DAC1_Init+0x80>)
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <MX_DAC1_Init+0x84>)
 80031f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80031f8:	4819      	ldr	r0, [pc, #100]	; (8003260 <MX_DAC1_Init+0x80>)
 80031fa:	f003 fa14 	bl	8006626 <HAL_DAC_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003204:	f001 f89e 	bl	8004344 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8003208:	2302      	movs	r3, #2
 800320a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003224:	2301      	movs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800322c:	463b      	mov	r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	4619      	mov	r1, r3
 8003232:	480b      	ldr	r0, [pc, #44]	; (8003260 <MX_DAC1_Init+0x80>)
 8003234:	f003 fb14 	bl	8006860 <HAL_DAC_ConfigChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800323e:	f001 f881 	bl	8004344 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003242:	463b      	mov	r3, r7
 8003244:	2210      	movs	r2, #16
 8003246:	4619      	mov	r1, r3
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_DAC1_Init+0x80>)
 800324a:	f003 fb09 	bl	8006860 <HAL_DAC_ConfigChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8003254:	f001 f876 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003258:	bf00      	nop
 800325a:	3730      	adds	r7, #48	; 0x30
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000784 	.word	0x20000784
 8003264:	50000800 	.word	0x50000800

08003268 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <HAL_DAC_MspInit+0x84>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d12c      	bne.n	80032e4 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_DAC_MspInit+0x88>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_Pin|DAC2_Pin;
 80032ba:	2330      	movs	r3, #48	; 0x30
 80032bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032be:	2303      	movs	r3, #3
 80032c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d0:	f003 fefa 	bl	80070c8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2036      	movs	r0, #54	; 0x36
 80032da:	f003 f970 	bl	80065be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032de:	2036      	movs	r0, #54	; 0x36
 80032e0:	f003 f987 	bl	80065f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	50000800 	.word	0x50000800
 80032f0:	40021000 	.word	0x40021000

080032f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <MX_DMA_Init+0x50>)
 80032fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <MX_DMA_Init+0x50>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6493      	str	r3, [r2, #72]	; 0x48
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <MX_DMA_Init+0x50>)
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_DMA_Init+0x50>)
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <MX_DMA_Init+0x50>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6493      	str	r3, [r2, #72]	; 0x48
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_DMA_Init+0x50>)
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	200b      	movs	r0, #11
 8003330:	f003 f945 	bl	80065be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003334:	200b      	movs	r0, #11
 8003336:	f003 f95c 	bl	80065f2 <HAL_NVIC_EnableIRQ>

}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <one>:
//uint8_t error_list[total_errors]= {99,23,56,78,45,12};
uint8_t error_list[total_errors] = {99};
uint8_t display_digit[2];
uint8_t count_error = 0;

void one(void) {
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <two>:

void two(void) {
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <three>:

void three(void) {
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <four>:

void four(void) {
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <five>:

void five(void) {
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <six>:

void six(void) {
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <seven>:

void seven(void) {
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <eight>:

void eight(void) {
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <nine>:

void nine(void) {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <zero>:

void zero(void) {
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 0);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 1);
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <no_error>:

void no_error(void) {
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(Seven_Seg_C_GPIO_Port, Seven_Seg_C_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_D_GPIO_Port, Seven_Seg_D_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_E_GPIO_Port, Seven_Seg_E_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_F_GPIO_Port, Seven_Seg_F_Pin, 1);
//  HAL_GPIO_WritePin(Seven_Seg_G_GPIO_Port, Seven_Seg_G_Pin, 0);
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <digit_1>:

void digit_1(uint8_t number) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
//  HAL_GPIO_WritePin(Digit_2_GPIO_Port, Digit_2_Pin, 1);
//  HAL_GPIO_WritePin(Digit_1_GPIO_Port, Digit_1_Pin, 0);
  switch (number)
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	dc1b      	bgt.n	800342c <digit_1+0x48>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db3d      	blt.n	8003474 <digit_1+0x90>
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d83b      	bhi.n	8003474 <digit_1+0x90>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <digit_1+0x20>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003469 	.word	0x08003469
 8003408:	08003433 	.word	0x08003433
 800340c:	08003439 	.word	0x08003439
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003445 	.word	0x08003445
 8003418:	0800344b 	.word	0x0800344b
 800341c:	08003451 	.word	0x08003451
 8003420:	08003457 	.word	0x08003457
 8003424:	0800345d 	.word	0x0800345d
 8003428:	08003463 	.word	0x08003463
 800342c:	2b63      	cmp	r3, #99	; 0x63
 800342e:	d01e      	beq.n	800346e <digit_1+0x8a>
	case 8: eight(); break;
	case 9: nine(); break;
	case 0: zero(); break;
	case 99: no_error(); break;
  }
}
 8003430:	e020      	b.n	8003474 <digit_1+0x90>
	case 1: one(); break;
 8003432:	f7ff ff89 	bl	8003348 <one>
 8003436:	e01d      	b.n	8003474 <digit_1+0x90>
	case 2: two(); break;
 8003438:	f7ff ff8d 	bl	8003356 <two>
 800343c:	e01a      	b.n	8003474 <digit_1+0x90>
	case 3: three(); break;
 800343e:	f7ff ff91 	bl	8003364 <three>
 8003442:	e017      	b.n	8003474 <digit_1+0x90>
	case 4: four(); break;
 8003444:	f7ff ff95 	bl	8003372 <four>
 8003448:	e014      	b.n	8003474 <digit_1+0x90>
	case 5: five(); break;
 800344a:	f7ff ff99 	bl	8003380 <five>
 800344e:	e011      	b.n	8003474 <digit_1+0x90>
	case 6: six(); break;
 8003450:	f7ff ff9d 	bl	800338e <six>
 8003454:	e00e      	b.n	8003474 <digit_1+0x90>
	case 7: seven(); break;
 8003456:	f7ff ffa1 	bl	800339c <seven>
 800345a:	e00b      	b.n	8003474 <digit_1+0x90>
	case 8: eight(); break;
 800345c:	f7ff ffa5 	bl	80033aa <eight>
 8003460:	e008      	b.n	8003474 <digit_1+0x90>
	case 9: nine(); break;
 8003462:	f7ff ffa9 	bl	80033b8 <nine>
 8003466:	e005      	b.n	8003474 <digit_1+0x90>
	case 0: zero(); break;
 8003468:	f7ff ffad 	bl	80033c6 <zero>
 800346c:	e002      	b.n	8003474 <digit_1+0x90>
	case 99: no_error(); break;
 800346e:	f7ff ffb1 	bl	80033d4 <no_error>
 8003472:	bf00      	nop
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <digit_2>:

void digit_2(uint8_t number) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
//  HAL_GPIO_WritePin(Digit_2_GPIO_Port, Digit_2_Pin, 0);
//  HAL_GPIO_WritePin(Digit_1_GPIO_Port, Digit_1_Pin, 1);
  switch (number)
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b09      	cmp	r3, #9
 800348a:	dc1b      	bgt.n	80034c4 <digit_2+0x48>
 800348c:	2b00      	cmp	r3, #0
 800348e:	db3d      	blt.n	800350c <digit_2+0x90>
 8003490:	2b09      	cmp	r3, #9
 8003492:	d83b      	bhi.n	800350c <digit_2+0x90>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <digit_2+0x20>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	08003501 	.word	0x08003501
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034dd 	.word	0x080034dd
 80034b0:	080034e3 	.word	0x080034e3
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	080034fb 	.word	0x080034fb
 80034c4:	2b63      	cmp	r3, #99	; 0x63
 80034c6:	d01e      	beq.n	8003506 <digit_2+0x8a>
	case 8: eight(); break;
	case 9: nine(); break;
	case 0: zero(); break;
	case 99: no_error(); break;
  }
}
 80034c8:	e020      	b.n	800350c <digit_2+0x90>
	case 1: one(); break;
 80034ca:	f7ff ff3d 	bl	8003348 <one>
 80034ce:	e01d      	b.n	800350c <digit_2+0x90>
	case 2: two(); break;
 80034d0:	f7ff ff41 	bl	8003356 <two>
 80034d4:	e01a      	b.n	800350c <digit_2+0x90>
	case 3: three(); break;
 80034d6:	f7ff ff45 	bl	8003364 <three>
 80034da:	e017      	b.n	800350c <digit_2+0x90>
	case 4: four(); break;
 80034dc:	f7ff ff49 	bl	8003372 <four>
 80034e0:	e014      	b.n	800350c <digit_2+0x90>
	case 5: five(); break;
 80034e2:	f7ff ff4d 	bl	8003380 <five>
 80034e6:	e011      	b.n	800350c <digit_2+0x90>
	case 6: six(); break;
 80034e8:	f7ff ff51 	bl	800338e <six>
 80034ec:	e00e      	b.n	800350c <digit_2+0x90>
	case 7: seven(); break;
 80034ee:	f7ff ff55 	bl	800339c <seven>
 80034f2:	e00b      	b.n	800350c <digit_2+0x90>
	case 8: eight(); break;
 80034f4:	f7ff ff59 	bl	80033aa <eight>
 80034f8:	e008      	b.n	800350c <digit_2+0x90>
	case 9: nine(); break;
 80034fa:	f7ff ff5d 	bl	80033b8 <nine>
 80034fe:	e005      	b.n	800350c <digit_2+0x90>
	case 0: zero(); break;
 8003500:	f7ff ff61 	bl	80033c6 <zero>
 8003504:	e002      	b.n	800350c <digit_2+0x90>
	case 99: no_error(); break;
 8003506:	f7ff ff65 	bl	80033d4 <no_error>
 800350a:	bf00      	nop
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <get_error_list_length>:
 * the array until it encounters a zero value or reaches the end of the array.
 *
 * @param error_list The error list array to calculate the length of.
 * @return The length of the error list array.
 */
uint8_t get_error_list_length(uint8_t error_list[]) {
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint8_t count = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003520:	2300      	movs	r3, #0
 8003522:	73bb      	strb	r3, [r7, #14]
 8003524:	e00b      	b.n	800353e <get_error_list_length+0x2a>
    if (error_list[i] == 0) {
 8003526:	7bbb      	ldrb	r3, [r7, #14]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <get_error_list_length+0x32>
      break;
    }
    count++;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	3301      	adds	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	3301      	adds	r3, #1
 800353c:	73bb      	strb	r3, [r7, #14]
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	2b1c      	cmp	r3, #28
 8003542:	d9f0      	bls.n	8003526 <get_error_list_length+0x12>
 8003544:	e000      	b.n	8003548 <get_error_list_length+0x34>
      break;
 8003546:	bf00      	nop
  }
  return count;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <check_errorlist>:

uint8_t check_errorlist(uint8_t error_code) {
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < total_errors; i++) {
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e00a      	b.n	800357e <check_errorlist+0x26>
    if (error_list[i] == error_code) {
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <check_errorlist+0x3c>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	79fa      	ldrb	r2, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d101      	bne.n	8003578 <check_errorlist+0x20>
      return 0;
 8003574:	2300      	movs	r3, #0
 8003576:	e006      	b.n	8003586 <check_errorlist+0x2e>
  for (uint8_t i = 0; i < total_errors; i++) {
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b1c      	cmp	r3, #28
 8003582:	d9f1      	bls.n	8003568 <check_errorlist+0x10>
    }
  }
  return 1;
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000198 	.word	0x20000198

08003598 <add_error_to_list>:
 * This function adds a new error code to the end of the error list array.
 *
 * @param new_error The new error code to be added to the error list array.
 * @return None
 */
void add_error_to_list(uint8_t new_error) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if (check_errorlist(new_error)) {
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ffd7 	bl	8003558 <check_errorlist>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <add_error_to_list+0x2a>
    uint8_t length = get_error_list_length(error_list);
 80035b0:	4806      	ldr	r0, [pc, #24]	; (80035cc <add_error_to_list+0x34>)
 80035b2:	f7ff ffaf 	bl	8003514 <get_error_list_length>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73fb      	strb	r3, [r7, #15]
    error_list[length] = new_error;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <add_error_to_list+0x34>)
 80035be:	79fa      	ldrb	r2, [r7, #7]
 80035c0:	54ca      	strb	r2, [r1, r3]
  }
  else{}
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000198 	.word	0x20000198

080035d0 <remove_error_from_list>:
 * the removed error code.
 *
 * @param error_to_remove The error code to be removed from the error list array.
 * @return None
 */
void remove_error_from_list(uint8_t error_to_remove) {
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  uint8_t pos, j, i, found = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	733b      	strb	r3, [r7, #12]

  for (i = 0; i < total_errors; i++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	737b      	strb	r3, [r7, #13]
 80035e2:	e00d      	b.n	8003600 <remove_error_from_list+0x30>
    if (error_list[i] == error_to_remove) {
 80035e4:	7b7b      	ldrb	r3, [r7, #13]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <remove_error_from_list+0x70>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	79fa      	ldrb	r2, [r7, #7]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d104      	bne.n	80035fa <remove_error_from_list+0x2a>
      found = 1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	733b      	strb	r3, [r7, #12]
      pos = i;
 80035f4:	7b7b      	ldrb	r3, [r7, #13]
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e005      	b.n	8003606 <remove_error_from_list+0x36>
  for (i = 0; i < total_errors; i++) {
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	3301      	adds	r3, #1
 80035fe:	737b      	strb	r3, [r7, #13]
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	2b1c      	cmp	r3, #28
 8003604:	d9ee      	bls.n	80035e4 <remove_error_from_list+0x14>
    }
  }
  if (found == 1) {
 8003606:	7b3b      	ldrb	r3, [r7, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d113      	bne.n	8003634 <remove_error_from_list+0x64>
    for (j = pos; j < total_errors - 1; j++) {
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	73bb      	strb	r3, [r7, #14]
 8003610:	e009      	b.n	8003626 <remove_error_from_list+0x56>
    	error_list[j] = error_list[j + 1];
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	7bbb      	ldrb	r3, [r7, #14]
 8003618:	4909      	ldr	r1, [pc, #36]	; (8003640 <remove_error_from_list+0x70>)
 800361a:	5c89      	ldrb	r1, [r1, r2]
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <remove_error_from_list+0x70>)
 800361e:	54d1      	strb	r1, [r2, r3]
    for (j = pos; j < total_errors - 1; j++) {
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	3301      	adds	r3, #1
 8003624:	73bb      	strb	r3, [r7, #14]
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b1b      	cmp	r3, #27
 800362a:	d9f2      	bls.n	8003612 <remove_error_from_list+0x42>
    }
    error_list[j] = 0;
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <remove_error_from_list+0x70>)
 8003630:	2100      	movs	r1, #0
 8003632:	54d1      	strb	r1, [r2, r3]
  }
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000198 	.word	0x20000198

08003644 <saprate_digit>:
 * This function separates a two-digit number into its individual digits
 *
 * @param number The two-digit number to be separated.
 * @return None
 */
void saprate_digit(uint8_t number) {
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
  if (number == 99) {
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b63      	cmp	r3, #99	; 0x63
 8003652:	d106      	bne.n	8003662 <saprate_digit+0x1e>
	  display_digit[1] = 99;
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <saprate_digit+0x54>)
 8003656:	2263      	movs	r2, #99	; 0x63
 8003658:	705a      	strb	r2, [r3, #1]
	  display_digit[0] = 99;
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <saprate_digit+0x54>)
 800365c:	2263      	movs	r2, #99	; 0x63
 800365e:	701a      	strb	r2, [r3, #0]
  } else {
	  display_digit[1] = number % 10;
	  display_digit[0] = number / 10;
  }
}
 8003660:	e014      	b.n	800368c <saprate_digit+0x48>
	  display_digit[1] = number % 10;
 8003662:	79fa      	ldrb	r2, [r7, #7]
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <saprate_digit+0x58>)
 8003666:	fba3 1302 	umull	r1, r3, r3, r2
 800366a:	08d9      	lsrs	r1, r3, #3
 800366c:	460b      	mov	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <saprate_digit+0x54>)
 800367a:	705a      	strb	r2, [r3, #1]
	  display_digit[0] = number / 10;
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <saprate_digit+0x58>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <saprate_digit+0x54>)
 800368a:	701a      	strb	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	2000079c 	.word	0x2000079c
 800369c:	cccccccd 	.word	0xcccccccd

080036a0 <error_display>:
 * by alternating between two digits. It uses a toggle flag to determine which
 * digit to display on each invocation.
 *
 * @return None
 */
void error_display() {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0

  if (toggleFlag == 0)
 80036a4:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <error_display+0x3c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <error_display+0x18>
	  digit_1(display_digit[0]);
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <error_display+0x40>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe97 	bl	80033e4 <digit_1>
 80036b6:	e008      	b.n	80036ca <error_display+0x2a>
  else if (toggleFlag == 1)
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <error_display+0x3c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d104      	bne.n	80036ca <error_display+0x2a>
	  digit_2(display_digit[1]);
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <error_display+0x40>)
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fed9 	bl	800347c <digit_2>

  toggleFlag ^= 1; // Toggling the flag
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <error_display+0x3c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b01      	ldr	r3, [pc, #4]	; (80036dc <error_display+0x3c>)
 80036d6:	701a      	strb	r2, [r3, #0]

}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000798 	.word	0x20000798
 80036e0:	2000079c 	.word	0x2000079c

080036e4 <display_errors>:
 *
 * This function displays errors from an error list array on a segmented display.
 *
 * @return None
 */
void display_errors() {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint8_t error_list_length;
    error_list_length = get_error_list_length(error_list);
 80036ea:	4811      	ldr	r0, [pc, #68]	; (8003730 <display_errors+0x4c>)
 80036ec:	f7ff ff12 	bl	8003514 <get_error_list_length>
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
    if (error_list_length != 0) {
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <display_errors+0x42>
    	saprate_digit(error_list[count_error]);
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <display_errors+0x50>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <display_errors+0x4c>)
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff9d 	bl	8003644 <saprate_digit>
      count_error++;
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <display_errors+0x50>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <display_errors+0x50>)
 8003714:	701a      	strb	r2, [r3, #0]
      if (error_list_length == count_error) {
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <display_errors+0x50>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	79fa      	ldrb	r2, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d102      	bne.n	8003726 <display_errors+0x42>
        count_error = 0;
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <display_errors+0x50>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000198 	.word	0x20000198
 8003734:	2000079e 	.word	0x2000079e

08003738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800374e:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	4a9c      	ldr	r2, [pc, #624]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003754:	f043 0310 	orr.w	r3, r3, #16
 8003758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375a:	4b9a      	ldr	r3, [pc, #616]	; (80039c4 <MX_GPIO_Init+0x28c>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003766:	4b97      	ldr	r3, [pc, #604]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	4a96      	ldr	r2, [pc, #600]	; (80039c4 <MX_GPIO_Init+0x28c>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003772:	4b94      	ldr	r3, [pc, #592]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800377e:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4a90      	ldr	r2, [pc, #576]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378a:	4b8e      	ldr	r3, [pc, #568]	; (80039c4 <MX_GPIO_Init+0x28c>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	4b8b      	ldr	r3, [pc, #556]	; (80039c4 <MX_GPIO_Init+0x28c>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a8a      	ldr	r2, [pc, #552]	; (80039c4 <MX_GPIO_Init+0x28c>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	4a84      	ldr	r2, [pc, #528]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ba:	4b82      	ldr	r3, [pc, #520]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d2:	4b7c      	ldr	r3, [pc, #496]	; (80039c4 <MX_GPIO_Init+0x28c>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_PC_Pin|DO1_Pin|DO2_Pin|ID3_Pin, GPIO_PIN_RESET);
 80037de:	2200      	movs	r2, #0
 80037e0:	f24e 0108 	movw	r1, #57352	; 0xe008
 80037e4:	4878      	ldr	r0, [pc, #480]	; (80039c8 <MX_GPIO_Init+0x290>)
 80037e6:	f003 fe09 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_DRIVER_Pin|ID6_Pin, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	f242 0110 	movw	r1, #8208	; 0x2010
 80037f0:	4876      	ldr	r0, [pc, #472]	; (80039cc <MX_GPIO_Init+0x294>)
 80037f2:	f003 fe03 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSP_PRECHARGE_MOSFET_GPIO_Port, DSP_PRECHARGE_MOSFET_Pin, GPIO_PIN_RESET);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2104      	movs	r1, #4
 80037fa:	4875      	ldr	r0, [pc, #468]	; (80039d0 <MX_GPIO_Init+0x298>)
 80037fc:	f003 fdfe 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_OP_Pin|SPARE_PC_Pin|ID5_Pin, GPIO_PIN_RESET);
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8003806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380a:	f003 fdf7 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ID4_Pin|ID0_Pin|ID1_Pin|ID2_Pin, GPIO_PIN_RESET);
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8003814:	486f      	ldr	r0, [pc, #444]	; (80039d4 <MX_GPIO_Init+0x29c>)
 8003816:	f003 fdf1 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SP_OP3_Pin|SP_OP2_Pin|SP_OP1_Pin, GPIO_PIN_RESET);
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003820:	486d      	ldr	r0, [pc, #436]	; (80039d8 <MX_GPIO_Init+0x2a0>)
 8003822:	f003 fdeb 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_PC_Pin|DO1_Pin|DO2_Pin|ID3_Pin;
 8003826:	f24e 0308 	movw	r3, #57352	; 0xe008
 800382a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382c:	2301      	movs	r3, #1
 800382e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003830:	2302      	movs	r3, #2
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	4862      	ldr	r0, [pc, #392]	; (80039c8 <MX_GPIO_Init+0x290>)
 8003840:	f003 fc42 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_FLTAFE_Pin;
 8003844:	2310      	movs	r3, #16
 8003846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800384c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800384e:	2302      	movs	r3, #2
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSP_FLTAFE_GPIO_Port, &GPIO_InitStruct);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	485b      	ldr	r0, [pc, #364]	; (80039c8 <MX_GPIO_Init+0x290>)
 800385a:	f003 fc35 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RESET_DRIVER_Pin|ID6_Pin;
 800385e:	f242 0310 	movw	r3, #8208	; 0x2010
 8003862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003864:	2301      	movs	r3, #1
 8003866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003868:	2302      	movs	r3, #2
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	4619      	mov	r1, r3
 8003876:	4855      	ldr	r0, [pc, #340]	; (80039cc <MX_GPIO_Init+0x294>)
 8003878:	f003 fc26 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_DIODE_Pin;
 800387c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003882:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003888:	2302      	movs	r3, #2
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ERROR_DIODE_GPIO_Port, &GPIO_InitStruct);
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	4619      	mov	r1, r3
 8003892:	484f      	ldr	r0, [pc, #316]	; (80039d0 <MX_GPIO_Init+0x298>)
 8003894:	f003 fc18 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_FLTPSFB_Pin;
 8003898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800389e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSP_FLTPSFB_GPIO_Port, &GPIO_InitStruct);
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	4619      	mov	r1, r3
 80038ae:	4848      	ldr	r0, [pc, #288]	; (80039d0 <MX_GPIO_Init+0x298>)
 80038b0:	f003 fc0a 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DSP_RDYAFE_Pin|DSP_RDYPSFB_Pin|DI1_Pin|DI2_Pin;
 80038b4:	f240 3303 	movw	r3, #771	; 0x303
 80038b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038be:	2302      	movs	r3, #2
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4619      	mov	r1, r3
 80038c8:	4840      	ldr	r0, [pc, #256]	; (80039cc <MX_GPIO_Init+0x294>)
 80038ca:	f003 fbfd 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ERROR_MASTER_Pin|DSP_PRECHARGEFLT_Pin;
 80038ce:	230c      	movs	r3, #12
 80038d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038d8:	2302      	movs	r3, #2
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	483a      	ldr	r0, [pc, #232]	; (80039cc <MX_GPIO_Init+0x294>)
 80038e4:	f003 fbf0 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSP_PRECHARGE_MOSFET_Pin;
 80038e8:	2304      	movs	r3, #4
 80038ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ec:	2301      	movs	r3, #1
 80038ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038f0:	2302      	movs	r3, #2
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSP_PRECHARGE_MOSFET_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	4834      	ldr	r0, [pc, #208]	; (80039d0 <MX_GPIO_Init+0x298>)
 8003900:	f003 fbe2 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_OP_Pin|SPARE_PC_Pin|ID5_Pin;
 8003904:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8003908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	2301      	movs	r3, #1
 800390c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800390e:	2302      	movs	r3, #2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 031c 	add.w	r3, r7, #28
 800391a:	4619      	mov	r1, r3
 800391c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003920:	f003 fbd2 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ID4_Pin|ID0_Pin|ID1_Pin|ID2_Pin;
 8003924:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8003928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392a:	2301      	movs	r3, #1
 800392c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800392e:	2302      	movs	r3, #2
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	4619      	mov	r1, r3
 800393c:	4825      	ldr	r0, [pc, #148]	; (80039d4 <MX_GPIO_Init+0x29c>)
 800393e:	f003 fbc3 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SP_OP3_Pin|SP_OP2_Pin|SP_OP1_Pin;
 8003942:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003948:	2301      	movs	r3, #1
 800394a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800394c:	2302      	movs	r3, #2
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003950:	2300      	movs	r3, #0
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	481f      	ldr	r0, [pc, #124]	; (80039d8 <MX_GPIO_Init+0x2a0>)
 800395c:	f003 fbb4 	bl	80070c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = SP_IN3_Pin|SP_IN2_Pin|SP_IN1_Pin|SW1_Pin
 8003960:	f24e 03f9 	movw	r3, #57593	; 0xe0f9
 8003964:	61fb      	str	r3, [r7, #28]
                          |SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin
                          |SW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800396a:	2302      	movs	r3, #2
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800396e:	f107 031c 	add.w	r3, r7, #28
 8003972:	4619      	mov	r1, r3
 8003974:	4818      	ldr	r0, [pc, #96]	; (80039d8 <MX_GPIO_Init+0x2a0>)
 8003976:	f003 fba7 	bl	80070c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800397a:	2200      	movs	r2, #0
 800397c:	2100      	movs	r1, #0
 800397e:	2008      	movs	r0, #8
 8003980:	f002 fe1d 	bl	80065be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003984:	2008      	movs	r0, #8
 8003986:	f002 fe34 	bl	80065f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2009      	movs	r0, #9
 8003990:	f002 fe15 	bl	80065be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003994:	2009      	movs	r0, #9
 8003996:	f002 fe2c 	bl	80065f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2100      	movs	r1, #0
 800399e:	200a      	movs	r0, #10
 80039a0:	f002 fe0d 	bl	80065be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80039a4:	200a      	movs	r0, #10
 80039a6:	f002 fe24 	bl	80065f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	2028      	movs	r0, #40	; 0x28
 80039b0:	f002 fe05 	bl	80065be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039b4:	2028      	movs	r0, #40	; 0x28
 80039b6:	f002 fe1c 	bl	80065f2 <HAL_NVIC_EnableIRQ>

}
 80039ba:	bf00      	nop
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	48001000 	.word	0x48001000
 80039cc:	48000800 	.word	0x48000800
 80039d0:	48001400 	.word	0x48001400
 80039d4:	48000400 	.word	0x48000400
 80039d8:	48000c00 	.word	0x48000c00

080039dc <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0b8      	sub	sp, #224	; 0xe0
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80039e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80039f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
 8003a00:	615a      	str	r2, [r3, #20]
 8003a02:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8003a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a08:	2260      	movs	r2, #96	; 0x60
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f008 fa99 	bl	800bf44 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8003a12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8003a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f008 fa8c 	bl	800bf44 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	2220      	movs	r2, #32
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f008 fa86 	bl	800bf44 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8003a38:	4bc7      	ldr	r3, [pc, #796]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a3a:	4ac8      	ldr	r2, [pc, #800]	; (8003d5c <MX_HRTIM1_Init+0x380>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8003a3e:	4bc6      	ldr	r3, [pc, #792]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8003a44:	4bc4      	ldr	r3, [pc, #784]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8003a4a:	48c3      	ldr	r0, [pc, #780]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a4c:	f003 fd12 	bl	8007474 <HAL_HRTIM_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_HRTIM1_Init+0x7e>
  {
    Error_Handler();
 8003a56:	f000 fc75 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8003a5a:	210c      	movs	r1, #12
 8003a5c:	48be      	ldr	r0, [pc, #760]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a5e:	f003 fdd9 	bl	8007614 <HAL_HRTIM_DLLCalibrationStart>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 8003a68:	f000 fc6c 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8003a6c:	210a      	movs	r1, #10
 8003a6e:	48ba      	ldr	r0, [pc, #744]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003a70:	f003 fe28 	bl	80076c4 <HAL_HRTIM_PollForDLLCalibration>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_HRTIM1_Init+0xa2>
  {
    Error_Handler();
 8003a7a:	f000 fc63 	bl	8004344 <Error_Handler>
  }
  pTimeBaseCfg.Period = 34000;
 8003a7e:	f248 43d0 	movw	r3, #34000	; 0x84d0
 8003a82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8003a92:	2308      	movs	r3, #8
 8003a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8003a98:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	48ad      	ldr	r0, [pc, #692]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003aa2:	f003 fe43 	bl	800772c <HAL_HRTIM_TimeBaseConfig>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 8003aac:	f000 fc4a 	bl	8004344 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_GREATER;
 8003ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8003aca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	48a1      	ldr	r0, [pc, #644]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003ad4:	f003 fedf 	bl	8007896 <HAL_HRTIM_WaveformTimerControl>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_HRTIM1_Init+0x106>
  {
    Error_Handler();
 8003ade:	f000 fc31 	bl	8004344 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8003aea:	2300      	movs	r3, #0
 8003aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 8003aee:	2300      	movs	r3, #0
 8003af0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8003af6:	2300      	movs	r3, #0
 8003af8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8003afa:	2300      	movs	r3, #0
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8003afe:	2300      	movs	r3, #0
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8003b02:	2300      	movs	r3, #0
 8003b04:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8003b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_UPDATE;
 8003b46:	2302      	movs	r3, #2
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8003b58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2100      	movs	r1, #0
 8003b60:	487d      	ldr	r0, [pc, #500]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003b62:	f003 fe0b 	bl	800777c <HAL_HRTIM_WaveformTimerConfig>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_HRTIM1_Init+0x194>
  {
    Error_Handler();
 8003b6c:	f000 fbea 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8003b70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b74:	461a      	mov	r2, r3
 8003b76:	2101      	movs	r1, #1
 8003b78:	4877      	ldr	r0, [pc, #476]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003b7a:	f003 fdff 	bl	800777c <HAL_HRTIM_WaveformTimerConfig>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_HRTIM1_Init+0x1ac>
  {
    Error_Handler();
 8003b84:	f000 fbde 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8003b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2102      	movs	r1, #2
 8003b90:	4871      	ldr	r0, [pc, #452]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003b92:	f003 fdf3 	bl	800777c <HAL_HRTIM_WaveformTimerConfig>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_HRTIM1_Init+0x1c4>
  {
    Error_Handler();
 8003b9c:	f000 fbd2 	bl	8004344 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8003ba6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003baa:	461a      	mov	r2, r3
 8003bac:	2103      	movs	r1, #3
 8003bae:	486a      	ldr	r0, [pc, #424]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003bb0:	f003 fde4 	bl	800777c <HAL_HRTIM_WaveformTimerConfig>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_HRTIM1_Init+0x1e2>
  {
    Error_Handler();
 8003bba:	f000 fbc3 	bl	8004344 <Error_Handler>
  }
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8003bca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4861      	ldr	r0, [pc, #388]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003bd4:	f003 fdd2 	bl	800777c <HAL_HRTIM_WaveformTimerConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_HRTIM1_Init+0x206>
  {
    Error_Handler();
 8003bde:	f000 fbb1 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bea:	2201      	movs	r2, #1
 8003bec:	2100      	movs	r1, #0
 8003bee:	485a      	ldr	r0, [pc, #360]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003bf0:	f003 ff04 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_HRTIM1_Init+0x222>
  {
    Error_Handler();
 8003bfa:	f000 fba3 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c06:	2204      	movs	r2, #4
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4853      	ldr	r0, [pc, #332]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003c0c:	f003 fef6 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_HRTIM1_Init+0x23e>
  {
    Error_Handler();
 8003c16:	f000 fb95 	bl	8004344 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV4;
 8003c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 500;
 8003c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 500;
 8003c32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c36:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8003c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4842      	ldr	r0, [pc, #264]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003c4e:	f003 fe55 	bl	80078fc <HAL_HRTIM_DeadTimeConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_HRTIM1_Init+0x280>
  {
    Error_Handler();
 8003c58:	f000 fb74 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8003c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c60:	461a      	mov	r2, r3
 8003c62:	2101      	movs	r1, #1
 8003c64:	483c      	ldr	r0, [pc, #240]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003c66:	f003 fe49 	bl	80078fc <HAL_HRTIM_DeadTimeConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_HRTIM1_Init+0x298>
  {
    Error_Handler();
 8003c70:	f000 fb68 	bl	8004344 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV2;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 435;
 8003c7a:	f240 13b3 	movw	r3, #435	; 0x1b3
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.FallingValue = 435;
 8003c80:	f240 13b3 	movw	r3, #435	; 0x1b3
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8003c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4832      	ldr	r0, [pc, #200]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003c90:	f003 fe34 	bl	80078fc <HAL_HRTIM_DeadTimeConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_HRTIM1_Init+0x2c2>
  {
    Error_Handler();
 8003c9a:	f000 fb53 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 8003c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	482c      	ldr	r0, [pc, #176]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003ca8:	f003 fe28 	bl	80078fc <HAL_HRTIM_DeadTimeConfig>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8003cb2:	f000 fb47 	bl	8004344 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2100      	movs	r1, #0
 8003cdc:	481e      	ldr	r0, [pc, #120]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003cde:	f003 fffb 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_HRTIM1_Init+0x310>
  {
    Error_Handler();
 8003ce8:	f000 fb2c 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	2204      	movs	r2, #4
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4819      	ldr	r0, [pc, #100]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003cf4:	f003 fff0 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_HRTIM1_Init+0x326>
  {
    Error_Handler();
 8003cfe:	f000 fb21 	bl	8004344 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8003d02:	2308      	movs	r3, #8
 8003d04:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8003d06:	2310      	movs	r3, #16
 8003d08:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4811      	ldr	r0, [pc, #68]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003d12:	f003 ffe1 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_HRTIM1_Init+0x344>
  {
    Error_Handler();
 8003d1c:	f000 fb12 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	2240      	movs	r2, #64	; 0x40
 8003d24:	2103      	movs	r1, #3
 8003d26:	480c      	ldr	r0, [pc, #48]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003d28:	f003 ffd6 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_HRTIM1_Init+0x35a>
  {
    Error_Handler();
 8003d32:	f000 fb07 	bl	8004344 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	2202      	movs	r2, #2
 8003d42:	2100      	movs	r1, #0
 8003d44:	4804      	ldr	r0, [pc, #16]	; (8003d58 <MX_HRTIM1_Init+0x37c>)
 8003d46:	f003 ffc7 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <MX_HRTIM1_Init+0x384>
  {
    Error_Handler();
 8003d50:	f000 faf8 	bl	8004344 <Error_Handler>
 8003d54:	e004      	b.n	8003d60 <MX_HRTIM1_Init+0x384>
 8003d56:	bf00      	nop
 8003d58:	200007a0 	.word	0x200007a0
 8003d5c:	40016800 	.word	0x40016800
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	2208      	movs	r2, #8
 8003d64:	2101      	movs	r1, #1
 8003d66:	4876      	ldr	r0, [pc, #472]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003d68:	f003 ffb6 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <MX_HRTIM1_Init+0x39a>
  {
    Error_Handler();
 8003d72:	f000 fae7 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	2220      	movs	r2, #32
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	4870      	ldr	r0, [pc, #448]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003d7e:	f003 ffab 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_HRTIM1_Init+0x3b0>
  {
    Error_Handler();
 8003d88:	f000 fadc 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	2103      	movs	r1, #3
 8003d92:	486b      	ldr	r0, [pc, #428]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003d94:	f003 ffa0 	bl	8007cd8 <HAL_HRTIM_WaveformOutputConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_HRTIM1_Init+0x3c6>
  {
    Error_Handler();
 8003d9e:	f000 fad1 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8003da2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003da6:	461a      	mov	r2, r3
 8003da8:	2101      	movs	r1, #1
 8003daa:	4865      	ldr	r0, [pc, #404]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003dac:	f003 fcbe 	bl	800772c <HAL_HRTIM_TimeBaseConfig>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_HRTIM1_Init+0x3de>
  {
    Error_Handler();
 8003db6:	f000 fac5 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8003dba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	485f      	ldr	r0, [pc, #380]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003dc4:	f003 fd67 	bl	8007896 <HAL_HRTIM_WaveformTimerControl>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_HRTIM1_Init+0x3f6>
  {
    Error_Handler();
 8003dce:	f000 fab9 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003dd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dda:	2201      	movs	r2, #1
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4858      	ldr	r0, [pc, #352]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003de0:	f003 fe0c 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_HRTIM1_Init+0x412>
  {
    Error_Handler();
 8003dea:	f000 faab 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3;
 8003dee:	2303      	movs	r3, #3
 8003df0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8003df2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003df6:	2204      	movs	r2, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4851      	ldr	r0, [pc, #324]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003dfc:	f003 fdfe 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_HRTIM1_Init+0x42e>
  {
    Error_Handler();
 8003e06:	f000 fa9d 	bl	8004344 <Error_Handler>
  }
  pTimeBaseCfg.Period = 8500;
 8003e0a:	f242 1334 	movw	r3, #8500	; 0x2134
 8003e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8003e12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e16:	461a      	mov	r2, r3
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4849      	ldr	r0, [pc, #292]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003e1c:	f003 fc86 	bl	800772c <HAL_HRTIM_TimeBaseConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_HRTIM1_Init+0x44e>
  {
    Error_Handler();
 8003e26:	f000 fa8d 	bl	8004344 <Error_Handler>
  }
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8003e30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e34:	461a      	mov	r2, r3
 8003e36:	2102      	movs	r1, #2
 8003e38:	4841      	ldr	r0, [pc, #260]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003e3a:	f003 fd2c 	bl	8007896 <HAL_HRTIM_WaveformTimerControl>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_HRTIM1_Init+0x46c>
  {
    Error_Handler();
 8003e44:	f000 fa7e 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003e4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e50:	2201      	movs	r2, #1
 8003e52:	2102      	movs	r1, #2
 8003e54:	483a      	ldr	r0, [pc, #232]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003e56:	f003 fdd1 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_HRTIM1_Init+0x488>
  {
    Error_Handler();
 8003e60:	f000 fa70 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 8003e64:	f241 039a 	movw	r3, #4250	; 0x109a
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8003e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e76:	2202      	movs	r2, #2
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4831      	ldr	r0, [pc, #196]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003e7c:	f003 fdbe 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_HRTIM1_Init+0x4ae>
  {
    Error_Handler();
 8003e86:	f000 fa5d 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8003e8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2103      	movs	r1, #3
 8003e92:	482b      	ldr	r0, [pc, #172]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003e94:	f003 fc4a 	bl	800772c <HAL_HRTIM_TimeBaseConfig>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_HRTIM1_Init+0x4c6>
  {
    Error_Handler();
 8003e9e:	f000 fa51 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8003ea2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	4825      	ldr	r0, [pc, #148]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003eac:	f003 fcf3 	bl	8007896 <HAL_HRTIM_WaveformTimerControl>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_HRTIM1_Init+0x4de>
  {
    Error_Handler();
 8003eb6:	f000 fa45 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8003ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	481e      	ldr	r0, [pc, #120]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003ec8:	f003 fd98 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_HRTIM1_Init+0x4fa>
  {
    Error_Handler();
 8003ed2:	f000 fa37 	bl	8004344 <Error_Handler>
  }
  pCompareCfg.CompareValue = 4250;
 8003ed6:	f241 039a 	movw	r3, #4250	; 0x109a
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8003edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	4816      	ldr	r0, [pc, #88]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003ee6:	f003 fd89 	bl	80079fc <HAL_HRTIM_WaveformCompareConfig>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_HRTIM1_Init+0x518>
  {
    Error_Handler();
 8003ef0:	f000 fa28 	bl	8004344 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8003ef4:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8003ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8003f02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f06:	461a      	mov	r2, r3
 8003f08:	2104      	movs	r1, #4
 8003f0a:	480d      	ldr	r0, [pc, #52]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003f0c:	f003 fc0e 	bl	800772c <HAL_HRTIM_TimeBaseConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_HRTIM1_Init+0x53e>
  {
    Error_Handler();
 8003f16:	f000 fa15 	bl	8004344 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8003f1a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2104      	movs	r1, #4
 8003f22:	4807      	ldr	r0, [pc, #28]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003f24:	f003 fcb7 	bl	8007896 <HAL_HRTIM_WaveformTimerControl>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_HRTIM1_Init+0x556>
  {
    Error_Handler();
 8003f2e:	f000 fa09 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8003f32:	4803      	ldr	r0, [pc, #12]	; (8003f40 <MX_HRTIM1_Init+0x564>)
 8003f34:	f000 f826 	bl	8003f84 <HAL_HRTIM_MspPostInit>

}
 8003f38:	bf00      	nop
 8003f3a:	37e0      	adds	r7, #224	; 0xe0
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200007a0 	.word	0x200007a0

08003f44 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_HRTIM_MspInit+0x38>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10b      	bne.n	8003f6e <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_HRTIM_MspInit+0x3c>)
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_HRTIM_MspInit+0x3c>)
 8003f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f60:	6613      	str	r3, [r2, #96]	; 0x60
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_HRTIM_MspInit+0x3c>)
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40016800 	.word	0x40016800
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_HRTIM_MspPostInit+0xa0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d13a      	bne.n	800401c <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_HRTIM_MspPostInit+0xa4>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = PSFBH1_Pin|PSFBL1_Pin|PSFBH2_Pin|PSFBL2_Pin;
 8003fd6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003fe8:	230d      	movs	r3, #13
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	480e      	ldr	r0, [pc, #56]	; (800402c <HAL_HRTIM_MspPostInit+0xa8>)
 8003ff4:	f003 f868 	bl	80070c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AFEH1_Pin|AFEL1_Pin|AFEH2_Pin|AFEL2_Pin;
 8003ff8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800400a:	230d      	movs	r3, #13
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004018:	f003 f856 	bl	80070c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800401c:	bf00      	nop
 800401e:	3728      	adds	r7, #40	; 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40016800 	.word	0x40016800
 8004028:	40021000 	.word	0x40021000
 800402c:	48000400 	.word	0x48000400

08004030 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <MX_I2C4_Init+0x78>)
 8004038:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30A0A7FB;
 800403a:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <MX_I2C4_Init+0x74>)
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <MX_I2C4_Init+0x7c>)
 800403e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004048:	2201      	movs	r2, #1
 800404a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <MX_I2C4_Init+0x74>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <MX_I2C4_Init+0x74>)
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004060:	2200      	movs	r2, #0
 8004062:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800406a:	480e      	ldr	r0, [pc, #56]	; (80040a4 <MX_I2C4_Init+0x74>)
 800406c:	f004 fb5a 	bl	8008724 <HAL_I2C_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004076:	f000 f965 	bl	8004344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800407a:	2100      	movs	r1, #0
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <MX_I2C4_Init+0x74>)
 800407e:	f005 f9c9 	bl	8009414 <HAL_I2CEx_ConfigAnalogFilter>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004088:	f000 f95c 	bl	8004344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800408c:	2100      	movs	r1, #0
 800408e:	4805      	ldr	r0, [pc, #20]	; (80040a4 <MX_I2C4_Init+0x74>)
 8004090:	f005 fa0b 	bl	80094aa <HAL_I2CEx_ConfigDigitalFilter>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800409a:	f000 f953 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2000089c 	.word	0x2000089c
 80040a8:	40008400 	.word	0x40008400
 80040ac:	30a0a7fb 	.word	0x30a0a7fb

080040b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09e      	sub	sp, #120	; 0x78
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	609a      	str	r2, [r3, #8]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	2254      	movs	r2, #84	; 0x54
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f007 ff37 	bl	800bf44 <memset>
  if(i2cHandle->Instance==I2C4)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <HAL_I2C_MspInit+0xa8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d136      	bne.n	800414e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80040e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80040e6:	2300      	movs	r3, #0
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f006 f80a 	bl	800a108 <HAL_RCCEx_PeriphCLKConfig>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80040fa:	f000 f923 	bl	8004344 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_I2C_MspInit+0xac>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_I2C_MspInit+0xac>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_I2C_MspInit+0xac>)
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PC7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004116:	23c0      	movs	r3, #192	; 0xc0
 8004118:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800411a:	2312      	movs	r3, #18
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8004126:	2308      	movs	r3, #8
 8004128:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800412e:	4619      	mov	r1, r3
 8004130:	480b      	ldr	r0, [pc, #44]	; (8004160 <HAL_I2C_MspInit+0xb0>)
 8004132:	f002 ffc9 	bl	80070c8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_I2C_MspInit+0xac>)
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_I2C_MspInit+0xac>)
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_I2C_MspInit+0xac>)
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800414e:	bf00      	nop
 8004150:	3778      	adds	r7, #120	; 0x78
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40008400 	.word	0x40008400
 800415c:	40021000 	.word	0x40021000
 8004160:	48000800 	.word	0x48000800

08004164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004168:	f000 fd55 	bl	8004c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800416c:	f000 f894 	bl	8004298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004170:	f7ff fae2 	bl	8003738 <MX_GPIO_Init>
  MX_DMA_Init();
 8004174:	f7ff f8be 	bl	80032f4 <MX_DMA_Init>
  MX_HRTIM1_Init();
 8004178:	f7ff fc30 	bl	80039dc <MX_HRTIM1_Init>
  MX_TIM7_Init();
 800417c:	f000 fb1e 	bl	80047bc <MX_TIM7_Init>
  MX_DAC1_Init();
 8004180:	f7ff f82e 	bl	80031e0 <MX_DAC1_Init>
  MX_I2C4_Init();
 8004184:	f7ff ff54 	bl	8004030 <MX_I2C4_Init>
  MX_SPI4_Init();
 8004188:	f000 f8e2 	bl	8004350 <MX_SPI4_Init>
  MX_UART4_Init();
 800418c:	f000 fbc6 	bl	800491c <MX_UART4_Init>
  MX_UART5_Init();
 8004190:	f000 fc10 	bl	80049b4 <MX_UART5_Init>
  MX_TIM1_Init();
 8004194:	f000 fa3a 	bl	800460c <MX_TIM1_Init>
  MX_TIM4_Init();
 8004198:	f000 fa8c 	bl	80046b4 <MX_TIM4_Init>
  MX_TIM6_Init();
 800419c:	f000 fad8 	bl	8004750 <MX_TIM6_Init>
  MX_ADC1_Init();
 80041a0:	f7fe ff18 	bl	8002fd4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  para_load();
 80041a4:	f7fc fff2 	bl	800118c <para_load>

	// Define ManualSlaveNo for Testing.
#ifdef ManualSlaveNo
	u8Slavenumber=1;
#else
	u8Slavenumber = SlaveBoardNum();
 80041a8:	f000 f8c0 	bl	800432c <SlaveBoardNum>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <main+0x108>)
 80041b2:	801a      	strh	r2, [r3, #0]
	if(u8Slavenumber == 0 || u8Slavenumber > 39 ){
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <main+0x108>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <main+0x60>
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <main+0x108>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	2b27      	cmp	r3, #39	; 0x27
 80041c2:	d907      	bls.n	80041d4 <main+0x70>
		fault7.bits.cellAddress_fault = 1;
 80041c4:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <main+0x10c>)
 80041c6:	7813      	ldrb	r3, [r2, #0]
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	7013      	strb	r3, [r2, #0]
		add_error_to_list(28);
 80041ce:	201c      	movs	r0, #28
 80041d0:	f7ff f9e2 	bl	8003598 <add_error_to_list>
#endif

//	CAN2_Identification();
//	MX_FDCAN1_Init();
//	MX_FDCAN2_Init();
	ControlInit(); // peripheral Initialization
 80041d4:	f7fd ff7c 	bl	80020d0 <ControlInit>
	turnOff(); // Ensuring the Turning off of AFE and PSFB pulses
 80041d8:	f7fe faa2 	bl	8002720 <turnOff>

	phaseShift_Pwm(); // Phase Shift Selection based on Slave Number Selected.
 80041dc:	f7fd fe72 	bl	8001ec4 <phaseShift_Pwm>
  while (1)
  {



		if(cmd.bits.fault_reset == 1){
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <main+0x110>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <main+0x8e>
		//	NVIC_SystemReset();	// System reset
			manual_fault_reset(); // Manual reset of Fault over command from Master
 80041ee:	f7fe fdb9 	bl	8002d64 <manual_fault_reset>

		}

		if (mSec1_Flag==1){
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <main+0x114>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d104      	bne.n	8004204 <main+0xa0>
			getDigiIn();
 80041fa:	f7fc fffb 	bl	80011f4 <getDigiIn>
//			}
//			else
//			{
//			}
			//CAN_DATA_XCHANGING(); // Exchange of Data between the Master and Slave
			mSec1_Flag=0;
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <main+0x114>)
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
		}

		//Task Executed at every 40 mSec
		if (mSec40_Flag==1){
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <main+0x118>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10a      	bne.n	8004222 <main+0xbe>
			}
			else
			{
//				API_CAN_HEARTBEAT_CELL0139_MASTER01(DISCONNECT);
			}
			u8teamlastvalue=u8MASTER1_STATUS;
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <main+0x11c>)
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <main+0x120>)
 8004212:	701a      	strb	r2, [r3, #0]
			}
			else
			{
//				API_CAN2_HEARTBEAT_CELL0139_MASTER01(DISCONNECT);
			}
			u8teamlastvalue_CAN2=u8MASTER1_STATUS_CAN2;
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <main+0x124>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <main+0x128>)
 800421a:	701a      	strb	r2, [r3, #0]
			}
			else
			{

			}*/
			mSec40_Flag=0;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <main+0x118>)
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
		}
		//Task Executed at every 100 mSec
		if (mSec100_Flag==1){
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <main+0x12c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d102      	bne.n	8004230 <main+0xcc>
			mSec100_Flag=0;
 800422a:	4b19      	ldr	r3, [pc, #100]	; (8004290 <main+0x12c>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
//			CAN_DATA_XCHANGING();
		}

		// Task Executed at every 1 Sec
		if(Sec1_Flag==1){
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <main+0x130>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d1d3      	bne.n	80041e0 <main+0x7c>
			display_errors(); // show error in display
 8004238:	f7ff fa54 	bl	80036e4 <display_errors>
			u8MASTER1_STATUS=0;
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <main+0x11c>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
			u8MASTER1_STATUS_CAN2=0;
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <main+0x124>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
			Sec1_Flag=0;
 8004248:	4b12      	ldr	r3, [pc, #72]	; (8004294 <main+0x130>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
			if(cmd.bits.Parameter_Save == 1)
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <main+0x110>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0c1      	beq.n	80041e0 <main+0x7c>
			{
				cmd.bits.Parameter_Save=0;
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <main+0x110>)
 800425e:	7813      	ldrb	r3, [r2, #0]
 8004260:	f36f 1345 	bfc	r3, #5, #1
 8004264:	7013      	strb	r3, [r2, #0]
				para_save();
 8004266:	f7fc ffb9 	bl	80011dc <para_save>
		if(cmd.bits.fault_reset == 1){
 800426a:	e7b9      	b.n	80041e0 <main+0x7c>
 800426c:	200008f2 	.word	0x200008f2
 8004270:	20000544 	.word	0x20000544
 8004274:	20000548 	.word	0x20000548
 8004278:	20000450 	.word	0x20000450
 800427c:	20000451 	.word	0x20000451
 8004280:	200008f0 	.word	0x200008f0
 8004284:	200008f4 	.word	0x200008f4
 8004288:	200008f1 	.word	0x200008f1
 800428c:	200008f5 	.word	0x200008f5
 8004290:	20000453 	.word	0x20000453
 8004294:	20000452 	.word	0x20000452

08004298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b094      	sub	sp, #80	; 0x50
 800429c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800429e:	f107 0318 	add.w	r3, r7, #24
 80042a2:	2238      	movs	r2, #56	; 0x38
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f007 fe4c 	bl	800bf44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f005 f942 	bl	8009544 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ca:	2302      	movs	r3, #2
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042ce:	2303      	movs	r3, #3
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80042d2:	2306      	movs	r3, #6
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80042d6:	2355      	movs	r3, #85	; 0x55
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042da:	2302      	movs	r3, #2
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042de:	2302      	movs	r3, #2
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042e2:	2302      	movs	r3, #2
 80042e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042e6:	f107 0318 	add.w	r3, r7, #24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f005 f9de 	bl	80096ac <HAL_RCC_OscConfig>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80042f6:	f000 f825 	bl	8004344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042fa:	230f      	movs	r3, #15
 80042fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042fe:	2303      	movs	r3, #3
 8004300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800430a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	2104      	movs	r1, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f005 fcdb 	bl	8009cd0 <HAL_RCC_ClockConfig>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004320:	f000 f810 	bl	8004344 <Error_Handler>
  }
}
 8004324:	bf00      	nop
 8004326:	3750      	adds	r7, #80	; 0x50
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <SlaveBoardNum>:

/* USER CODE BEGIN 4 */
uint16_t SlaveBoardNum(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	/*Read bits from GPIO and return from here with Hex Number*/
	uint16_t u16Slavenumber=generate_address();
 8004332:	f7fd f8fd 	bl	8001530 <generate_address>
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
	return u16Slavenumber;
 800433a:	88fb      	ldrh	r3, [r7, #6]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004348:	b672      	cpsid	i
}
 800434a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800434c:	e7fe      	b.n	800434c <Error_Handler+0x8>
	...

08004350 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <MX_SPI4_Init+0x78>)
 8004358:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_SPI4_Init+0x74>)
 800435c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004360:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <MX_SPI4_Init+0x74>)
 800436a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800436e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004372:	2200      	movs	r2, #0
 8004374:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004378:	2200      	movs	r2, #0
 800437a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <MX_SPI4_Init+0x74>)
 800437e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004382:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004386:	2210      	movs	r2, #16
 8004388:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <MX_SPI4_Init+0x74>)
 800438c:	2200      	movs	r2, #0
 800438e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004392:	2200      	movs	r2, #0
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <MX_SPI4_Init+0x74>)
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <MX_SPI4_Init+0x74>)
 800439e:	2207      	movs	r2, #7
 80043a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <MX_SPI4_Init+0x74>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <MX_SPI4_Init+0x74>)
 80043aa:	2208      	movs	r2, #8
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80043ae:	4805      	ldr	r0, [pc, #20]	; (80043c4 <MX_SPI4_Init+0x74>)
 80043b0:	f006 f8f8 	bl	800a5a4 <HAL_SPI_Init>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80043ba:	f7ff ffc3 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200008f8 	.word	0x200008f8
 80043c8:	40013c00 	.word	0x40013c00

080043cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_SPI_MspInit+0x7c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d127      	bne.n	800443e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_SPI_MspInit+0x80>)
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_SPI_MspInit+0x80>)
 80043f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f8:	6613      	str	r3, [r2, #96]	; 0x60
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_SPI_MspInit+0x80>)
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_SPI_MspInit+0x80>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_SPI_MspInit+0x80>)
 800440c:	f043 0310 	orr.w	r3, r3, #16
 8004410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_SPI_MspInit+0x80>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SCLK_PC_Pin|SDO_PC_Pin|SDI_PC_Pin;
 800441e:	2364      	movs	r3, #100	; 0x64
 8004420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004422:	2302      	movs	r3, #2
 8004424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800442e:	2305      	movs	r3, #5
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	4619      	mov	r1, r3
 8004438:	4805      	ldr	r0, [pc, #20]	; (8004450 <HAL_SPI_MspInit+0x84>)
 800443a:	f002 fe45 	bl	80070c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800443e:	bf00      	nop
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40013c00 	.word	0x40013c00
 800444c:	40021000 	.word	0x40021000
 8004450:	48001000 	.word	0x48001000

08004454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_MspInit+0x4c>)
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <HAL_MspInit+0x4c>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6613      	str	r3, [r2, #96]	; 0x60
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <HAL_MspInit+0x4c>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_MspInit+0x4c>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_MspInit+0x4c>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_MspInit+0x4c>)
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800448a:	f000 fc49 	bl	8004d20 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800448e:	2002      	movs	r0, #2
 8004490:	f000 fc32 	bl	8004cf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004494:	f005 f8fa 	bl	800968c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000

080044a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044a8:	e7fe      	b.n	80044a8 <NMI_Handler+0x4>

080044aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ae:	e7fe      	b.n	80044ae <HardFault_Handler+0x4>

080044b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <MemManage_Handler+0x4>

080044b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ba:	e7fe      	b.n	80044ba <BusFault_Handler+0x4>

080044bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c0:	e7fe      	b.n	80044c0 <UsageFault_Handler+0x4>

080044c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044f0:	f000 fbe4 	bl	8004cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ERROR_MASTER_Pin);
 80044fc:	2004      	movs	r0, #4
 80044fe:	f002 ff95 	bl	800742c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}

08004506 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_PRECHARGEFLT_Pin);
 800450a:	2008      	movs	r0, #8
 800450c:	f002 ff8e 	bl	800742c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}

08004514 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_FLTAFE_Pin);
 8004518:	2010      	movs	r0, #16
 800451a:	f002 ff87 	bl	800742c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  fault5.bits.B1F1_fault = 1;
 800451e:	4a06      	ldr	r2, [pc, #24]	; (8004538 <EXTI4_IRQHandler+0x24>)
 8004520:	7813      	ldrb	r3, [r2, #0]
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	7013      	strb	r3, [r2, #0]
  turnOff();
 8004528:	f7fe f8fa 	bl	8002720 <turnOff>
  add_error_to_list(18);
 800452c:	2012      	movs	r0, #18
 800452e:	f7ff f833 	bl	8003598 <add_error_to_list>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000540 	.word	0x20000540

0800453c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <DMA1_Channel1_IRQHandler+0x10>)
 8004542:	f002 fc72 	bl	8006e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000724 	.word	0x20000724

08004550 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004556:	f006 f99f 	bl	800a898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	2000095c 	.word	0x2000095c

08004564 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <TIM4_IRQHandler+0x10>)
 800456a:	f006 f995 	bl	800a898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200009a8 	.word	0x200009a8

08004578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSP_FLTPSFB_Pin);
 800457c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004580:	f002 ff54 	bl	800742c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  fault5.bits.B2F1_fault = 1;
 8004584:	4a05      	ldr	r2, [pc, #20]	; (800459c <EXTI15_10_IRQHandler+0x24>)
 8004586:	7813      	ldrb	r3, [r2, #0]
 8004588:	f043 0310 	orr.w	r3, r3, #16
 800458c:	7013      	strb	r3, [r2, #0]
  turnOff();
 800458e:	f7fe f8c7 	bl	8002720 <turnOff>
  add_error_to_list(22);
 8004592:	2016      	movs	r0, #22
 8004594:	f7ff f800 	bl	8003598 <add_error_to_list>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000540 	.word	0x20000540

080045a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045a4:	4804      	ldr	r0, [pc, #16]	; (80045b8 <TIM6_DAC_IRQHandler+0x18>)
 80045a6:	f006 f977 	bl	800a898 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80045aa:	4804      	ldr	r0, [pc, #16]	; (80045bc <TIM6_DAC_IRQHandler+0x1c>)
 80045ac:	f002 f8ca 	bl	8006744 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  TIM6_Execution();
 80045b0:	f7fd ffb4 	bl	800251c <TIM6_Execution>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045b4:	bf00      	nop
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200009f4 	.word	0x200009f4
 80045bc:	20000784 	.word	0x20000784

080045c0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80045c4:	4805      	ldr	r0, [pc, #20]	; (80045dc <TIM7_DAC_IRQHandler+0x1c>)
 80045c6:	f006 f967 	bl	800a898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Adc1_Buffer,ADC1_BUFFER_SIZE); //Start ADC1
 80045ca:	2210      	movs	r2, #16
 80045cc:	4904      	ldr	r1, [pc, #16]	; (80045e0 <TIM7_DAC_IRQHandler+0x20>)
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <TIM7_DAC_IRQHandler+0x24>)
 80045d0:	f000 ff90 	bl	80054f4 <HAL_ADC_Start_DMA>
  Tim7_Execution();
 80045d4:	f7fd feda 	bl	800238c <Tim7_Execution>
  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000a40 	.word	0x20000a40
 80045e0:	200001e4 	.word	0x200001e4
 80045e4:	200006b8 	.word	0x200006b8

080045e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <SystemInit+0x20>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <SystemInit+0x20>)
 80045f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <MX_TIM1_Init+0xa0>)
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <MX_TIM1_Init+0xa4>)
 800462e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <MX_TIM1_Init+0xa0>)
 800463e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <MX_TIM1_Init+0xa0>)
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004656:	4815      	ldr	r0, [pc, #84]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004658:	f006 f84f 	bl	800a6fa <HAL_TIM_Base_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004662:	f7ff fe6f 	bl	8004344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4619      	mov	r1, r3
 8004672:	480e      	ldr	r0, [pc, #56]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004674:	f006 fa60 	bl	800ab38 <HAL_TIM_ConfigClockSource>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800467e:	f7ff fe61 	bl	8004344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4806      	ldr	r0, [pc, #24]	; (80046ac <MX_TIM1_Init+0xa0>)
 8004694:	f006 fce8 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800469e:	f7ff fe51 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80046a2:	bf00      	nop
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	2000095c 	.word	0x2000095c
 80046b0:	40012c00 	.word	0x40012c00

080046b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046ba:	f107 0310 	add.w	r3, r7, #16
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <MX_TIM4_Init+0x94>)
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <MX_TIM4_Init+0x98>)
 80046d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <MX_TIM4_Init+0x94>)
 80046da:	2200      	movs	r2, #0
 80046dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046de:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <MX_TIM4_Init+0x94>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <MX_TIM4_Init+0x94>)
 80046e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <MX_TIM4_Init+0x94>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <MX_TIM4_Init+0x94>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046f8:	4813      	ldr	r0, [pc, #76]	; (8004748 <MX_TIM4_Init+0x94>)
 80046fa:	f005 fffe 	bl	800a6fa <HAL_TIM_Base_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004704:	f7ff fe1e 	bl	8004344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800470c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800470e:	f107 0310 	add.w	r3, r7, #16
 8004712:	4619      	mov	r1, r3
 8004714:	480c      	ldr	r0, [pc, #48]	; (8004748 <MX_TIM4_Init+0x94>)
 8004716:	f006 fa0f 	bl	800ab38 <HAL_TIM_ConfigClockSource>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004720:	f7ff fe10 	bl	8004344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004724:	2300      	movs	r3, #0
 8004726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4805      	ldr	r0, [pc, #20]	; (8004748 <MX_TIM4_Init+0x94>)
 8004732:	f006 fc99 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800473c:	f7ff fe02 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004740:	bf00      	nop
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200009a8 	.word	0x200009a8
 800474c:	40000800 	.word	0x40000800

08004750 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <MX_TIM6_Init+0x64>)
 8004762:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <MX_TIM6_Init+0x68>)
 8004764:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <MX_TIM6_Init+0x64>)
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <MX_TIM6_Init+0x64>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <MX_TIM6_Init+0x64>)
 8004774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004778:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <MX_TIM6_Init+0x64>)
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004780:	480c      	ldr	r0, [pc, #48]	; (80047b4 <MX_TIM6_Init+0x64>)
 8004782:	f005 ffba 	bl	800a6fa <HAL_TIM_Base_Init>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800478c:	f7ff fdda 	bl	8004344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004790:	2300      	movs	r3, #0
 8004792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_TIM6_Init+0x64>)
 800479e:	f006 fc63 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80047a8:	f7ff fdcc 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200009f4 	.word	0x200009f4
 80047b8:	40001000 	.word	0x40001000

080047bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <MX_TIM7_Init+0x64>)
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <MX_TIM7_Init+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <MX_TIM7_Init+0x64>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <MX_TIM7_Init+0x64>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <MX_TIM7_Init+0x64>)
 80047e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e6:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <MX_TIM7_Init+0x64>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047ec:	480c      	ldr	r0, [pc, #48]	; (8004820 <MX_TIM7_Init+0x64>)
 80047ee:	f005 ff84 	bl	800a6fa <HAL_TIM_Base_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80047f8:	f7ff fda4 	bl	8004344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047fc:	2300      	movs	r3, #0
 80047fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4805      	ldr	r0, [pc, #20]	; (8004820 <MX_TIM7_Init+0x64>)
 800480a:	f006 fc2d 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004814:	f7ff fd96 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000a40 	.word	0x20000a40
 8004824:	40001400 	.word	0x40001400

08004828 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a34      	ldr	r2, [pc, #208]	; (8004908 <HAL_TIM_Base_MspInit+0xe0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d114      	bne.n	8004864 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800483a:	4b34      	ldr	r3, [pc, #208]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	4a33      	ldr	r2, [pc, #204]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 8004840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004844:	6613      	str	r3, [r2, #96]	; 0x60
 8004846:	4b31      	ldr	r3, [pc, #196]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	2019      	movs	r0, #25
 8004858:	f001 feb1 	bl	80065be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800485c:	2019      	movs	r0, #25
 800485e:	f001 fec8 	bl	80065f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004862:	e04c      	b.n	80048fe <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <HAL_TIM_Base_MspInit+0xe8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d114      	bne.n	8004898 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	201e      	movs	r0, #30
 800488c:	f001 fe97 	bl	80065be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004890:	201e      	movs	r0, #30
 8004892:	f001 feae 	bl	80065f2 <HAL_NVIC_EnableIRQ>
}
 8004896:	e032      	b.n	80048fe <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <HAL_TIM_Base_MspInit+0xec>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d114      	bne.n	80048cc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048a8:	f043 0310 	orr.w	r3, r3, #16
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	2036      	movs	r0, #54	; 0x36
 80048c0:	f001 fe7d 	bl	80065be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048c4:	2036      	movs	r0, #54	; 0x36
 80048c6:	f001 fe94 	bl	80065f2 <HAL_NVIC_EnableIRQ>
}
 80048ca:	e018      	b.n	80048fe <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <HAL_TIM_Base_MspInit+0xf0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d113      	bne.n	80048fe <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_TIM_Base_MspInit+0xe4>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80048ee:	2200      	movs	r2, #0
 80048f0:	2100      	movs	r1, #0
 80048f2:	2037      	movs	r0, #55	; 0x37
 80048f4:	f001 fe63 	bl	80065be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80048f8:	2037      	movs	r0, #55	; 0x37
 80048fa:	f001 fe7a 	bl	80065f2 <HAL_NVIC_EnableIRQ>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40000800 	.word	0x40000800
 8004914:	40001000 	.word	0x40001000
 8004918:	40001400 	.word	0x40001400

0800491c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <MX_UART4_Init+0x90>)
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <MX_UART4_Init+0x94>)
 8004924:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004926:	4b21      	ldr	r3, [pc, #132]	; (80049ac <MX_UART4_Init+0x90>)
 8004928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800492c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <MX_UART4_Init+0x90>)
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <MX_UART4_Init+0x90>)
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <MX_UART4_Init+0x90>)
 800493c:	2200      	movs	r2, #0
 800493e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <MX_UART4_Init+0x90>)
 8004942:	220c      	movs	r2, #12
 8004944:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <MX_UART4_Init+0x90>)
 8004948:	2200      	movs	r2, #0
 800494a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <MX_UART4_Init+0x90>)
 800494e:	2200      	movs	r2, #0
 8004950:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <MX_UART4_Init+0x90>)
 8004954:	2200      	movs	r2, #0
 8004956:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <MX_UART4_Init+0x90>)
 800495a:	2200      	movs	r2, #0
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <MX_UART4_Init+0x90>)
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004964:	4811      	ldr	r0, [pc, #68]	; (80049ac <MX_UART4_Init+0x90>)
 8004966:	f006 fc5b 	bl	800b220 <HAL_UART_Init>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004970:	f7ff fce8 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004974:	2100      	movs	r1, #0
 8004976:	480d      	ldr	r0, [pc, #52]	; (80049ac <MX_UART4_Init+0x90>)
 8004978:	f007 f9f6 	bl	800bd68 <HAL_UARTEx_SetTxFifoThreshold>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004982:	f7ff fcdf 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004986:	2100      	movs	r1, #0
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <MX_UART4_Init+0x90>)
 800498a:	f007 fa2b 	bl	800bde4 <HAL_UARTEx_SetRxFifoThreshold>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004994:	f7ff fcd6 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004998:	4804      	ldr	r0, [pc, #16]	; (80049ac <MX_UART4_Init+0x90>)
 800499a:	f007 f9ac 	bl	800bcf6 <HAL_UARTEx_DisableFifoMode>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80049a4:	f7ff fcce 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000a8c 	.word	0x20000a8c
 80049b0:	40004c00 	.word	0x40004c00

080049b4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <MX_UART5_Init+0x90>)
 80049ba:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <MX_UART5_Init+0x94>)
 80049bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <MX_UART5_Init+0x90>)
 80049c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80049c6:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <MX_UART5_Init+0x90>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <MX_UART5_Init+0x90>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <MX_UART5_Init+0x90>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80049d8:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <MX_UART5_Init+0x90>)
 80049da:	220c      	movs	r2, #12
 80049dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <MX_UART5_Init+0x90>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e4:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <MX_UART5_Init+0x90>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <MX_UART5_Init+0x90>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049f0:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <MX_UART5_Init+0x90>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <MX_UART5_Init+0x90>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80049fc:	4811      	ldr	r0, [pc, #68]	; (8004a44 <MX_UART5_Init+0x90>)
 80049fe:	f006 fc0f 	bl	800b220 <HAL_UART_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8004a08:	f7ff fc9c 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	480d      	ldr	r0, [pc, #52]	; (8004a44 <MX_UART5_Init+0x90>)
 8004a10:	f007 f9aa 	bl	800bd68 <HAL_UARTEx_SetTxFifoThreshold>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8004a1a:	f7ff fc93 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <MX_UART5_Init+0x90>)
 8004a22:	f007 f9df 	bl	800bde4 <HAL_UARTEx_SetRxFifoThreshold>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8004a2c:	f7ff fc8a 	bl	8004344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004a30:	4804      	ldr	r0, [pc, #16]	; (8004a44 <MX_UART5_Init+0x90>)
 8004a32:	f007 f960 	bl	800bcf6 <HAL_UARTEx_DisableFifoMode>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8004a3c:	f7ff fc82 	bl	8004344 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004a40:	bf00      	nop
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000b20 	.word	0x20000b20
 8004a48:	40005000 	.word	0x40005000

08004a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0a2      	sub	sp, #136	; 0x88
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a64:	f107 0320 	add.w	r3, r7, #32
 8004a68:	2254      	movs	r2, #84	; 0x54
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f007 fa69 	bl	800bf44 <memset>
  if(uartHandle->Instance==UART4)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a4e      	ldr	r2, [pc, #312]	; (8004bb0 <HAL_UART_MspInit+0x164>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d139      	bne.n	8004af0 <HAL_UART_MspInit+0xa4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004a80:	2300      	movs	r3, #0
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a84:	f107 0320 	add.w	r3, r7, #32
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f005 fb3d 	bl	800a108 <HAL_RCCEx_PeriphCLKConfig>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004a94:	f7ff fc56 	bl	8004344 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a98:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a45      	ldr	r2, [pc, #276]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ab0:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	4a3f      	ldr	r2, [pc, #252]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004ab6:	f043 0304 	orr.w	r3, r3, #4
 8004aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004abc:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TXD_M_Pin|RXD_M_Pin;
 8004ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004acc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004adc:	2305      	movs	r3, #5
 8004ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4833      	ldr	r0, [pc, #204]	; (8004bb8 <HAL_UART_MspInit+0x16c>)
 8004aea:	f002 faed 	bl	80070c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8004aee:	e05b      	b.n	8004ba8 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==UART5)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_UART_MspInit+0x170>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d156      	bne.n	8004ba8 <HAL_UART_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004afa:	2310      	movs	r3, #16
 8004afc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004afe:	2300      	movs	r3, #0
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b02:	f107 0320 	add.w	r3, r7, #32
 8004b06:	4618      	mov	r0, r3
 8004b08:	f005 fafe 	bl	800a108 <HAL_RCCEx_PeriphCLKConfig>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8004b12:	f7ff fc17 	bl	8004344 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b20:	6593      	str	r3, [r2, #88]	; 0x58
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b52:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <HAL_UART_MspInit+0x168>)
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TXD_D_Pin;
 8004b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b64:	2302      	movs	r3, #2
 8004b66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004b72:	2305      	movs	r3, #5
 8004b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(TXD_D_GPIO_Port, &GPIO_InitStruct);
 8004b78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	480e      	ldr	r0, [pc, #56]	; (8004bb8 <HAL_UART_MspInit+0x16c>)
 8004b80:	f002 faa2 	bl	80070c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RXD_D_Pin;
 8004b84:	2304      	movs	r3, #4
 8004b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004b96:	2305      	movs	r3, #5
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(RXD_D_GPIO_Port, &GPIO_InitStruct);
 8004b9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <HAL_UART_MspInit+0x174>)
 8004ba4:	f002 fa90 	bl	80070c8 <HAL_GPIO_Init>
}
 8004ba8:	bf00      	nop
 8004baa:	3788      	adds	r7, #136	; 0x88
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40004c00 	.word	0x40004c00
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	48000800 	.word	0x48000800
 8004bbc:	40005000 	.word	0x40005000
 8004bc0:	48000c00 	.word	0x48000c00

08004bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bc4:	480d      	ldr	r0, [pc, #52]	; (8004bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bc8:	f7ff fd0e 	bl	80045e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bce:	490d      	ldr	r1, [pc, #52]	; (8004c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bd0:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <LoopForever+0xe>)
  movs r3, #0
 8004bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004bd4:	e002      	b.n	8004bdc <LoopCopyDataInit>

08004bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bda:	3304      	adds	r3, #4

08004bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004be0:	d3f9      	bcc.n	8004bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004be4:	4c0a      	ldr	r4, [pc, #40]	; (8004c10 <LoopForever+0x16>)
  movs r3, #0
 8004be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004be8:	e001      	b.n	8004bee <LoopFillZerobss>

08004bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bec:	3204      	adds	r2, #4

08004bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bf0:	d3fb      	bcc.n	8004bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bf2:	f007 f983 	bl	800befc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bf6:	f7ff fab5 	bl	8004164 <main>

08004bfa <LoopForever>:

LoopForever:
    b LoopForever
 8004bfa:	e7fe      	b.n	8004bfa <LoopForever>
  ldr   r0, =_estack
 8004bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c04:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8004c08:	0800c79c 	.word	0x0800c79c
  ldr r2, =_sbss
 8004c0c:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8004c10:	20000bb8 	.word	0x20000bb8

08004c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c14:	e7fe      	b.n	8004c14 <ADC1_2_IRQHandler>

08004c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c20:	2003      	movs	r0, #3
 8004c22:	f001 fcc1 	bl	80065a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c26:	200f      	movs	r0, #15
 8004c28:	f000 f80e 	bl	8004c48 <HAL_InitTick>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	71fb      	strb	r3, [r7, #7]
 8004c36:	e001      	b.n	8004c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c38:	f7ff fc0c 	bl	8004454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_InitTick+0x68>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d022      	beq.n	8004ca2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <HAL_InitTick+0x6c>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_InitTick+0x68>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 fccc 	bl	800660e <HAL_SYSTICK_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d809      	bhi.n	8004c96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c82:	2200      	movs	r2, #0
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	f001 fc98 	bl	80065be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_InitTick+0x70>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e007      	b.n	8004ca6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e004      	b.n	8004ca6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	e001      	b.n	8004ca6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200001c0 	.word	0x200001c0
 8004cb4:	200001b8 	.word	0x200001b8
 8004cb8:	200001bc 	.word	0x200001bc

08004cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_IncTick+0x1c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_IncTick+0x20>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4413      	add	r3, r2
 8004cca:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <HAL_IncTick+0x1c>)
 8004ccc:	6013      	str	r3, [r2, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000bb4 	.word	0x20000bb4
 8004cdc:	200001c0 	.word	0x200001c0

08004ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_GetTick+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000bb4 	.word	0x20000bb4

08004cf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 0202 	bic.w	r2, r3, #2
 8004d08:	4904      	ldr	r1, [pc, #16]	; (8004d1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40010030 	.word	0x40010030

08004d20 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010030 	.word	0x40010030

08004d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3360      	adds	r3, #96	; 0x60
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <LL_ADC_SetOffset+0x44>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	03fff000 	.word	0x03fff000

08004df0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3360      	adds	r3, #96	; 0x60
 8004dfe:	461a      	mov	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3360      	adds	r3, #96	; 0x60
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b087      	sub	sp, #28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3360      	adds	r3, #96	; 0x60
 8004e62:	461a      	mov	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3360      	adds	r3, #96	; 0x60
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	615a      	str	r2, [r3, #20]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3330      	adds	r3, #48	; 0x30
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	4413      	add	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	211f      	movs	r1, #31
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	401a      	ands	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	f003 011f 	and.w	r1, r3, #31
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b087      	sub	sp, #28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3314      	adds	r3, #20
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	0e5b      	lsrs	r3, r3, #25
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	4413      	add	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	0d1b      	lsrs	r3, r3, #20
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2107      	movs	r1, #7
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	401a      	ands	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0d1b      	lsrs	r3, r3, #20
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0318 	and.w	r3, r3, #24
 8004fda:	4908      	ldr	r1, [pc, #32]	; (8004ffc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004fdc:	40d9      	lsrs	r1, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	0007ffff 	.word	0x0007ffff

08005000 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 031f 	and.w	r3, r3, #31
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800502c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6093      	str	r3, [r2, #8]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005054:	d101      	bne.n	800505a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800507c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a4:	d101      	bne.n	80050aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <LL_ADC_IsEnabled+0x18>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <LL_ADC_IsEnabled+0x1a>
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b04      	cmp	r3, #4
 8005140:	d101      	bne.n	8005146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d101      	bne.n	800516c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e1a9      	b.n	80054ea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fd ff99 	bl	80030dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff3f 	bl	8005040 <LL_ADC_IsDeepPowerDownEnabled>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff ff25 	bl	800501c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff5a 	bl	8005090 <LL_ADC_IsInternalRegulatorEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff3e 	bl	8005068 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051ec:	4b9c      	ldr	r3, [pc, #624]	; (8005460 <HAL_ADC_Init+0x2e4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	4a9c      	ldr	r2, [pc, #624]	; (8005464 <HAL_ADC_Init+0x2e8>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	3301      	adds	r3, #1
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005200:	e002      	b.n	8005208 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3b01      	subs	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f9      	bne.n	8005202 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff3c 	bl	8005090 <LL_ADC_IsInternalRegulatorEnabled>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10d      	bne.n	800523a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	f043 0210 	orr.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ff75 	bl	800512e <LL_ADC_REG_IsConversionOngoing>
 8005244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 8142 	bne.w	80054d8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 813e 	bne.w	80054d8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005264:	f043 0202 	orr.w	r2, r3, #2
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff35 	bl	80050e0 <LL_ADC_IsEnabled>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d141      	bne.n	8005300 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005284:	d004      	beq.n	8005290 <HAL_ADC_Init+0x114>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a77      	ldr	r2, [pc, #476]	; (8005468 <HAL_ADC_Init+0x2ec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10f      	bne.n	80052b0 <HAL_ADC_Init+0x134>
 8005290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005294:	f7ff ff24 	bl	80050e0 <LL_ADC_IsEnabled>
 8005298:	4604      	mov	r4, r0
 800529a:	4873      	ldr	r0, [pc, #460]	; (8005468 <HAL_ADC_Init+0x2ec>)
 800529c:	f7ff ff20 	bl	80050e0 <LL_ADC_IsEnabled>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4323      	orrs	r3, r4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e012      	b.n	80052d6 <HAL_ADC_Init+0x15a>
 80052b0:	486e      	ldr	r0, [pc, #440]	; (800546c <HAL_ADC_Init+0x2f0>)
 80052b2:	f7ff ff15 	bl	80050e0 <LL_ADC_IsEnabled>
 80052b6:	4604      	mov	r4, r0
 80052b8:	486d      	ldr	r0, [pc, #436]	; (8005470 <HAL_ADC_Init+0x2f4>)
 80052ba:	f7ff ff11 	bl	80050e0 <LL_ADC_IsEnabled>
 80052be:	4603      	mov	r3, r0
 80052c0:	431c      	orrs	r4, r3
 80052c2:	486c      	ldr	r0, [pc, #432]	; (8005474 <HAL_ADC_Init+0x2f8>)
 80052c4:	f7ff ff0c 	bl	80050e0 <LL_ADC_IsEnabled>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4323      	orrs	r3, r4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d012      	beq.n	8005300 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e2:	d004      	beq.n	80052ee <HAL_ADC_Init+0x172>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a5f      	ldr	r2, [pc, #380]	; (8005468 <HAL_ADC_Init+0x2ec>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_ADC_Init+0x176>
 80052ee:	4a62      	ldr	r2, [pc, #392]	; (8005478 <HAL_ADC_Init+0x2fc>)
 80052f0:	e000      	b.n	80052f4 <HAL_ADC_Init+0x178>
 80052f2:	4a62      	ldr	r2, [pc, #392]	; (800547c <HAL_ADC_Init+0x300>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7ff fd20 	bl	8004d40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7f5b      	ldrb	r3, [r3, #29]
 8005304:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800530a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005310:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005316:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800531e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800532a:	2b01      	cmp	r3, #1
 800532c:	d106      	bne.n	800533c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	045b      	lsls	r3, r3, #17
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_ADC_Init+0x304>)
 8005360:	4013      	ands	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	430b      	orrs	r3, r1
 800536a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fee4 	bl	8005154 <LL_ADC_INJ_IsConversionOngoing>
 800538c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d17f      	bne.n	8005494 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d17c      	bne.n	8005494 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800539e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b6:	f023 0302 	bic.w	r3, r3, #2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	430b      	orrs	r3, r1
 80053c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d017      	beq.n	80053fc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6911      	ldr	r1, [r2, #16]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80053fa:	e013      	b.n	8005424 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800540a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800541c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005420:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542a:	2b01      	cmp	r3, #1
 800542c:	d12a      	bne.n	8005484 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005450:	430a      	orrs	r2, r1
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	611a      	str	r2, [r3, #16]
 800545e:	e019      	b.n	8005494 <HAL_ADC_Init+0x318>
 8005460:	200001b8 	.word	0x200001b8
 8005464:	053e2d63 	.word	0x053e2d63
 8005468:	50000100 	.word	0x50000100
 800546c:	50000400 	.word	0x50000400
 8005470:	50000500 	.word	0x50000500
 8005474:	50000600 	.word	0x50000600
 8005478:	50000300 	.word	0x50000300
 800547c:	50000700 	.word	0x50000700
 8005480:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10c      	bne.n	80054b6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f023 010f 	bic.w	r1, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
 80054b4:	e007      	b.n	80054c6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 020f 	bic.w	r2, r2, #15
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80054d6:	e007      	b.n	80054e8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80054e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop

080054f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005508:	d004      	beq.n	8005514 <HAL_ADC_Start_DMA+0x20>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5a      	ldr	r2, [pc, #360]	; (8005678 <HAL_ADC_Start_DMA+0x184>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_ADC_Start_DMA+0x24>
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <HAL_ADC_Start_DMA+0x188>)
 8005516:	e000      	b.n	800551a <HAL_ADC_Start_DMA+0x26>
 8005518:	4b59      	ldr	r3, [pc, #356]	; (8005680 <HAL_ADC_Start_DMA+0x18c>)
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fd70 	bl	8005000 <LL_ADC_GetMultimode>
 8005520:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fe01 	bl	800512e <LL_ADC_REG_IsConversionOngoing>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 809b 	bne.w	800566a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_ADC_Start_DMA+0x4e>
 800553e:	2302      	movs	r3, #2
 8005540:	e096      	b.n	8005670 <HAL_ADC_Start_DMA+0x17c>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4d      	ldr	r2, [pc, #308]	; (8005684 <HAL_ADC_Start_DMA+0x190>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d008      	beq.n	8005566 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b05      	cmp	r3, #5
 800555e:	d002      	beq.n	8005566 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b09      	cmp	r3, #9
 8005564:	d17a      	bne.n	800565c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fcf6 	bl	8005f58 <ADC_Enable>
 800556c:	4603      	mov	r3, r0
 800556e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d16d      	bne.n	8005652 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a3a      	ldr	r2, [pc, #232]	; (8005678 <HAL_ADC_Start_DMA+0x184>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_ADC_Start_DMA+0xb4>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <HAL_ADC_Start_DMA+0x194>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d002      	beq.n	80055a4 <HAL_ADC_Start_DMA+0xb0>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	e003      	b.n	80055ac <HAL_ADC_Start_DMA+0xb8>
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <HAL_ADC_Start_DMA+0x198>)
 80055a6:	e001      	b.n	80055ac <HAL_ADC_Start_DMA+0xb8>
 80055a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d002      	beq.n	80055ba <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d6:	f023 0206 	bic.w	r2, r3, #6
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
 80055de:	e002      	b.n	80055e6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	4a29      	ldr	r2, [pc, #164]	; (8005690 <HAL_ADC_Start_DMA+0x19c>)
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	4a28      	ldr	r2, [pc, #160]	; (8005694 <HAL_ADC_Start_DMA+0x1a0>)
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	4a27      	ldr	r2, [pc, #156]	; (8005698 <HAL_ADC_Start_DMA+0x1a4>)
 80055fc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	221c      	movs	r2, #28
 8005604:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0210 	orr.w	r2, r2, #16
 800561c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3340      	adds	r3, #64	; 0x40
 8005638:	4619      	mov	r1, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f001 fb79 	bl	8006d34 <HAL_DMA_Start_IT>
 8005642:	4603      	mov	r3, r0
 8005644:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fd5b 	bl	8005106 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005650:	e00d      	b.n	800566e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800565a:	e008      	b.n	800566e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005668:	e001      	b.n	800566e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800566a:	2302      	movs	r3, #2
 800566c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	50000100 	.word	0x50000100
 800567c:	50000300 	.word	0x50000300
 8005680:	50000700 	.word	0x50000700
 8005684:	50000600 	.word	0x50000600
 8005688:	50000500 	.word	0x50000500
 800568c:	50000400 	.word	0x50000400
 8005690:	08006085 	.word	0x08006085
 8005694:	0800615d 	.word	0x0800615d
 8005698:	08006179 	.word	0x08006179

0800569c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b0b6      	sub	sp, #216	; 0xd8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x24>
 80056f6:	2302      	movs	r3, #2
 80056f8:	f000 bc13 	b.w	8005f22 <HAL_ADC_ConfigChannel+0x84a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fd10 	bl	800512e <LL_ADC_REG_IsConversionOngoing>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 83f3 	bne.w	8005efc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	f7ff fbf1 	bl	8004f0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fcfe 	bl	800512e <LL_ADC_REG_IsConversionOngoing>
 8005732:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fd0a 	bl	8005154 <LL_ADC_INJ_IsConversionOngoing>
 8005740:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005744:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 81d9 	bne.w	8005b00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800574e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 81d4 	bne.w	8005b00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005760:	d10f      	bne.n	8005782 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	4619      	mov	r1, r3
 800576e:	f7ff fbf8 	bl	8004f62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fb9f 	bl	8004ebe <LL_ADC_SetSamplingTimeCommonConfig>
 8005780:	e00e      	b.n	80057a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	461a      	mov	r2, r3
 8005790:	f7ff fbe7 	bl	8004f62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fb8f 	bl	8004ebe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d022      	beq.n	8005808 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6919      	ldr	r1, [r3, #16]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d2:	f7ff fae9 	bl	8004da8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6919      	ldr	r1, [r3, #16]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7ff fb35 	bl	8004e52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x126>
 80057f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057fc:	e000      	b.n	8005800 <HAL_ADC_ConfigChannel+0x128>
 80057fe:	2300      	movs	r3, #0
 8005800:	461a      	mov	r2, r3
 8005802:	f7ff fb41 	bl	8004e88 <LL_ADC_SetOffsetSaturation>
 8005806:	e17b      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff faee 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x15c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fae3 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 800582a:	4603      	mov	r3, r0
 800582c:	0e9b      	lsrs	r3, r3, #26
 800582e:	f003 021f 	and.w	r2, r3, #31
 8005832:	e01e      	b.n	8005872 <HAL_ADC_ConfigChannel+0x19a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fad8 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005840:	4603      	mov	r3, r0
 8005842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800584a:	fa93 f3a3 	rbit	r3, r3
 800584e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800585a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005862:	2320      	movs	r3, #32
 8005864:	e004      	b.n	8005870 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <HAL_ADC_ConfigChannel+0x1b2>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	0e9b      	lsrs	r3, r3, #26
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	e018      	b.n	80058bc <HAL_ADC_ConfigChannel+0x1e4>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800589e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80058a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80058ae:	2320      	movs	r3, #32
 80058b0:	e004      	b.n	80058bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80058b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058bc:	429a      	cmp	r2, r3
 80058be:	d106      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff faa7 	bl	8004e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fa8b 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 80058da:	4603      	mov	r3, r0
 80058dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x222>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fa80 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	0e9b      	lsrs	r3, r3, #26
 80058f4:	f003 021f 	and.w	r2, r3, #31
 80058f8:	e01e      	b.n	8005938 <HAL_ADC_ConfigChannel+0x260>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fa75 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005906:	4603      	mov	r3, r0
 8005908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800591c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005928:	2320      	movs	r3, #32
 800592a:	e004      	b.n	8005936 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800592c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	b2db      	uxtb	r3, r3
 8005936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x278>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	0e9b      	lsrs	r3, r3, #26
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	e018      	b.n	8005982 <HAL_ADC_ConfigChannel+0x2aa>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800596c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005974:	2320      	movs	r3, #32
 8005976:	e004      	b.n	8005982 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005982:	429a      	cmp	r2, r3
 8005984:	d106      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	2101      	movs	r1, #1
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fa44 	bl	8004e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fa28 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x2e8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fa1d 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 80059b6:	4603      	mov	r3, r0
 80059b8:	0e9b      	lsrs	r3, r3, #26
 80059ba:	f003 021f 	and.w	r2, r3, #31
 80059be:	e01e      	b.n	80059fe <HAL_ADC_ConfigChannel+0x326>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fa12 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059d6:	fa93 f3a3 	rbit	r3, r3
 80059da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80059de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80059e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80059ee:	2320      	movs	r3, #32
 80059f0:	e004      	b.n	80059fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80059f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <HAL_ADC_ConfigChannel+0x33e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	0e9b      	lsrs	r3, r3, #26
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	e016      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x36c>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005a36:	2320      	movs	r3, #32
 8005a38:	e004      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3e:	fab3 f383 	clz	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d106      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff f9e3 	bl	8004e1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2103      	movs	r1, #3
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff f9c7 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x3aa>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2103      	movs	r1, #3
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f9bc 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	0e9b      	lsrs	r3, r3, #26
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	e017      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0x3da>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2103      	movs	r1, #3
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff f9b1 	bl	8004df0 <LL_ADC_GetOffsetChannel>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a94:	fa93 f3a3 	rbit	r3, r3
 8005a98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	e003      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x3f2>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	0e9b      	lsrs	r3, r3, #26
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	e011      	b.n	8005aee <HAL_ADC_ConfigChannel+0x416>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad2:	fa93 f3a3 	rbit	r3, r3
 8005ad6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	e003      	b.n	8005aee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d106      	bne.n	8005b00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2103      	movs	r1, #3
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f98e 	bl	8004e1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff faeb 	bl	80050e0 <LL_ADC_IsEnabled>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f040 813d 	bne.w	8005d8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7ff fa4a 	bl	8004fb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4aa2      	ldr	r2, [pc, #648]	; (8005db4 <HAL_ADC_ConfigChannel+0x6dc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f040 812e 	bne.w	8005d8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x480>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0e9b      	lsrs	r3, r3, #26
 8005b46:	3301      	adds	r3, #1
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2b09      	cmp	r3, #9
 8005b4e:	bf94      	ite	ls
 8005b50:	2301      	movls	r3, #1
 8005b52:	2300      	movhi	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e019      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x4b4>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b60:	fa93 f3a3 	rbit	r3, r3
 8005b64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005b70:	2320      	movs	r3, #32
 8005b72:	e003      	b.n	8005b7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b76:	fab3 f383 	clz	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2b09      	cmp	r3, #9
 8005b84:	bf94      	ite	ls
 8005b86:	2301      	movls	r3, #1
 8005b88:	2300      	movhi	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d079      	beq.n	8005c84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x4d4>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0e9b      	lsrs	r3, r3, #26
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	069b      	lsls	r3, r3, #26
 8005ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005baa:	e015      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x500>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	e003      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bca:	fab3 f383 	clz	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	069b      	lsls	r3, r3, #26
 8005bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x520>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0e9b      	lsrs	r3, r3, #26
 8005bea:	3301      	adds	r3, #1
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	e017      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x550>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c00:	fa93 f3a3 	rbit	r3, r3
 8005c04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005c10:	2320      	movs	r3, #32
 8005c12:	e003      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	fab3 f383 	clz	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	ea42 0103 	orr.w	r1, r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_ADC_ConfigChannel+0x576>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0e9b      	lsrs	r3, r3, #26
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	051b      	lsls	r3, r3, #20
 8005c4c:	e018      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x5a8>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005c66:	2320      	movs	r3, #32
 8005c68:	e003      	b.n	8005c72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6c:	fab3 f383 	clz	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	f003 021f 	and.w	r2, r3, #31
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c80:	430b      	orrs	r3, r1
 8005c82:	e07e      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x5c8>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0e9b      	lsrs	r3, r3, #26
 8005c96:	3301      	adds	r3, #1
 8005c98:	069b      	lsls	r3, r3, #26
 8005c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c9e:	e015      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x5f4>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	fa93 f3a3 	rbit	r3, r3
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005cb8:	2320      	movs	r3, #32
 8005cba:	e003      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	069b      	lsls	r3, r3, #26
 8005cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x614>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	0e9b      	lsrs	r3, r3, #26
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	e017      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x644>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	e003      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	3301      	adds	r3, #1
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	ea42 0103 	orr.w	r1, r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x670>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	3301      	adds	r3, #1
 8005d34:	f003 021f 	and.w	r2, r3, #31
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3b1e      	subs	r3, #30
 8005d40:	051b      	lsls	r3, r3, #20
 8005d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d46:	e01b      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x6a8>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	fa93 f3a3 	rbit	r3, r3
 8005d54:	613b      	str	r3, [r7, #16]
  return result;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005d60:	2320      	movs	r3, #32
 8005d62:	e003      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	fab3 f383 	clz	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f003 021f 	and.w	r2, r3, #31
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	3b1e      	subs	r3, #30
 8005d7a:	051b      	lsls	r3, r3, #20
 8005d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d80:	430b      	orrs	r3, r1
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6892      	ldr	r2, [r2, #8]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7ff f8eb 	bl	8004f62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_ADC_ConfigChannel+0x6e0>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80be 	beq.w	8005f16 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da2:	d004      	beq.n	8005dae <HAL_ADC_ConfigChannel+0x6d6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <HAL_ADC_ConfigChannel+0x6e4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10a      	bne.n	8005dc4 <HAL_ADC_ConfigChannel+0x6ec>
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <HAL_ADC_ConfigChannel+0x6e8>)
 8005db0:	e009      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x6ee>
 8005db2:	bf00      	nop
 8005db4:	407f0000 	.word	0x407f0000
 8005db8:	80080000 	.word	0x80080000
 8005dbc:	50000100 	.word	0x50000100
 8005dc0:	50000300 	.word	0x50000300
 8005dc4:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <HAL_ADC_ConfigChannel+0x854>)
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe ffe0 	bl	8004d8c <LL_ADC_GetCommonPathInternalCh>
 8005dcc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a56      	ldr	r2, [pc, #344]	; (8005f30 <HAL_ADC_ConfigChannel+0x858>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_ADC_ConfigChannel+0x70c>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a55      	ldr	r2, [pc, #340]	; (8005f34 <HAL_ADC_ConfigChannel+0x85c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d13a      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d134      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df8:	d005      	beq.n	8005e06 <HAL_ADC_ConfigChannel+0x72e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a4e      	ldr	r2, [pc, #312]	; (8005f38 <HAL_ADC_ConfigChannel+0x860>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	f040 8085 	bne.w	8005f10 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0e:	d004      	beq.n	8005e1a <HAL_ADC_ConfigChannel+0x742>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a49      	ldr	r2, [pc, #292]	; (8005f3c <HAL_ADC_ConfigChannel+0x864>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x746>
 8005e1a:	4a49      	ldr	r2, [pc, #292]	; (8005f40 <HAL_ADC_ConfigChannel+0x868>)
 8005e1c:	e000      	b.n	8005e20 <HAL_ADC_ConfigChannel+0x748>
 8005e1e:	4a43      	ldr	r2, [pc, #268]	; (8005f2c <HAL_ADC_ConfigChannel+0x854>)
 8005e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fe ff9b 	bl	8004d66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e30:	4b44      	ldr	r3, [pc, #272]	; (8005f44 <HAL_ADC_ConfigChannel+0x86c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	099b      	lsrs	r3, r3, #6
 8005e36:	4a44      	ldr	r2, [pc, #272]	; (8005f48 <HAL_ADC_ConfigChannel+0x870>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e4a:	e002      	b.n	8005e52 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f9      	bne.n	8005e4c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e58:	e05a      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3b      	ldr	r2, [pc, #236]	; (8005f4c <HAL_ADC_ConfigChannel+0x874>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d125      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11f      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <HAL_ADC_ConfigChannel+0x864>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d104      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x7ac>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <HAL_ADC_ConfigChannel+0x878>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d047      	beq.n	8005f14 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e8c:	d004      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x7c0>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <HAL_ADC_ConfigChannel+0x864>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x7c4>
 8005e98:	4a29      	ldr	r2, [pc, #164]	; (8005f40 <HAL_ADC_ConfigChannel+0x868>)
 8005e9a:	e000      	b.n	8005e9e <HAL_ADC_ConfigChannel+0x7c6>
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <HAL_ADC_ConfigChannel+0x854>)
 8005e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe ff5c 	bl	8004d66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eae:	e031      	b.n	8005f14 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <HAL_ADC_ConfigChannel+0x87c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d12d      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d127      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_ADC_ConfigChannel+0x864>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed8:	d004      	beq.n	8005ee4 <HAL_ADC_ConfigChannel+0x80c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <HAL_ADC_ConfigChannel+0x864>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d101      	bne.n	8005ee8 <HAL_ADC_ConfigChannel+0x810>
 8005ee4:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <HAL_ADC_ConfigChannel+0x868>)
 8005ee6:	e000      	b.n	8005eea <HAL_ADC_ConfigChannel+0x812>
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <HAL_ADC_ConfigChannel+0x854>)
 8005eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe ff36 	bl	8004d66 <LL_ADC_SetCommonPathInternalCh>
 8005efa:	e00c      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005f0e:	e002      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	37d8      	adds	r7, #216	; 0xd8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	50000700 	.word	0x50000700
 8005f30:	c3210000 	.word	0xc3210000
 8005f34:	90c00010 	.word	0x90c00010
 8005f38:	50000600 	.word	0x50000600
 8005f3c:	50000100 	.word	0x50000100
 8005f40:	50000300 	.word	0x50000300
 8005f44:	200001b8 	.word	0x200001b8
 8005f48:	053e2d63 	.word	0x053e2d63
 8005f4c:	c7520000 	.word	0xc7520000
 8005f50:	50000500 	.word	0x50000500
 8005f54:	cb840000 	.word	0xcb840000

08005f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff f8b9 	bl	80050e0 <LL_ADC_IsEnabled>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d176      	bne.n	8006062 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	4b3c      	ldr	r3, [pc, #240]	; (800606c <ADC_Enable+0x114>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	f043 0210 	orr.w	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e062      	b.n	8006064 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f888 	bl	80050b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fb0:	d004      	beq.n	8005fbc <ADC_Enable+0x64>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2e      	ldr	r2, [pc, #184]	; (8006070 <ADC_Enable+0x118>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <ADC_Enable+0x68>
 8005fbc:	4b2d      	ldr	r3, [pc, #180]	; (8006074 <ADC_Enable+0x11c>)
 8005fbe:	e000      	b.n	8005fc2 <ADC_Enable+0x6a>
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <ADC_Enable+0x120>)
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fee2 	bl	8004d8c <LL_ADC_GetCommonPathInternalCh>
 8005fc8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	; (800607c <ADC_Enable+0x124>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	099b      	lsrs	r3, r3, #6
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <ADC_Enable+0x128>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005fec:	e002      	b.n	8005ff4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f9      	bne.n	8005fee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ffa:	f7fe fe71 	bl	8004ce0 <HAL_GetTick>
 8005ffe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006000:	e028      	b.n	8006054 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff f86a 	bl	80050e0 <LL_ADC_IsEnabled>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff f84e 	bl	80050b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800601c:	f7fe fe60 	bl	8004ce0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d914      	bls.n	8006054 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d00d      	beq.n	8006054 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e007      	b.n	8006064 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d1cf      	bne.n	8006002 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	8000003f 	.word	0x8000003f
 8006070:	50000100 	.word	0x50000100
 8006074:	50000300 	.word	0x50000300
 8006078:	50000700 	.word	0x50000700
 800607c:	200001b8 	.word	0x200001b8
 8006080:	053e2d63 	.word	0x053e2d63

08006084 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006096:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800609a:	2b00      	cmp	r3, #0
 800609c:	d14b      	bne.n	8006136 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d021      	beq.n	80060fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe ff11 	bl	8004ee4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d032      	beq.n	800612e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d12b      	bne.n	800612e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11f      	bne.n	800612e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	f043 0201 	orr.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80060fa:	e018      	b.n	800612e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d111      	bne.n	800612e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	f043 0201 	orr.w	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fab4 	bl	800569c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006134:	e00e      	b.n	8006154 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff fabe 	bl	80056c4 <HAL_ADC_ErrorCallback>
}
 8006148:	e004      	b.n	8006154 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff faa0 	bl	80056b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	f043 0204 	orr.w	r2, r3, #4
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fa90 	bl	80056c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <LL_ADC_IsEnabled>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <LL_ADC_IsEnabled+0x18>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <LL_ADC_IsEnabled+0x1a>
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d101      	bne.n	80061ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b0a1      	sub	sp, #132	; 0x84
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e0e7      	b.n	80063e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800621e:	2300      	movs	r3, #0
 8006220:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006222:	2300      	movs	r3, #0
 8006224:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800622e:	d102      	bne.n	8006236 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006230:	4b6f      	ldr	r3, [pc, #444]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	e009      	b.n	800624a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a6e      	ldr	r2, [pc, #440]	; (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d102      	bne.n	8006246 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006240:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	e001      	b.n	800624a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0be      	b.n	80063e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff ffb1 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 8006270:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ffab 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 80a0 	bne.w	80063c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006286:	2b00      	cmp	r3, #0
 8006288:	f040 809c 	bne.w	80063c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006294:	d004      	beq.n	80062a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a55      	ldr	r2, [pc, #340]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80062a0:	4b56      	ldr	r3, [pc, #344]	; (80063fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80062a2:	e000      	b.n	80062a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80062a4:	4b56      	ldr	r3, [pc, #344]	; (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80062a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d04b      	beq.n	8006348 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80062b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062c2:	035b      	lsls	r3, r3, #13
 80062c4:	430b      	orrs	r3, r1
 80062c6:	431a      	orrs	r2, r3
 80062c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d4:	d004      	beq.n	80062e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a45      	ldr	r2, [pc, #276]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10f      	bne.n	8006300 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80062e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80062e4:	f7ff ff62 	bl	80061ac <LL_ADC_IsEnabled>
 80062e8:	4604      	mov	r4, r0
 80062ea:	4841      	ldr	r0, [pc, #260]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062ec:	f7ff ff5e 	bl	80061ac <LL_ADC_IsEnabled>
 80062f0:	4603      	mov	r3, r0
 80062f2:	4323      	orrs	r3, r4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e012      	b.n	8006326 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006300:	483c      	ldr	r0, [pc, #240]	; (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006302:	f7ff ff53 	bl	80061ac <LL_ADC_IsEnabled>
 8006306:	4604      	mov	r4, r0
 8006308:	483b      	ldr	r0, [pc, #236]	; (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800630a:	f7ff ff4f 	bl	80061ac <LL_ADC_IsEnabled>
 800630e:	4603      	mov	r3, r0
 8006310:	431c      	orrs	r4, r3
 8006312:	483c      	ldr	r0, [pc, #240]	; (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006314:	f7ff ff4a 	bl	80061ac <LL_ADC_IsEnabled>
 8006318:	4603      	mov	r3, r0
 800631a:	4323      	orrs	r3, r4
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d056      	beq.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006332:	f023 030f 	bic.w	r3, r3, #15
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	6811      	ldr	r1, [r2, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	6892      	ldr	r2, [r2, #8]
 800633e:	430a      	orrs	r2, r1
 8006340:	431a      	orrs	r2, r3
 8006342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006344:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006346:	e047      	b.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006352:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635c:	d004      	beq.n	8006368 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10f      	bne.n	8006388 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006368:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800636c:	f7ff ff1e 	bl	80061ac <LL_ADC_IsEnabled>
 8006370:	4604      	mov	r4, r0
 8006372:	481f      	ldr	r0, [pc, #124]	; (80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006374:	f7ff ff1a 	bl	80061ac <LL_ADC_IsEnabled>
 8006378:	4603      	mov	r3, r0
 800637a:	4323      	orrs	r3, r4
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf0c      	ite	eq
 8006380:	2301      	moveq	r3, #1
 8006382:	2300      	movne	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e012      	b.n	80063ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006388:	481a      	ldr	r0, [pc, #104]	; (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800638a:	f7ff ff0f 	bl	80061ac <LL_ADC_IsEnabled>
 800638e:	4604      	mov	r4, r0
 8006390:	4819      	ldr	r0, [pc, #100]	; (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006392:	f7ff ff0b 	bl	80061ac <LL_ADC_IsEnabled>
 8006396:	4603      	mov	r3, r0
 8006398:	431c      	orrs	r4, r3
 800639a:	481a      	ldr	r0, [pc, #104]	; (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800639c:	f7ff ff06 	bl	80061ac <LL_ADC_IsEnabled>
 80063a0:	4603      	mov	r3, r0
 80063a2:	4323      	orrs	r3, r4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d012      	beq.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80063ba:	f023 030f 	bic.w	r3, r3, #15
 80063be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80063c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063c2:	e009      	b.n	80063d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80063d6:	e000      	b.n	80063da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80063e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3784      	adds	r7, #132	; 0x84
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd90      	pop	{r4, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	50000100 	.word	0x50000100
 80063f4:	50000400 	.word	0x50000400
 80063f8:	50000500 	.word	0x50000500
 80063fc:	50000300 	.word	0x50000300
 8006400:	50000700 	.word	0x50000700
 8006404:	50000600 	.word	0x50000600

08006408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <__NVIC_SetPriorityGrouping+0x44>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006424:	4013      	ands	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800643a:	4a04      	ldr	r2, [pc, #16]	; (800644c <__NVIC_SetPriorityGrouping+0x44>)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	60d3      	str	r3, [r2, #12]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	e000ed00 	.word	0xe000ed00

08006450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <__NVIC_GetPriorityGrouping+0x18>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	f003 0307 	and.w	r3, r3, #7
}
 800645e:	4618      	mov	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647a:	2b00      	cmp	r3, #0
 800647c:	db0b      	blt.n	8006496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	f003 021f 	and.w	r2, r3, #31
 8006484:	4907      	ldr	r1, [pc, #28]	; (80064a4 <__NVIC_EnableIRQ+0x38>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2001      	movs	r0, #1
 800648e:	fa00 f202 	lsl.w	r2, r0, r2
 8006492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	e000e100 	.word	0xe000e100

080064a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	6039      	str	r1, [r7, #0]
 80064b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	db0a      	blt.n	80064d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	490c      	ldr	r1, [pc, #48]	; (80064f4 <__NVIC_SetPriority+0x4c>)
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	440b      	add	r3, r1
 80064cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064d0:	e00a      	b.n	80064e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4908      	ldr	r1, [pc, #32]	; (80064f8 <__NVIC_SetPriority+0x50>)
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	3b04      	subs	r3, #4
 80064e0:	0112      	lsls	r2, r2, #4
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	440b      	add	r3, r1
 80064e6:	761a      	strb	r2, [r3, #24]
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	e000e100 	.word	0xe000e100
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b089      	sub	sp, #36	; 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f1c3 0307 	rsb	r3, r3, #7
 8006516:	2b04      	cmp	r3, #4
 8006518:	bf28      	it	cs
 800651a:	2304      	movcs	r3, #4
 800651c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	3304      	adds	r3, #4
 8006522:	2b06      	cmp	r3, #6
 8006524:	d902      	bls.n	800652c <NVIC_EncodePriority+0x30>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3b03      	subs	r3, #3
 800652a:	e000      	b.n	800652e <NVIC_EncodePriority+0x32>
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006530:	f04f 32ff 	mov.w	r2, #4294967295
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	401a      	ands	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006544:	f04f 31ff 	mov.w	r1, #4294967295
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	43d9      	mvns	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006554:	4313      	orrs	r3, r2
         );
}
 8006556:	4618      	mov	r0, r3
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3b01      	subs	r3, #1
 8006570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006574:	d301      	bcc.n	800657a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006576:	2301      	movs	r3, #1
 8006578:	e00f      	b.n	800659a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <SysTick_Config+0x40>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3b01      	subs	r3, #1
 8006580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006582:	210f      	movs	r1, #15
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	f7ff ff8e 	bl	80064a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <SysTick_Config+0x40>)
 800658e:	2200      	movs	r2, #0
 8006590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006592:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <SysTick_Config+0x40>)
 8006594:	2207      	movs	r2, #7
 8006596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	e000e010 	.word	0xe000e010

080065a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ff29 	bl	8006408 <__NVIC_SetPriorityGrouping>
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	4603      	mov	r3, r0
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065cc:	f7ff ff40 	bl	8006450 <__NVIC_GetPriorityGrouping>
 80065d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	6978      	ldr	r0, [r7, #20]
 80065d8:	f7ff ff90 	bl	80064fc <NVIC_EncodePriority>
 80065dc:	4602      	mov	r2, r0
 80065de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff ff5f 	bl	80064a8 <__NVIC_SetPriority>
}
 80065ea:	bf00      	nop
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	4603      	mov	r3, r0
 80065fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff ff33 	bl	800646c <__NVIC_EnableIRQ>
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff ffa4 	bl	8006564 <SysTick_Config>
 800661c:	4603      	mov	r3, r0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e014      	b.n	8006662 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fc fe0d 	bl	8003268 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e056      	b.n	800672e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	795b      	ldrb	r3, [r3, #5]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_DAC_Start+0x20>
 8006688:	2302      	movs	r3, #2
 800668a:	e050      	b.n	800672e <HAL_DAC_Start+0xc2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6819      	ldr	r1, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2201      	movs	r2, #1
 80066a6:	409a      	lsls	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066b0:	4b22      	ldr	r3, [pc, #136]	; (800673c <HAL_DAC_Start+0xd0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	099b      	lsrs	r3, r3, #6
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <HAL_DAC_Start+0xd4>)
 80066b8:	fba2 2303 	umull	r2, r3, r2, r3
 80066bc:	099b      	lsrs	r3, r3, #6
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80066c2:	e002      	b.n	80066ca <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1f9      	bne.n	80066c4 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10f      	bne.n	80066f6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d11d      	bne.n	8006720 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	e014      	b.n	8006720 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2102      	movs	r1, #2
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	429a      	cmp	r2, r3
 800670e:	d107      	bne.n	8006720 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0202 	orr.w	r2, r2, #2
 800671e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	200001b8 	.word	0x200001b8
 8006740:	053e2d63 	.word	0x053e2d63

08006744 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01d      	beq.n	80067a2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d018      	beq.n	80067a2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2204      	movs	r2, #4
 8006774:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800678a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800679a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f854 	bl	800684a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01d      	beq.n	80067e8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f043 0202 	orr.w	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80067e0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9f4 	bl	8006bd0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e018      	b.n	800683e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4413      	add	r3, r2
 8006824:	3308      	adds	r3, #8
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e004      	b.n	8006834 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	3314      	adds	r3, #20
 8006832:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	461a      	mov	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_DAC_ConfigChannel+0x1c>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e19e      	b.n	8006bbe <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	795b      	ldrb	r3, [r3, #5]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_DAC_ConfigChannel+0x2c>
 8006888:	2302      	movs	r3, #2
 800688a:	e198      	b.n	8006bbe <HAL_DAC_ConfigChannel+0x35e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2202      	movs	r2, #2
 8006896:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d17a      	bne.n	8006996 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80068a0:	f7fe fa1e 	bl	8004ce0 <HAL_GetTick>
 80068a4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d13d      	bne.n	8006928 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80068ac:	e018      	b.n	80068e0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80068ae:	f7fe fa17 	bl	8004ce0 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d911      	bls.n	80068e0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f043 0208 	orr.w	r2, r3, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2203      	movs	r2, #3
 80068da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e16e      	b.n	8006bbe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1df      	bne.n	80068ae <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
 80068f8:	e020      	b.n	800693c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80068fa:	f7fe f9f1 	bl	8004ce0 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d90f      	bls.n	8006928 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	2b00      	cmp	r3, #0
 8006910:	da0a      	bge.n	8006928 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f043 0208 	orr.w	r2, r3, #8
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2203      	movs	r2, #3
 8006922:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e14a      	b.n	8006bbe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	2b00      	cmp	r3, #0
 8006930:	dbe3      	blt.n	80068fa <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800693a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	43db      	mvns	r3, r3
 8006952:	ea02 0103 	and.w	r1, r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	409a      	lsls	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	21ff      	movs	r1, #255	; 0xff
 8006978:	fa01 f303 	lsl.w	r3, r1, r3
 800697c:	43db      	mvns	r3, r3
 800697e:	ea02 0103 	and.w	r1, r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	409a      	lsls	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d11d      	bne.n	80069da <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	221f      	movs	r2, #31
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	4013      	ands	r3, r2
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	4313      	orrs	r3, r2
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2207      	movs	r2, #7
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43db      	mvns	r3, r3
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	4013      	ands	r3, r2
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d102      	bne.n	8006a04 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	e00f      	b.n	8006a24 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d102      	bne.n	8006a12 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	623b      	str	r3, [r7, #32]
 8006a10:	e008      	b.n	8006a24 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	e001      	b.n	8006a24 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	43db      	mvns	r3, r3
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	4013      	ands	r3, r2
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	791b      	ldrb	r3, [r3, #4]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d102      	bne.n	8006a58 <HAL_DAC_ConfigChannel+0x1f8>
 8006a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a56:	e000      	b.n	8006a5a <HAL_DAC_ConfigChannel+0x1fa>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	4013      	ands	r3, r2
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	795b      	ldrb	r3, [r3, #5]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d102      	bne.n	8006a84 <HAL_DAC_ConfigChannel+0x224>
 8006a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a82:	e000      	b.n	8006a86 <HAL_DAC_ConfigChannel+0x226>
 8006a84:	2300      	movs	r3, #0
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d114      	bne.n	8006ac6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006a9c:	f003 fab6 	bl	800a00c <HAL_RCC_GetHCLKFreq>
 8006aa0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4a48      	ldr	r2, [pc, #288]	; (8006bc8 <HAL_DAC_ConfigChannel+0x368>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d904      	bls.n	8006ab4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab2:	e00f      	b.n	8006ad4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4a45      	ldr	r2, [pc, #276]	; (8006bcc <HAL_DAC_ConfigChannel+0x36c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d90a      	bls.n	8006ad2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac4:	e006      	b.n	8006ad4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	4313      	orrs	r3, r2
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	e000      	b.n	8006ad4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006ad2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	400a      	ands	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b26:	4013      	ands	r3, r2
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6819      	ldr	r1, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	22c0      	movs	r2, #192	; 0xc0
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	400a      	ands	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	089b      	lsrs	r3, r3, #2
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	ea02 0103 	and.w	r1, r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	09896800 	.word	0x09896800
 8006bcc:	04c4b400 	.word	0x04c4b400

08006bd0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e08d      	b.n	8006d12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_DMA_Init+0x138>)
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d80f      	bhi.n	8006c22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <HAL_DMA_Init+0x13c>)
 8006c0a:	4413      	add	r3, r2
 8006c0c:	4a45      	ldr	r2, [pc, #276]	; (8006d24 <HAL_DMA_Init+0x140>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	091b      	lsrs	r3, r3, #4
 8006c14:	009a      	lsls	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a42      	ldr	r2, [pc, #264]	; (8006d28 <HAL_DMA_Init+0x144>)
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40
 8006c20:	e00e      	b.n	8006c40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	4b40      	ldr	r3, [pc, #256]	; (8006d2c <HAL_DMA_Init+0x148>)
 8006c2a:	4413      	add	r3, r2
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <HAL_DMA_Init+0x140>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	091b      	lsrs	r3, r3, #4
 8006c34:	009a      	lsls	r2, r3, #2
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a3c      	ldr	r2, [pc, #240]	; (8006d30 <HAL_DMA_Init+0x14c>)
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9b6 	bl	8007004 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca0:	d102      	bne.n	8006ca8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cbc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d010      	beq.n	8006ce8 <HAL_DMA_Init+0x104>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d80c      	bhi.n	8006ce8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f9d6 	bl	8007080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	e008      	b.n	8006cfa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40020407 	.word	0x40020407
 8006d20:	bffdfff8 	.word	0xbffdfff8
 8006d24:	cccccccd 	.word	0xcccccccd
 8006d28:	40020000 	.word	0x40020000
 8006d2c:	bffdfbf8 	.word	0xbffdfbf8
 8006d30:	40020400 	.word	0x40020400

08006d34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_DMA_Start_IT+0x20>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e066      	b.n	8006e22 <HAL_DMA_Start_IT+0xee>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d155      	bne.n	8006e14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f8fb 	bl	8006f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 020e 	orr.w	r2, r2, #14
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e00f      	b.n	8006dcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 020a 	orr.w	r2, r2, #10
 8006dca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e005      	b.n	8006e20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d026      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x7a>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d021      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0204 	bic.w	r2, r2, #4
 8006e7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	f003 021f 	and.w	r2, r3, #31
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d071      	beq.n	8006f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006ea2:	e06c      	b.n	8006f7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2202      	movs	r2, #2
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02e      	beq.n	8006f16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d029      	beq.n	8006f16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 020a 	bic.w	r2, r2, #10
 8006ede:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	f003 021f 	and.w	r2, r3, #31
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8006efa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d038      	beq.n	8006f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f14:	e033      	b.n	8006f7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2208      	movs	r2, #8
 8006f20:	409a      	lsls	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d02a      	beq.n	8006f80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d025      	beq.n	8006f80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 020e 	bic.w	r2, r2, #14
 8006f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	f003 021f 	and.w	r2, r3, #31
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f202 	lsl.w	r2, r1, r2
 8006f56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006f7e:	bf00      	nop
 8006f80:	bf00      	nop
}
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f003 021f 	and.w	r2, r3, #31
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b10      	cmp	r3, #16
 8006fd4:	d108      	bne.n	8006fe8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006fe6:	e007      	b.n	8006ff8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	60da      	str	r2, [r3, #12]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b16      	ldr	r3, [pc, #88]	; (800706c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007014:	429a      	cmp	r2, r3
 8007016:	d802      	bhi.n	800701e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e001      	b.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800701e:	4b15      	ldr	r3, [pc, #84]	; (8007074 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007020:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	3b08      	subs	r3, #8
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	009a      	lsls	r2, r3, #2
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800704e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2201      	movs	r2, #1
 8007058:	409a      	lsls	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40020407 	.word	0x40020407
 8007070:	40020800 	.word	0x40020800
 8007074:	40020820 	.word	0x40020820
 8007078:	cccccccd 	.word	0xcccccccd
 800707c:	40020880 	.word	0x40020880

08007080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80070a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2201      	movs	r2, #1
 80070ae:	409a      	lsls	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80070b4:	bf00      	nop
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	1000823f 	.word	0x1000823f
 80070c4:	40020940 	.word	0x40020940

080070c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80070d6:	e15a      	b.n	800738e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2101      	movs	r1, #1
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 814c 	beq.w	8007388 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d005      	beq.n	8007108 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007104:	2b02      	cmp	r3, #2
 8007106:	d130      	bne.n	800716a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	2203      	movs	r2, #3
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4013      	ands	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800713e:	2201      	movs	r2, #1
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	43db      	mvns	r3, r3
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4013      	ands	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	091b      	lsrs	r3, r3, #4
 8007154:	f003 0201 	and.w	r2, r3, #1
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d017      	beq.n	80071a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	2203      	movs	r2, #3
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	43db      	mvns	r3, r3
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4013      	ands	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d123      	bne.n	80071fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	08da      	lsrs	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3208      	adds	r2, #8
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	220f      	movs	r2, #15
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43db      	mvns	r3, r3
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4013      	ands	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	08da      	lsrs	r2, r3, #3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3208      	adds	r2, #8
 80071f4:	6939      	ldr	r1, [r7, #16]
 80071f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	2203      	movs	r2, #3
 8007206:	fa02 f303 	lsl.w	r3, r2, r3
 800720a:	43db      	mvns	r3, r3
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4013      	ands	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f003 0203 	and.w	r2, r3, #3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80a6 	beq.w	8007388 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800723c:	4b5b      	ldr	r3, [pc, #364]	; (80073ac <HAL_GPIO_Init+0x2e4>)
 800723e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007240:	4a5a      	ldr	r2, [pc, #360]	; (80073ac <HAL_GPIO_Init+0x2e4>)
 8007242:	f043 0301 	orr.w	r3, r3, #1
 8007246:	6613      	str	r3, [r2, #96]	; 0x60
 8007248:	4b58      	ldr	r3, [pc, #352]	; (80073ac <HAL_GPIO_Init+0x2e4>)
 800724a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007254:	4a56      	ldr	r2, [pc, #344]	; (80073b0 <HAL_GPIO_Init+0x2e8>)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	3302      	adds	r3, #2
 800725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	220f      	movs	r2, #15
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4013      	ands	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800727e:	d01f      	beq.n	80072c0 <HAL_GPIO_Init+0x1f8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a4c      	ldr	r2, [pc, #304]	; (80073b4 <HAL_GPIO_Init+0x2ec>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d019      	beq.n	80072bc <HAL_GPIO_Init+0x1f4>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a4b      	ldr	r2, [pc, #300]	; (80073b8 <HAL_GPIO_Init+0x2f0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_GPIO_Init+0x1f0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a4a      	ldr	r2, [pc, #296]	; (80073bc <HAL_GPIO_Init+0x2f4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00d      	beq.n	80072b4 <HAL_GPIO_Init+0x1ec>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a49      	ldr	r2, [pc, #292]	; (80073c0 <HAL_GPIO_Init+0x2f8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <HAL_GPIO_Init+0x1e8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a48      	ldr	r2, [pc, #288]	; (80073c4 <HAL_GPIO_Init+0x2fc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d101      	bne.n	80072ac <HAL_GPIO_Init+0x1e4>
 80072a8:	2305      	movs	r3, #5
 80072aa:	e00a      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072ac:	2306      	movs	r3, #6
 80072ae:	e008      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072b0:	2304      	movs	r3, #4
 80072b2:	e006      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072b4:	2303      	movs	r3, #3
 80072b6:	e004      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e002      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <HAL_GPIO_Init+0x1fa>
 80072c0:	2300      	movs	r3, #0
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	f002 0203 	and.w	r2, r2, #3
 80072c8:	0092      	lsls	r2, r2, #2
 80072ca:	4093      	lsls	r3, r2
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072d2:	4937      	ldr	r1, [pc, #220]	; (80073b0 <HAL_GPIO_Init+0x2e8>)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	089b      	lsrs	r3, r3, #2
 80072d8:	3302      	adds	r3, #2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <HAL_GPIO_Init+0x300>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4013      	ands	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007304:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <HAL_GPIO_Init+0x300>)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800730a:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <HAL_GPIO_Init+0x300>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	43db      	mvns	r3, r3
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4013      	ands	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800732e:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <HAL_GPIO_Init+0x300>)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <HAL_GPIO_Init+0x300>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	43db      	mvns	r3, r3
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4013      	ands	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007358:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_GPIO_Init+0x300>)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800735e:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <HAL_GPIO_Init+0x300>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	43db      	mvns	r3, r3
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4013      	ands	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007382:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <HAL_GPIO_Init+0x300>)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3301      	adds	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	f47f ae9d 	bne.w	80070d8 <HAL_GPIO_Init+0x10>
  }
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40021000 	.word	0x40021000
 80073b0:	40010000 	.word	0x40010000
 80073b4:	48000400 	.word	0x48000400
 80073b8:	48000800 	.word	0x48000800
 80073bc:	48000c00 	.word	0x48000c00
 80073c0:	48001000 	.word	0x48001000
 80073c4:	48001400 	.word	0x48001400
 80073c8:	40010400 	.word	0x40010400

080073cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
 80073e8:	e001      	b.n	80073ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800740c:	787b      	ldrb	r3, [r7, #1]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007418:	e002      	b.n	8007420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007438:	695a      	ldr	r2, [r3, #20]
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	4013      	ands	r3, r2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d006      	beq.n	8007450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f806 	bl	800745c <HAL_GPIO_EXTI_Callback>
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40010400 	.word	0x40010400

0800745c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e0be      	b.n	8007604 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02e      	beq.n	8007530 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4d      	ldr	r2, [pc, #308]	; (800760c <HAL_HRTIM_Init+0x198>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d10b      	bne.n	80074f4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80074dc:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <HAL_HRTIM_Init+0x19c>)
 80074de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e0:	4a4b      	ldr	r2, [pc, #300]	; (8007610 <HAL_HRTIM_Init+0x19c>)
 80074e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074e6:	6613      	str	r3, [r2, #96]	; 0x60
 80074e8:	4b49      	ldr	r3, [pc, #292]	; (8007610 <HAL_HRTIM_Init+0x19c>)
 80074ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007502:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007518:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fc fd07 	bl	8003f44 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d012      	beq.n	8007568 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007550:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
 800757c:	e03e      	b.n	80075fc <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800757e:	7dfa      	ldrb	r2, [r7, #23]
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3318      	adds	r3, #24
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007592:	7dfa      	ldrb	r2, [r7, #23]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	1a9b      	subs	r3, r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	331c      	adds	r3, #28
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80075a6:	7dfa      	ldrb	r2, [r7, #23]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	3320      	adds	r3, #32
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80075ba:	7dfa      	ldrb	r2, [r7, #23]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	3324      	adds	r3, #36	; 0x24
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80075ce:	7dfa      	ldrb	r2, [r7, #23]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	3328      	adds	r3, #40	; 0x28
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80075e2:	7dfa      	ldrb	r2, [r7, #23]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3330      	adds	r3, #48	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	3301      	adds	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b06      	cmp	r3, #6
 8007600:	d9bd      	bls.n	800757e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40016800 	.word	0x40016800
 8007610:	40021000 	.word	0x40021000

08007614 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8007628:	2302      	movs	r3, #2
 800762a:	e045      	b.n	80076b8 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d114      	bne.n	800766e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0202 	bic.w	r2, r2, #2
 8007654:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0201 	orr.w	r2, r2, #1
 8007668:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800766c:	e01f      	b.n	80076ae <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0202 	orr.w	r2, r2, #2
 800767e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800768a:	f023 010c 	bic.w	r1, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80076ce:	f7fd fb07 	bl	8004ce0 <HAL_GetTick>
 80076d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80076d4:	e014      	b.n	8007700 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d010      	beq.n	8007700 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7fd faff 	bl	8004ce0 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2207      	movs	r2, #7
 80076f8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e011      	b.n	8007724 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007710:	d1e1      	bne.n	80076d6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d101      	bne.n	8007748 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
 8007746:	e015      	b.n	8007774 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b06      	cmp	r3, #6
 8007754:	d104      	bne.n	8007760 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fb73 	bl	8007e44 <HRTIM_MasterBase_Config>
 800775e:	e004      	b.n	800776a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fb9c 	bl	8007ea2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d101      	bne.n	8007798 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007794:	2302      	movs	r3, #2
 8007796:	e07a      	b.n	800788e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e073      	b.n	800788e <HAL_HRTIM_WaveformTimerConfig+0x112>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	d104      	bne.n	80077c6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fbaf 	bl	8007f22 <HRTIM_MasterWaveform_Config>
 80077c4:	e004      	b.n	80077d0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fc46 	bl	800805c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4403      	add	r3, r0
 80077e2:	3320      	adds	r3, #32
 80077e4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6859      	ldr	r1, [r3, #4]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4403      	add	r3, r0
 80077f8:	3324      	adds	r3, #36	; 0x24
 80077fa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6899      	ldr	r1, [r3, #8]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4403      	add	r3, r0
 800780e:	3328      	adds	r3, #40	; 0x28
 8007810:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68d9      	ldr	r1, [r3, #12]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4403      	add	r3, r0
 8007824:	332c      	adds	r3, #44	; 0x2c
 8007826:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6919      	ldr	r1, [r3, #16]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4403      	add	r3, r0
 800783a:	3330      	adds	r3, #48	; 0x30
 800783c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 ff01 	bl	8008648 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d017      	beq.n	800787c <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d113      	bne.n	800787c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	3301      	adds	r3, #1
 800785c:	01db      	lsls	r3, r3, #7
 800785e:	4413      	add	r3, r2
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	025b      	lsls	r3, r3, #9
 800786c:	68f9      	ldr	r1, [r7, #12]
 800786e:	6809      	ldr	r1, [r1, #0]
 8007870:	431a      	orrs	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3301      	adds	r3, #1
 8007876:	01db      	lsls	r3, r3, #7
 8007878:	440b      	add	r3, r1
 800787a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d101      	bne.n	80078b2 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e020      	b.n	80078f4 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_HRTIM_WaveformTimerControl+0x2a>
 80078bc:	2302      	movs	r3, #2
 80078be:	e019      	b.n	80078f4 <HAL_HRTIM_WaveformTimerControl+0x5e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fd47 	bl	8008368 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 feb3 	bl	8008648 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d101      	bne.n	8007918 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8007914:	2302      	movs	r3, #2
 8007916:	e067      	b.n	80079e8 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8007922:	2302      	movs	r3, #2
 8007924:	e060      	b.n	80079e8 <HAL_HRTIM_DeadTimeConfig+0xec>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2202      	movs	r2, #2
 8007932:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800793e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	041a      	lsls	r2, r3, #16
 800797e:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8007980:	4013      	ands	r3, r2
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	01db      	lsls	r3, r3, #7
 80079ba:	4413      	add	r3, r2
 80079bc:	33b8      	adds	r3, #184	; 0xb8
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	6811      	ldr	r1, [r2, #0]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	01db      	lsls	r3, r3, #7
 80079d0:	440b      	add	r3, r1
 80079d2:	33b8      	adds	r3, #184	; 0xb8
 80079d4:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	01ff0000 	.word	0x01ff0000
 80079f8:	3c002000 	.word	0x3c002000

080079fc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d101      	bne.n	8007a1a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007a16:	2302      	movs	r3, #2
 8007a18:	e157      	b.n	8007cca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e150      	b.n	8007cca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	d140      	bne.n	8007ac0 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	2b07      	cmp	r3, #7
 8007a44:	d82a      	bhi.n	8007a9c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a6d 	.word	0x08007a6d
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a91 	.word	0x08007a91
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	61da      	str	r2, [r3, #28]
        break;
 8007a76:	e01a      	b.n	8007aae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007a82:	e014      	b.n	8007aae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007a8e:	e00e      	b.n	8007aae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007a9a:	e008      	b.n	8007aae <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2207      	movs	r2, #7
 8007aa0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8007aac:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	f040 80fe 	bne.w	8007cb8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e104      	b.n	8007cca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	f200 80e3 	bhi.w	8007c90 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007aca:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007c91 	.word	0x08007c91
 8007adc:	08007bc1 	.word	0x08007bc1
 8007ae0:	08007c91 	.word	0x08007c91
 8007ae4:	08007c91 	.word	0x08007c91
 8007ae8:	08007c91 	.word	0x08007c91
 8007aec:	08007bd5 	.word	0x08007bd5
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	01db      	lsls	r3, r3, #7
 8007afc:	440b      	add	r3, r1
 8007afe:	339c      	adds	r3, #156	; 0x9c
 8007b00:	601a      	str	r2, [r3, #0]
        break;
 8007b02:	e0d1      	b.n	8007ca8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6819      	ldr	r1, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	01db      	lsls	r3, r3, #7
 8007b10:	440b      	add	r3, r1
 8007b12:	33a4      	adds	r3, #164	; 0xa4
 8007b14:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d03f      	beq.n	8007b9e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3301      	adds	r3, #1
 8007b26:	01db      	lsls	r3, r3, #7
 8007b28:	4413      	add	r3, r2
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	6811      	ldr	r1, [r2, #0]
 8007b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3301      	adds	r3, #1
 8007b38:	01db      	lsls	r3, r3, #7
 8007b3a:	440b      	add	r3, r1
 8007b3c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	3301      	adds	r3, #1
 8007b46:	01db      	lsls	r3, r3, #7
 8007b48:	4413      	add	r3, r2
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	68f9      	ldr	r1, [r7, #12]
 8007b52:	6809      	ldr	r1, [r1, #0]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	01db      	lsls	r3, r3, #7
 8007b5c:	440b      	add	r3, r1
 8007b5e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b68:	d109      	bne.n	8007b7e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	01db      	lsls	r3, r3, #7
 8007b76:	440b      	add	r3, r1
 8007b78:	339c      	adds	r3, #156	; 0x9c
 8007b7a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007b7c:	e091      	b.n	8007ca2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b86:	f040 808c 	bne.w	8007ca2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6819      	ldr	r1, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	01db      	lsls	r3, r3, #7
 8007b96:	440b      	add	r3, r1
 8007b98:	33a8      	adds	r3, #168	; 0xa8
 8007b9a:	601a      	str	r2, [r3, #0]
         break;
 8007b9c:	e081      	b.n	8007ca2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	4413      	add	r3, r2
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	6811      	ldr	r1, [r2, #0]
 8007bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	01db      	lsls	r3, r3, #7
 8007bba:	440b      	add	r3, r1
 8007bbc:	601a      	str	r2, [r3, #0]
         break;
 8007bbe:	e070      	b.n	8007ca2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	01db      	lsls	r3, r3, #7
 8007bcc:	440b      	add	r3, r1
 8007bce:	33a8      	adds	r3, #168	; 0xa8
 8007bd0:	601a      	str	r2, [r3, #0]
        break;
 8007bd2:	e069      	b.n	8007ca8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6819      	ldr	r1, [r3, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	01db      	lsls	r3, r3, #7
 8007be0:	440b      	add	r3, r1
 8007be2:	33ac      	adds	r3, #172	; 0xac
 8007be4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d03f      	beq.n	8007c6e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	01db      	lsls	r3, r3, #7
 8007bf8:	4413      	add	r3, r2
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	6811      	ldr	r1, [r2, #0]
 8007c00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3301      	adds	r3, #1
 8007c08:	01db      	lsls	r3, r3, #7
 8007c0a:	440b      	add	r3, r1
 8007c0c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	3301      	adds	r3, #1
 8007c16:	01db      	lsls	r3, r3, #7
 8007c18:	4413      	add	r3, r2
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	6809      	ldr	r1, [r1, #0]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	01db      	lsls	r3, r3, #7
 8007c2e:	440b      	add	r3, r1
 8007c30:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3a:	d109      	bne.n	8007c50 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	440b      	add	r3, r1
 8007c4a:	339c      	adds	r3, #156	; 0x9c
 8007c4c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007c4e:	e02a      	b.n	8007ca6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c58:	d125      	bne.n	8007ca6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	01db      	lsls	r3, r3, #7
 8007c66:	440b      	add	r3, r1
 8007c68:	33a8      	adds	r3, #168	; 0xa8
 8007c6a:	601a      	str	r2, [r3, #0]
         break;
 8007c6c:	e01b      	b.n	8007ca6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	3301      	adds	r3, #1
 8007c76:	01db      	lsls	r3, r3, #7
 8007c78:	4413      	add	r3, r2
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	6811      	ldr	r1, [r2, #0]
 8007c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	3301      	adds	r3, #1
 8007c88:	01db      	lsls	r3, r3, #7
 8007c8a:	440b      	add	r3, r1
 8007c8c:	601a      	str	r2, [r3, #0]
         break;
 8007c8e:	e00a      	b.n	8007ca6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2207      	movs	r2, #7
 8007c94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007ca6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b07      	cmp	r3, #7
 8007cb2:	d101      	bne.n	8007cb8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e008      	b.n	8007cca <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d101      	bne.n	8007cf6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e01d      	b.n	8007d32 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e016      	b.n	8007d32 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fb84 	bl	8008428 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_HRTIM_WaveformOutputStart+0x18>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e01a      	b.n	8007d88 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_HRTIM_WaveformOutputStop+0x18>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e01a      	b.n	8007de2 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_HRTIM_WaveformCountStart+0x18>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e018      	b.n	8007e38 <HAL_HRTIM_WaveformCountStart+0x4a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6819      	ldr	r1, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0318 	bic.w	r3, r3, #24
 8007e6e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	6852      	ldr	r2, [r2, #4]
 8007e94:	619a      	str	r2, [r3, #24]
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b087      	sub	sp, #28
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	01db      	lsls	r3, r3, #7
 8007eb8:	4413      	add	r3, r2
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f023 0307 	bic.w	r3, r3, #7
 8007ec4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f023 0318 	bic.w	r3, r3, #24
 8007ed6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	4413      	add	r3, r2
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6819      	ldr	r1, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	01db      	lsls	r3, r3, #7
 8007efe:	440b      	add	r3, r1
 8007f00:	3394      	adds	r3, #148	; 0x94
 8007f02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6819      	ldr	r1, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	01db      	lsls	r3, r3, #7
 8007f10:	440b      	add	r3, r1
 8007f12:	3398      	adds	r3, #152	; 0x98
 8007f14:	601a      	str	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8007f3c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f56:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d003      	beq.n	8007f68 <HRTIM_MasterWaveform_Config+0x46>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d108      	bne.n	8007f7a <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f6e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f043 0320 	orr.w	r3, r3, #32
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e021      	b.n	8007fbe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d108      	bne.n	8007f94 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f88:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	e014      	b.n	8007fbe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d108      	bne.n	8007fae <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa2:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e007      	b.n	8007fbe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f023 0320 	bic.w	r3, r3, #32
 8007fb4:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fc4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fd6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007fe8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007ffa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800800c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008020:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008032:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4313      	orrs	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800805c:	b480      	push	{r7}
 800805e:	b08b      	sub	sp, #44	; 0x2c
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3301      	adds	r3, #1
 8008070:	01db      	lsls	r3, r3, #7
 8008072:	4413      	add	r3, r2
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	3301      	adds	r3, #1
 8008082:	01db      	lsls	r3, r3, #7
 8008084:	440b      	add	r3, r1
 8008086:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3301      	adds	r3, #1
 8008090:	01db      	lsls	r3, r3, #7
 8008092:	4413      	add	r3, r2
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	4413      	add	r3, r2
 80080a2:	33e8      	adds	r3, #232	; 0xe8
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	01db      	lsls	r3, r3, #7
 80080b0:	4413      	add	r3, r2
 80080b2:	33e4      	adds	r3, #228	; 0xe4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80080c0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	f023 0320 	bic.w	r3, r3, #32
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d0:	4313      	orrs	r3, r2
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d003      	beq.n	80080e4 <HRTIM_TimingUnitWaveform_Config+0x88>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d108      	bne.n	80080f6 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	f043 0320 	orr.w	r3, r3, #32
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
 80080f4:	e021      	b.n	800813a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d108      	bne.n	8008110 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	e014      	b.n	800813a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d108      	bne.n	800812a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
 8008128:	e007      	b.n	800813a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	f023 0320 	bic.w	r3, r3, #32
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008148:	4313      	orrs	r3, r2
 800814a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815a:	4313      	orrs	r3, r2
 800815c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816c:	4313      	orrs	r3, r2
 800816e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800817e:	4313      	orrs	r3, r2
 8008180:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008190:	4313      	orrs	r3, r2
 8008192:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a4:	d103      	bne.n	80081ae <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081bc:	4313      	orrs	r3, r2
 80081be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ce:	4313      	orrs	r3, r2
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80081d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e4:	4313      	orrs	r3, r2
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80081ee:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008204:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	4313      	orrs	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008216:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	4313      	orrs	r3, r2
 8008220:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008226:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800822a:	d004      	beq.n	8008236 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008230:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008234:	d103      	bne.n	800823e <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d108      	bne.n	8008250 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008244:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	6a3a      	ldr	r2, [r7, #32]
 800824c:	4313      	orrs	r3, r2
 800824e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008256:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825c:	6a3a      	ldr	r2, [r7, #32]
 800825e:	4313      	orrs	r3, r2
 8008260:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b05      	cmp	r3, #5
 800826c:	d850      	bhi.n	8008310 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	0800828d 	.word	0x0800828d
 8008278:	080082a3 	.word	0x080082a3
 800827c:	080082b9 	.word	0x080082b9
 8008280:	080082cf 	.word	0x080082cf
 8008284:	080082e5 	.word	0x080082e5
 8008288:	080082fb 	.word	0x080082fb
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008292:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	4313      	orrs	r3, r2
 800829e:	61fb      	str	r3, [r7, #28]
      break;
 80082a0:	e037      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082a8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61fb      	str	r3, [r7, #28]
      break;
 80082b6:	e02c      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80082be:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	61fb      	str	r3, [r7, #28]
      break;
 80082cc:	e021      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082d4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	4313      	orrs	r3, r2
 80082e0:	61fb      	str	r3, [r7, #28]
      break;
 80082e2:	e016      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082ea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	015b      	lsls	r3, r3, #5
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	61fb      	str	r3, [r7, #28]
      break;
 80082f8:	e00b      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008300:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	019b      	lsls	r3, r3, #6
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	4313      	orrs	r3, r2
 800830c:	61fb      	str	r3, [r7, #28]
      break;
 800830e:	e000      	b.n	8008312 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8008310:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	3301      	adds	r3, #1
 800831a:	01db      	lsls	r3, r3, #7
 800831c:	4413      	add	r3, r2
 800831e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008320:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	01db      	lsls	r3, r3, #7
 800832a:	4413      	add	r3, r2
 800832c:	33e8      	adds	r3, #232	; 0xe8
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	01db      	lsls	r3, r3, #7
 800833a:	4413      	add	r3, r2
 800833c:	33e4      	adds	r3, #228	; 0xe4
 800833e:	6a3a      	ldr	r2, [r7, #32]
 8008340:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	01db      	lsls	r3, r3, #7
 800834a:	4413      	add	r3, r2
 800834c:	33d4      	adds	r3, #212	; 0xd4
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800835c:	bf00      	nop
 800835e:	372c      	adds	r7, #44	; 0x2c
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	01db      	lsls	r3, r3, #7
 800837c:	4413      	add	r3, r2
 800837e:	33ec      	adds	r3, #236	; 0xec
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800839e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b0:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083c2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d11a      	bne.n	800840c <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 0304 	bic.w	r3, r3, #4
 80083dc:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f023 0302 	bic.w	r3, r3, #2
 80083ee:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	01db      	lsls	r3, r3, #7
 8008414:	4413      	add	r3, r2
 8008416:	33ec      	adds	r3, #236	; 0xec
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	601a      	str	r2, [r3, #0]

}
 800841c:	bf00      	nop
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008428:	b480      	push	{r7}
 800842a:	b089      	sub	sp, #36	; 0x24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	4413      	add	r3, r2
 8008444:	33e4      	adds	r3, #228	; 0xe4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	01db      	lsls	r3, r3, #7
 8008452:	4413      	add	r3, r2
 8008454:	33b8      	adds	r3, #184	; 0xb8
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	617b      	str	r3, [r7, #20]

  switch (Output)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008460:	f000 8088 	beq.w	8008574 <HRTIM_OutputConfig+0x14c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800846a:	f200 8098 	bhi.w	800859e <HRTIM_OutputConfig+0x176>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008474:	d06b      	beq.n	800854e <HRTIM_OutputConfig+0x126>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847c:	f200 808f 	bhi.w	800859e <HRTIM_OutputConfig+0x176>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008486:	d075      	beq.n	8008574 <HRTIM_OutputConfig+0x14c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848e:	f200 8086 	bhi.w	800859e <HRTIM_OutputConfig+0x176>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008498:	d059      	beq.n	800854e <HRTIM_OutputConfig+0x126>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d87d      	bhi.n	800859e <HRTIM_OutputConfig+0x176>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b80      	cmp	r3, #128	; 0x80
 80084a6:	d065      	beq.n	8008574 <HRTIM_OutputConfig+0x14c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	d877      	bhi.n	800859e <HRTIM_OutputConfig+0x176>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d849      	bhi.n	8008548 <HRTIM_OutputConfig+0x120>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d071      	beq.n	800859e <HRTIM_OutputConfig+0x176>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3b01      	subs	r3, #1
 80084be:	2b1f      	cmp	r3, #31
 80084c0:	d86d      	bhi.n	800859e <HRTIM_OutputConfig+0x176>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <HRTIM_OutputConfig+0xa0>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	0800854f 	.word	0x0800854f
 80084cc:	08008575 	.word	0x08008575
 80084d0:	0800859f 	.word	0x0800859f
 80084d4:	0800854f 	.word	0x0800854f
 80084d8:	0800859f 	.word	0x0800859f
 80084dc:	0800859f 	.word	0x0800859f
 80084e0:	0800859f 	.word	0x0800859f
 80084e4:	08008575 	.word	0x08008575
 80084e8:	0800859f 	.word	0x0800859f
 80084ec:	0800859f 	.word	0x0800859f
 80084f0:	0800859f 	.word	0x0800859f
 80084f4:	0800859f 	.word	0x0800859f
 80084f8:	0800859f 	.word	0x0800859f
 80084fc:	0800859f 	.word	0x0800859f
 8008500:	0800859f 	.word	0x0800859f
 8008504:	0800854f 	.word	0x0800854f
 8008508:	0800859f 	.word	0x0800859f
 800850c:	0800859f 	.word	0x0800859f
 8008510:	0800859f 	.word	0x0800859f
 8008514:	0800859f 	.word	0x0800859f
 8008518:	0800859f 	.word	0x0800859f
 800851c:	0800859f 	.word	0x0800859f
 8008520:	0800859f 	.word	0x0800859f
 8008524:	0800859f 	.word	0x0800859f
 8008528:	0800859f 	.word	0x0800859f
 800852c:	0800859f 	.word	0x0800859f
 8008530:	0800859f 	.word	0x0800859f
 8008534:	0800859f 	.word	0x0800859f
 8008538:	0800859f 	.word	0x0800859f
 800853c:	0800859f 	.word	0x0800859f
 8008540:	0800859f 	.word	0x0800859f
 8008544:	08008575 	.word	0x08008575
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b40      	cmp	r3, #64	; 0x40
 800854c:	d127      	bne.n	800859e <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	01db      	lsls	r3, r3, #7
 800855a:	440b      	add	r3, r1
 800855c:	33bc      	adds	r3, #188	; 0xbc
 800855e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	440b      	add	r3, r1
 800856e:	33c0      	adds	r3, #192	; 0xc0
 8008570:	601a      	str	r2, [r3, #0]
      break;
 8008572:	e015      	b.n	80085a0 <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6819      	ldr	r1, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	01db      	lsls	r3, r3, #7
 8008580:	440b      	add	r3, r1
 8008582:	33c4      	adds	r3, #196	; 0xc4
 8008584:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	01db      	lsls	r3, r3, #7
 8008592:	440b      	add	r3, r1
 8008594:	33c8      	adds	r3, #200	; 0xc8
 8008596:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008598:	2310      	movs	r3, #16
 800859a:	61bb      	str	r3, [r7, #24]
      break;
 800859c:	e000      	b.n	80085a0 <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 800859e:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80085a0:	22fe      	movs	r2, #254	; 0xfe
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80085a8:	43db      	mvns	r3, r3
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	4013      	ands	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	4313      	orrs	r3, r2
 80085be:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	fa02 f303 	lsl.w	r3, r2, r3
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	4313      	orrs	r3, r2
 80085de:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	695a      	ldr	r2, [r3, #20]
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b08      	cmp	r3, #8
 8008606:	d111      	bne.n	800862c <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10c      	bne.n	800862c <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008618:	2b00      	cmp	r3, #0
 800861a:	d107      	bne.n	800862c <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	4313      	orrs	r3, r2
 800862a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	01db      	lsls	r3, r3, #7
 8008634:	4413      	add	r3, r2
 8008636:	33e4      	adds	r3, #228	; 0xe4
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	601a      	str	r2, [r3, #0]
}
 800863c:	bf00      	nop
 800863e:	3724      	adds	r7, #36	; 0x24
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b06      	cmp	r3, #6
 8008656:	d85e      	bhi.n	8008716 <HRTIM_ForceRegistersUpdate+0xce>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <HRTIM_ForceRegistersUpdate+0x18>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008693 	.word	0x08008693
 8008664:	080086a9 	.word	0x080086a9
 8008668:	080086bf 	.word	0x080086bf
 800866c:	080086d5 	.word	0x080086d5
 8008670:	080086eb 	.word	0x080086eb
 8008674:	08008701 	.word	0x08008701
 8008678:	0800867d 	.word	0x0800867d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0201 	orr.w	r2, r2, #1
 800868c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008690:	e042      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0202 	orr.w	r2, r2, #2
 80086a2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80086a6:	e037      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0204 	orr.w	r2, r2, #4
 80086b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80086bc:	e02c      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0208 	orr.w	r2, r2, #8
 80086ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80086d2:	e021      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0210 	orr.w	r2, r2, #16
 80086e4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80086e8:	e016      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0220 	orr.w	r2, r2, #32
 80086fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80086fe:	e00b      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008710:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008714:	e000      	b.n	8008718 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8008716:	bf00      	nop
  }
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e08d      	b.n	8008852 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fb fcb0 	bl	80040b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2224      	movs	r2, #36	; 0x24
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0201 	bic.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d107      	bne.n	800879e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	e006      	b.n	80087ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d108      	bne.n	80087c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087c2:	605a      	str	r2, [r3, #4]
 80087c4:	e007      	b.n	80087d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80087e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69d9      	ldr	r1, [r3, #28]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1a      	ldr	r2, [r3, #32]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af02      	add	r7, sp, #8
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	4608      	mov	r0, r1
 8008866:	4611      	mov	r1, r2
 8008868:	461a      	mov	r2, r3
 800886a:	4603      	mov	r3, r0
 800886c:	817b      	strh	r3, [r7, #10]
 800886e:	460b      	mov	r3, r1
 8008870:	813b      	strh	r3, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b20      	cmp	r3, #32
 8008880:	f040 80f9 	bne.w	8008a76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_I2C_Mem_Write+0x34>
 800888a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d105      	bne.n	800889c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008896:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0ed      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_I2C_Mem_Write+0x4e>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e0e6      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088b2:	f7fc fa15 	bl	8004ce0 <HAL_GetTick>
 80088b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	2319      	movs	r3, #25
 80088be:	2201      	movs	r2, #1
 80088c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fbaf 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0d1      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2221      	movs	r2, #33	; 0x21
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2240      	movs	r2, #64	; 0x40
 80088e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088fc:	88f8      	ldrh	r0, [r7, #6]
 80088fe:	893a      	ldrh	r2, [r7, #8]
 8008900:	8979      	ldrh	r1, [r7, #10]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4603      	mov	r3, r0
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 fabf 	bl	8008e90 <I2C_RequestMemoryWrite>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e0a9      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	2bff      	cmp	r3, #255	; 0xff
 800892c:	d90e      	bls.n	800894c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	22ff      	movs	r2, #255	; 0xff
 8008932:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008938:	b2da      	uxtb	r2, r3
 800893a:	8979      	ldrh	r1, [r7, #10]
 800893c:	2300      	movs	r3, #0
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fd33 	bl	80093b0 <I2C_TransferConfig>
 800894a:	e00f      	b.n	800896c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895a:	b2da      	uxtb	r2, r3
 800895c:	8979      	ldrh	r1, [r7, #10]
 800895e:	2300      	movs	r3, #0
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fd22 	bl	80093b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 fbb2 	bl	80090da <I2C_WaitOnTXISFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e07b      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d034      	beq.n	8008a24 <HAL_I2C_Mem_Write+0x1c8>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d130      	bne.n	8008a24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fb2b 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e04d      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	2bff      	cmp	r3, #255	; 0xff
 80089e4:	d90e      	bls.n	8008a04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	22ff      	movs	r2, #255	; 0xff
 80089ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	8979      	ldrh	r1, [r7, #10]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fcd7 	bl	80093b0 <I2C_TransferConfig>
 8008a02:	e00f      	b.n	8008a24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	8979      	ldrh	r1, [r7, #10]
 8008a16:	2300      	movs	r3, #0
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fcc6 	bl	80093b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d19e      	bne.n	800896c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fb98 	bl	8009168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e01a      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2220      	movs	r2, #32
 8008a48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6859      	ldr	r1, [r3, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <HAL_I2C_Mem_Write+0x224>)
 8008a56:	400b      	ands	r3, r1
 8008a58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e000      	b.n	8008a78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a76:	2302      	movs	r3, #2
  }
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	fe00e800 	.word	0xfe00e800

08008a84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	461a      	mov	r2, r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	817b      	strh	r3, [r7, #10]
 8008a96:	460b      	mov	r3, r1
 8008a98:	813b      	strh	r3, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	f040 80fd 	bne.w	8008ca6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_I2C_Mem_Read+0x34>
 8008ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008abe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e0f1      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_I2C_Mem_Read+0x4e>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e0ea      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ada:	f7fc f901 	bl	8004ce0 <HAL_GetTick>
 8008ade:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	2319      	movs	r3, #25
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fa9b 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0d5      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2222      	movs	r2, #34	; 0x22
 8008b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2240      	movs	r2, #64	; 0x40
 8008b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b24:	88f8      	ldrh	r0, [r7, #6]
 8008b26:	893a      	ldrh	r2, [r7, #8]
 8008b28:	8979      	ldrh	r1, [r7, #10]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	4603      	mov	r3, r0
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f9ff 	bl	8008f38 <I2C_RequestMemoryRead>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0ad      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2bff      	cmp	r3, #255	; 0xff
 8008b54:	d90e      	bls.n	8008b74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	8979      	ldrh	r1, [r7, #10]
 8008b64:	4b52      	ldr	r3, [pc, #328]	; (8008cb0 <HAL_I2C_Mem_Read+0x22c>)
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fc1f 	bl	80093b0 <I2C_TransferConfig>
 8008b72:	e00f      	b.n	8008b94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	8979      	ldrh	r1, [r7, #10]
 8008b86:	4b4a      	ldr	r3, [pc, #296]	; (8008cb0 <HAL_I2C_Mem_Read+0x22c>)
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fc0e 	bl	80093b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2104      	movs	r1, #4
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fa42 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e07c      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d034      	beq.n	8008c54 <HAL_I2C_Mem_Read+0x1d0>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d130      	bne.n	8008c54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2180      	movs	r1, #128	; 0x80
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa13 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e04d      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2bff      	cmp	r3, #255	; 0xff
 8008c14:	d90e      	bls.n	8008c34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	8979      	ldrh	r1, [r7, #10]
 8008c24:	2300      	movs	r3, #0
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fbbf 	bl	80093b0 <I2C_TransferConfig>
 8008c32:	e00f      	b.n	8008c54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	8979      	ldrh	r1, [r7, #10]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fbae 	bl	80093b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d19a      	bne.n	8008b94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fa80 	bl	8009168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e01a      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2220      	movs	r2, #32
 8008c78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6859      	ldr	r1, [r3, #4]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <HAL_I2C_Mem_Read+0x230>)
 8008c86:	400b      	ands	r3, r1
 8008c88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	80002400 	.word	0x80002400
 8008cb4:	fe00e800 	.word	0xfe00e800

08008cb8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	f040 80d6 	bne.w	8008e86 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce8:	d101      	bne.n	8008cee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
 8008cec:	e0cc      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_I2C_IsDeviceReady+0x44>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e0c5      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2224      	movs	r2, #36	; 0x24
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d107      	bne.n	8008d2a <HAL_I2C_IsDeviceReady+0x72>
 8008d1a:	897b      	ldrh	r3, [r7, #10]
 8008d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d28:	e006      	b.n	8008d38 <HAL_I2C_IsDeviceReady+0x80>
 8008d2a:	897b      	ldrh	r3, [r7, #10]
 8008d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008d3e:	f7fb ffcf 	bl	8004ce0 <HAL_GetTick>
 8008d42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	bf0c      	ite	eq
 8008d52:	2301      	moveq	r3, #1
 8008d54:	2300      	movne	r3, #0
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	bf0c      	ite	eq
 8008d68:	2301      	moveq	r3, #1
 8008d6a:	2300      	movne	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008d70:	e034      	b.n	8008ddc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d01a      	beq.n	8008db0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d7a:	f7fb ffb1 	bl	8004ce0 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d302      	bcc.n	8008d90 <HAL_I2C_IsDeviceReady+0xd8>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10f      	bne.n	8008db0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	f043 0220 	orr.w	r2, r3, #32
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e06b      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	2300      	movne	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008ddc:	7ffb      	ldrb	r3, [r7, #31]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <HAL_I2C_IsDeviceReady+0x130>
 8008de2:	7fbb      	ldrb	r3, [r7, #30]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0c4      	beq.n	8008d72 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d01a      	beq.n	8008e2c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2120      	movs	r1, #32
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f911 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e03b      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2220      	movs	r2, #32
 8008e16:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e02d      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2200      	movs	r2, #0
 8008e34:	2120      	movs	r1, #32
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f8f6 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e020      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2210      	movs	r2, #16
 8008e4c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2220      	movs	r2, #32
 8008e54:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	f63f af56 	bhi.w	8008d12 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e72:	f043 0220 	orr.w	r2, r3, #32
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8008e86:	2302      	movs	r3, #2
  }
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	817b      	strh	r3, [r7, #10]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	813b      	strh	r3, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	8979      	ldrh	r1, [r7, #10]
 8008eb0:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <I2C_RequestMemoryWrite+0xa4>)
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fa79 	bl	80093b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f909 	bl	80090da <I2C_WaitOnTXISFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e02c      	b.n	8008f2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d105      	bne.n	8008ee4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ed8:	893b      	ldrh	r3, [r7, #8]
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	629a      	str	r2, [r3, #40]	; 0x28
 8008ee2:	e015      	b.n	8008f10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ee4:	893b      	ldrh	r3, [r7, #8]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	69b9      	ldr	r1, [r7, #24]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f8ef 	bl	80090da <I2C_WaitOnTXISFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e012      	b.n	8008f2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f06:	893b      	ldrh	r3, [r7, #8]
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2200      	movs	r2, #0
 8008f18:	2180      	movs	r1, #128	; 0x80
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f884 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	80002000 	.word	0x80002000

08008f38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	4608      	mov	r0, r1
 8008f42:	4611      	mov	r1, r2
 8008f44:	461a      	mov	r2, r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	817b      	strh	r3, [r7, #10]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	813b      	strh	r3, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008f52:	88fb      	ldrh	r3, [r7, #6]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	8979      	ldrh	r1, [r7, #10]
 8008f58:	4b20      	ldr	r3, [pc, #128]	; (8008fdc <I2C_RequestMemoryRead+0xa4>)
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 fa26 	bl	80093b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f64:	69fa      	ldr	r2, [r7, #28]
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f8b6 	bl	80090da <I2C_WaitOnTXISFlagUntilTimeout>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e02c      	b.n	8008fd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d105      	bne.n	8008f8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f7e:	893b      	ldrh	r3, [r7, #8]
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	629a      	str	r2, [r3, #40]	; 0x28
 8008f88:	e015      	b.n	8008fb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008f8a:	893b      	ldrh	r3, [r7, #8]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	69b9      	ldr	r1, [r7, #24]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f89c 	bl	80090da <I2C_WaitOnTXISFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e012      	b.n	8008fd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fac:	893b      	ldrh	r3, [r7, #8]
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2140      	movs	r1, #64	; 0x40
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f831 	bl	8009028 <I2C_WaitOnFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	80002000 	.word	0x80002000

08008fe0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b01      	cmp	r3, #1
 800900a:	d007      	beq.n	800901c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0201 	orr.w	r2, r2, #1
 800901a:	619a      	str	r2, [r3, #24]
  }
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009038:	e03b      	b.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f8d6 	bl	80091f0 <I2C_IsErrorOccurred>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e041      	b.n	80090d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d02d      	beq.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009056:	f7fb fe43 	bl	8004ce0 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d302      	bcc.n	800906c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d122      	bne.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4013      	ands	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	bf0c      	ite	eq
 800907c:	2301      	moveq	r3, #1
 800907e:	2300      	movne	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	429a      	cmp	r2, r3
 8009088:	d113      	bne.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908e:	f043 0220 	orr.w	r2, r3, #32
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2220      	movs	r2, #32
 800909a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e00f      	b.n	80090d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	429a      	cmp	r2, r3
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d0b4      	beq.n	800903a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090e6:	e033      	b.n	8009150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f87f 	bl	80091f0 <I2C_IsErrorOccurred>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e031      	b.n	8009160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d025      	beq.n	8009150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009104:	f7fb fdec 	bl	8004ce0 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	429a      	cmp	r2, r3
 8009112:	d302      	bcc.n	800911a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d11a      	bne.n	8009150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b02      	cmp	r3, #2
 8009126:	d013      	beq.n	8009150 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912c:	f043 0220 	orr.w	r2, r3, #32
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e007      	b.n	8009160 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b02      	cmp	r3, #2
 800915c:	d1c4      	bne.n	80090e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009174:	e02f      	b.n	80091d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 f838 	bl	80091f0 <I2C_IsErrorOccurred>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e02d      	b.n	80091e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918a:	f7fb fda9 	bl	8004ce0 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	d302      	bcc.n	80091a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11a      	bne.n	80091d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d013      	beq.n	80091d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	f043 0220 	orr.w	r2, r3, #32
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e007      	b.n	80091e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d1c8      	bne.n	8009176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	f003 0310 	and.w	r3, r3, #16
 8009218:	2b00      	cmp	r3, #0
 800921a:	d068      	beq.n	80092ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2210      	movs	r2, #16
 8009222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009224:	e049      	b.n	80092ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d045      	beq.n	80092ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800922e:	f7fb fd57 	bl	8004ce0 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	d302      	bcc.n	8009244 <I2C_IsErrorOccurred+0x54>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d13a      	bne.n	80092ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800924e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009266:	d121      	bne.n	80092ac <I2C_IsErrorOccurred+0xbc>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800926e:	d01d      	beq.n	80092ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009270:	7cfb      	ldrb	r3, [r7, #19]
 8009272:	2b20      	cmp	r3, #32
 8009274:	d01a      	beq.n	80092ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009286:	f7fb fd2b 	bl	8004ce0 <HAL_GetTick>
 800928a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800928c:	e00e      	b.n	80092ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800928e:	f7fb fd27 	bl	8004ce0 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b19      	cmp	r3, #25
 800929a:	d907      	bls.n	80092ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	f043 0320 	orr.w	r3, r3, #32
 80092a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80092aa:	e006      	b.n	80092ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d1e9      	bne.n	800928e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d003      	beq.n	80092d0 <I2C_IsErrorOccurred+0xe0>
 80092c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0aa      	beq.n	8009226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2220      	movs	r2, #32
 80092de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	f043 0304 	orr.w	r3, r3, #4
 80092e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	f043 0308 	orr.w	r3, r3, #8
 8009328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	f043 0302 	orr.w	r3, r3, #2
 800934a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800935c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01c      	beq.n	800939e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff fe3b 	bl	8008fe0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6859      	ldr	r1, [r3, #4]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <I2C_IsErrorOccurred+0x1bc>)
 8009376:	400b      	ands	r3, r1
 8009378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	431a      	orrs	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800939e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3728      	adds	r7, #40	; 0x28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	fe00e800 	.word	0xfe00e800

080093b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	607b      	str	r3, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	817b      	strh	r3, [r7, #10]
 80093be:	4613      	mov	r3, r2
 80093c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093c2:	897b      	ldrh	r3, [r7, #10]
 80093c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093c8:	7a7b      	ldrb	r3, [r7, #9]
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	4313      	orrs	r3, r2
 80093da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	0d5b      	lsrs	r3, r3, #21
 80093ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80093ee:	4b08      	ldr	r3, [pc, #32]	; (8009410 <I2C_TransferConfig+0x60>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	43db      	mvns	r3, r3
 80093f4:	ea02 0103 	and.w	r1, r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	430a      	orrs	r2, r1
 8009400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009402:	bf00      	nop
 8009404:	371c      	adds	r7, #28
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	03ff63ff 	.word	0x03ff63ff

08009414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b20      	cmp	r3, #32
 8009428:	d138      	bne.n	800949c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009434:	2302      	movs	r3, #2
 8009436:	e032      	b.n	800949e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2224      	movs	r2, #36	; 0x24
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0201 	bic.w	r2, r2, #1
 8009456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6819      	ldr	r1, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0201 	orr.w	r2, r2, #1
 8009486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	e000      	b.n	800949e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800949c:	2302      	movs	r3, #2
  }
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d139      	bne.n	8009534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e033      	b.n	8009536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2224      	movs	r2, #36	; 0x24
 80094da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80094fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0201 	orr.w	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e000      	b.n	8009536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009534:	2302      	movs	r3, #2
  }
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d141      	bne.n	80095d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009552:	4b4b      	ldr	r3, [pc, #300]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800955a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955e:	d131      	bne.n	80095c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009560:	4b47      	ldr	r3, [pc, #284]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009566:	4a46      	ldr	r2, [pc, #280]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800956c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009570:	4b43      	ldr	r3, [pc, #268]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009578:	4a41      	ldr	r2, [pc, #260]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800957a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800957e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009580:	4b40      	ldr	r3, [pc, #256]	; (8009684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2232      	movs	r2, #50	; 0x32
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	4a3f      	ldr	r2, [pc, #252]	; (8009688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	0c9b      	lsrs	r3, r3, #18
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009596:	e002      	b.n	800959e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3b01      	subs	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800959e:	4b38      	ldr	r3, [pc, #224]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095aa:	d102      	bne.n	80095b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f2      	bne.n	8009598 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095b2:	4b33      	ldr	r3, [pc, #204]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095be:	d158      	bne.n	8009672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e057      	b.n	8009674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095c4:	4b2e      	ldr	r3, [pc, #184]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ca:	4a2d      	ldr	r2, [pc, #180]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80095d4:	e04d      	b.n	8009672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095dc:	d141      	bne.n	8009662 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80095de:	4b28      	ldr	r3, [pc, #160]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ea:	d131      	bne.n	8009650 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095ec:	4b24      	ldr	r3, [pc, #144]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f2:	4a23      	ldr	r2, [pc, #140]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80095fc:	4b20      	ldr	r3, [pc, #128]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009604:	4a1e      	ldr	r2, [pc, #120]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800960a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800960c:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2232      	movs	r2, #50	; 0x32
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	4a1c      	ldr	r2, [pc, #112]	; (8009688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009618:	fba2 2303 	umull	r2, r3, r2, r3
 800961c:	0c9b      	lsrs	r3, r3, #18
 800961e:	3301      	adds	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009622:	e002      	b.n	800962a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3b01      	subs	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800962a:	4b15      	ldr	r3, [pc, #84]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009636:	d102      	bne.n	800963e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f2      	bne.n	8009624 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800963e:	4b10      	ldr	r3, [pc, #64]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800964a:	d112      	bne.n	8009672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e011      	b.n	8009674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009656:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009660:	e007      	b.n	8009672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800966a:	4a05      	ldr	r2, [pc, #20]	; (8009680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800966c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009670:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	40007000 	.word	0x40007000
 8009684:	200001b8 	.word	0x200001b8
 8009688:	431bde83 	.word	0x431bde83

0800968c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a04      	ldr	r2, [pc, #16]	; (80096a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800969a:	6093      	str	r3, [r2, #8]
}
 800969c:	bf00      	nop
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40007000 	.word	0x40007000

080096ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e2fe      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d075      	beq.n	80097b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ca:	4b97      	ldr	r3, [pc, #604]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096d4:	4b94      	ldr	r3, [pc, #592]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0303 	and.w	r3, r3, #3
 80096dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b0c      	cmp	r3, #12
 80096e2:	d102      	bne.n	80096ea <HAL_RCC_OscConfig+0x3e>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d002      	beq.n	80096f0 <HAL_RCC_OscConfig+0x44>
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d10b      	bne.n	8009708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096f0:	4b8d      	ldr	r3, [pc, #564]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d05b      	beq.n	80097b4 <HAL_RCC_OscConfig+0x108>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d157      	bne.n	80097b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e2d9      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009710:	d106      	bne.n	8009720 <HAL_RCC_OscConfig+0x74>
 8009712:	4b85      	ldr	r3, [pc, #532]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a84      	ldr	r2, [pc, #528]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	e01d      	b.n	800975c <HAL_RCC_OscConfig+0xb0>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009728:	d10c      	bne.n	8009744 <HAL_RCC_OscConfig+0x98>
 800972a:	4b7f      	ldr	r3, [pc, #508]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a7e      	ldr	r2, [pc, #504]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4b7c      	ldr	r3, [pc, #496]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a7b      	ldr	r2, [pc, #492]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 800973c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	e00b      	b.n	800975c <HAL_RCC_OscConfig+0xb0>
 8009744:	4b78      	ldr	r3, [pc, #480]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a77      	ldr	r2, [pc, #476]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 800974a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	4b75      	ldr	r3, [pc, #468]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a74      	ldr	r2, [pc, #464]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800975a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d013      	beq.n	800978c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009764:	f7fb fabc 	bl	8004ce0 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800976c:	f7fb fab8 	bl	8004ce0 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b64      	cmp	r3, #100	; 0x64
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e29e      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800977e:	4b6a      	ldr	r3, [pc, #424]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f0      	beq.n	800976c <HAL_RCC_OscConfig+0xc0>
 800978a:	e014      	b.n	80097b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800978c:	f7fb faa8 	bl	8004ce0 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009794:	f7fb faa4 	bl	8004ce0 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b64      	cmp	r3, #100	; 0x64
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e28a      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097a6:	4b60      	ldr	r3, [pc, #384]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1f0      	bne.n	8009794 <HAL_RCC_OscConfig+0xe8>
 80097b2:	e000      	b.n	80097b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d075      	beq.n	80098ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097c2:	4b59      	ldr	r3, [pc, #356]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f003 030c 	and.w	r3, r3, #12
 80097ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097cc:	4b56      	ldr	r3, [pc, #344]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b0c      	cmp	r3, #12
 80097da:	d102      	bne.n	80097e2 <HAL_RCC_OscConfig+0x136>
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d002      	beq.n	80097e8 <HAL_RCC_OscConfig+0x13c>
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d11f      	bne.n	8009828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097e8:	4b4f      	ldr	r3, [pc, #316]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <HAL_RCC_OscConfig+0x154>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e25d      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009800:	4b49      	ldr	r3, [pc, #292]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	061b      	lsls	r3, r3, #24
 800980e:	4946      	ldr	r1, [pc, #280]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009810:	4313      	orrs	r3, r2
 8009812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009814:	4b45      	ldr	r3, [pc, #276]	; (800992c <HAL_RCC_OscConfig+0x280>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f7fb fa15 	bl	8004c48 <HAL_InitTick>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d043      	beq.n	80098ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e249      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d023      	beq.n	8009878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009830:	4b3d      	ldr	r3, [pc, #244]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a3c      	ldr	r2, [pc, #240]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983c:	f7fb fa50 	bl	8004ce0 <HAL_GetTick>
 8009840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009842:	e008      	b.n	8009856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009844:	f7fb fa4c 	bl	8004ce0 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d901      	bls.n	8009856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e232      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009856:	4b34      	ldr	r3, [pc, #208]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0f0      	beq.n	8009844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009862:	4b31      	ldr	r3, [pc, #196]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	492d      	ldr	r1, [pc, #180]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009872:	4313      	orrs	r3, r2
 8009874:	604b      	str	r3, [r1, #4]
 8009876:	e01a      	b.n	80098ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009878:	4b2b      	ldr	r3, [pc, #172]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 800987e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7fb fa2c 	bl	8004ce0 <HAL_GetTick>
 8009888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800988c:	f7fb fa28 	bl	8004ce0 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e20e      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800989e:	4b22      	ldr	r3, [pc, #136]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f0      	bne.n	800988c <HAL_RCC_OscConfig+0x1e0>
 80098aa:	e000      	b.n	80098ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d041      	beq.n	800993e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01c      	beq.n	80098fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098c2:	4b19      	ldr	r3, [pc, #100]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80098c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098c8:	4a17      	ldr	r2, [pc, #92]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d2:	f7fb fa05 	bl	8004ce0 <HAL_GetTick>
 80098d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098da:	f7fb fa01 	bl	8004ce0 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e1e7      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098ec:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80098ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0ef      	beq.n	80098da <HAL_RCC_OscConfig+0x22e>
 80098fa:	e020      	b.n	800993e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 80098fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009902:	4a09      	ldr	r2, [pc, #36]	; (8009928 <HAL_RCC_OscConfig+0x27c>)
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990c:	f7fb f9e8 	bl	8004ce0 <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009912:	e00d      	b.n	8009930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009914:	f7fb f9e4 	bl	8004ce0 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d906      	bls.n	8009930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e1ca      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
 8009926:	bf00      	nop
 8009928:	40021000 	.word	0x40021000
 800992c:	200001bc 	.word	0x200001bc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009930:	4b8c      	ldr	r3, [pc, #560]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1ea      	bne.n	8009914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80a6 	beq.w	8009a98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009950:	4b84      	ldr	r3, [pc, #528]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <HAL_RCC_OscConfig+0x2b4>
 800995c:	2301      	movs	r3, #1
 800995e:	e000      	b.n	8009962 <HAL_RCC_OscConfig+0x2b6>
 8009960:	2300      	movs	r3, #0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009966:	4b7f      	ldr	r3, [pc, #508]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996a:	4a7e      	ldr	r2, [pc, #504]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 800996c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009970:	6593      	str	r3, [r2, #88]	; 0x58
 8009972:	4b7c      	ldr	r3, [pc, #496]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800997e:	2301      	movs	r3, #1
 8009980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009982:	4b79      	ldr	r3, [pc, #484]	; (8009b68 <HAL_RCC_OscConfig+0x4bc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998a:	2b00      	cmp	r3, #0
 800998c:	d118      	bne.n	80099c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800998e:	4b76      	ldr	r3, [pc, #472]	; (8009b68 <HAL_RCC_OscConfig+0x4bc>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a75      	ldr	r2, [pc, #468]	; (8009b68 <HAL_RCC_OscConfig+0x4bc>)
 8009994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800999a:	f7fb f9a1 	bl	8004ce0 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a2:	f7fb f99d 	bl	8004ce0 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e183      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099b4:	4b6c      	ldr	r3, [pc, #432]	; (8009b68 <HAL_RCC_OscConfig+0x4bc>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f0      	beq.n	80099a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d108      	bne.n	80099da <HAL_RCC_OscConfig+0x32e>
 80099c8:	4b66      	ldr	r3, [pc, #408]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ce:	4a65      	ldr	r2, [pc, #404]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099d0:	f043 0301 	orr.w	r3, r3, #1
 80099d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80099d8:	e024      	b.n	8009a24 <HAL_RCC_OscConfig+0x378>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d110      	bne.n	8009a04 <HAL_RCC_OscConfig+0x358>
 80099e2:	4b60      	ldr	r3, [pc, #384]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e8:	4a5e      	ldr	r2, [pc, #376]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099ea:	f043 0304 	orr.w	r3, r3, #4
 80099ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80099f2:	4b5c      	ldr	r3, [pc, #368]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f8:	4a5a      	ldr	r2, [pc, #360]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 80099fa:	f043 0301 	orr.w	r3, r3, #1
 80099fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009a02:	e00f      	b.n	8009a24 <HAL_RCC_OscConfig+0x378>
 8009a04:	4b57      	ldr	r3, [pc, #348]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0a:	4a56      	ldr	r2, [pc, #344]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a0c:	f023 0301 	bic.w	r3, r3, #1
 8009a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009a14:	4b53      	ldr	r3, [pc, #332]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1a:	4a52      	ldr	r2, [pc, #328]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a1c:	f023 0304 	bic.w	r3, r3, #4
 8009a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d016      	beq.n	8009a5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7fb f958 	bl	8004ce0 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a32:	e00a      	b.n	8009a4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a34:	f7fb f954 	bl	8004ce0 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e138      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4a:	4b46      	ldr	r3, [pc, #280]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0ed      	beq.n	8009a34 <HAL_RCC_OscConfig+0x388>
 8009a58:	e015      	b.n	8009a86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5a:	f7fb f941 	bl	8004ce0 <HAL_GetTick>
 8009a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a60:	e00a      	b.n	8009a78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a62:	f7fb f93d 	bl	8004ce0 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e121      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a78:	4b3a      	ldr	r3, [pc, #232]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1ed      	bne.n	8009a62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a86:	7ffb      	ldrb	r3, [r7, #31]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d105      	bne.n	8009a98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a8c:	4b35      	ldr	r3, [pc, #212]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a90:	4a34      	ldr	r2, [pc, #208]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d03c      	beq.n	8009b1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01c      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009aac:	4b2d      	ldr	r3, [pc, #180]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ab2:	4a2c      	ldr	r2, [pc, #176]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009abc:	f7fb f910 	bl	8004ce0 <HAL_GetTick>
 8009ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ac4:	f7fb f90c 	bl	8004ce0 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e0f2      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ad6:	4b23      	ldr	r3, [pc, #140]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0ef      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x418>
 8009ae4:	e01b      	b.n	8009b1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ae6:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009aec:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af6:	f7fb f8f3 	bl	8004ce0 <HAL_GetTick>
 8009afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009afc:	e008      	b.n	8009b10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009afe:	f7fb f8ef 	bl	8004ce0 <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e0d5      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009b10:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1ef      	bne.n	8009afe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 80c9 	beq.w	8009cba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f003 030c 	and.w	r3, r3, #12
 8009b30:	2b0c      	cmp	r3, #12
 8009b32:	f000 8083 	beq.w	8009c3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d15e      	bne.n	8009bfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <HAL_RCC_OscConfig+0x4b8>)
 8009b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4a:	f7fb f8c9 	bl	8004ce0 <HAL_GetTick>
 8009b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b50:	e00c      	b.n	8009b6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b52:	f7fb f8c5 	bl	8004ce0 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d905      	bls.n	8009b6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e0ab      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
 8009b64:	40021000 	.word	0x40021000
 8009b68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b6c:	4b55      	ldr	r3, [pc, #340]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1ec      	bne.n	8009b52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b78:	4b52      	ldr	r3, [pc, #328]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	4b52      	ldr	r3, [pc, #328]	; (8009cc8 <HAL_RCC_OscConfig+0x61c>)
 8009b7e:	4013      	ands	r3, r2
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6a11      	ldr	r1, [r2, #32]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b88:	3a01      	subs	r2, #1
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	4311      	orrs	r1, r2
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009b92:	0212      	lsls	r2, r2, #8
 8009b94:	4311      	orrs	r1, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009b9a:	0852      	lsrs	r2, r2, #1
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	0552      	lsls	r2, r2, #21
 8009ba0:	4311      	orrs	r1, r2
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ba6:	0852      	lsrs	r2, r2, #1
 8009ba8:	3a01      	subs	r2, #1
 8009baa:	0652      	lsls	r2, r2, #25
 8009bac:	4311      	orrs	r1, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bb2:	06d2      	lsls	r2, r2, #27
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	4943      	ldr	r1, [pc, #268]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bbc:	4b41      	ldr	r3, [pc, #260]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a40      	ldr	r2, [pc, #256]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bc8:	4b3e      	ldr	r3, [pc, #248]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a3d      	ldr	r2, [pc, #244]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd4:	f7fb f884 	bl	8004ce0 <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bdc:	f7fb f880 	bl	8004ce0 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e066      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bee:	4b35      	ldr	r3, [pc, #212]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f0      	beq.n	8009bdc <HAL_RCC_OscConfig+0x530>
 8009bfa:	e05e      	b.n	8009cba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bfc:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a30      	ldr	r2, [pc, #192]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c08:	f7fb f86a 	bl	8004ce0 <HAL_GetTick>
 8009c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c0e:	e008      	b.n	8009c22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c10:	f7fb f866 	bl	8004ce0 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e04c      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c22:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1f0      	bne.n	8009c10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009c2e:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	4924      	ldr	r1, [pc, #144]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <HAL_RCC_OscConfig+0x620>)
 8009c36:	4013      	ands	r3, r2
 8009c38:	60cb      	str	r3, [r1, #12]
 8009c3a:	e03e      	b.n	8009cba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e039      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009c48:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <HAL_RCC_OscConfig+0x618>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f003 0203 	and.w	r2, r3, #3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d12c      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	3b01      	subs	r3, #1
 8009c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d123      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d11b      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d113      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d109      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d001      	beq.n	8009cba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	40021000 	.word	0x40021000
 8009cc8:	019f800c 	.word	0x019f800c
 8009ccc:	feeefffc 	.word	0xfeeefffc

08009cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e11e      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ce8:	4b91      	ldr	r3, [pc, #580]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d910      	bls.n	8009d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cf6:	4b8e      	ldr	r3, [pc, #568]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f023 020f 	bic.w	r2, r3, #15
 8009cfe:	498c      	ldr	r1, [pc, #560]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d06:	4b8a      	ldr	r3, [pc, #552]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d001      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e106      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d073      	beq.n	8009e0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d129      	bne.n	8009d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d2c:	4b81      	ldr	r3, [pc, #516]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0f4      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009d3c:	f000 f99e 	bl	800a07c <RCC_GetSysClockFreqFromPLLSource>
 8009d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4a7c      	ldr	r2, [pc, #496]	; (8009f38 <HAL_RCC_ClockConfig+0x268>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d93f      	bls.n	8009dca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d4a:	4b7a      	ldr	r3, [pc, #488]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d033      	beq.n	8009dca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d12f      	bne.n	8009dca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d6a:	4b72      	ldr	r3, [pc, #456]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d72:	4a70      	ldr	r2, [pc, #448]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	e024      	b.n	8009dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d107      	bne.n	8009d98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d88:	4b6a      	ldr	r3, [pc, #424]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d109      	bne.n	8009da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0c6      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d98:	4b66      	ldr	r3, [pc, #408]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e0be      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009da8:	f000 f8ce 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 8009dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	4a61      	ldr	r2, [pc, #388]	; (8009f38 <HAL_RCC_ClockConfig+0x268>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d909      	bls.n	8009dca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009db6:	4b5f      	ldr	r3, [pc, #380]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dbe:	4a5d      	ldr	r2, [pc, #372]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009dc6:	2380      	movs	r3, #128	; 0x80
 8009dc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dca:	4b5a      	ldr	r3, [pc, #360]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f023 0203 	bic.w	r2, r3, #3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	4957      	ldr	r1, [pc, #348]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ddc:	f7fa ff80 	bl	8004ce0 <HAL_GetTick>
 8009de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009de2:	e00a      	b.n	8009dfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009de4:	f7fa ff7c 	bl	8004ce0 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e095      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dfa:	4b4e      	ldr	r3, [pc, #312]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 020c 	and.w	r2, r3, #12
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d1eb      	bne.n	8009de4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d023      	beq.n	8009e60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e24:	4b43      	ldr	r3, [pc, #268]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	4a42      	ldr	r2, [pc, #264]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009e2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d007      	beq.n	8009e4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009e3c:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e44:	4a3b      	ldr	r2, [pc, #236]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e4c:	4b39      	ldr	r3, [pc, #228]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	4936      	ldr	r1, [pc, #216]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	608b      	str	r3, [r1, #8]
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d105      	bne.n	8009e72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009e66:	4b33      	ldr	r3, [pc, #204]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	4a32      	ldr	r2, [pc, #200]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e72:	4b2f      	ldr	r3, [pc, #188]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d21d      	bcs.n	8009ebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e80:	4b2b      	ldr	r3, [pc, #172]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f023 020f 	bic.w	r2, r3, #15
 8009e88:	4929      	ldr	r1, [pc, #164]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009e90:	f7fa ff26 	bl	8004ce0 <HAL_GetTick>
 8009e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e96:	e00a      	b.n	8009eae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e98:	f7fa ff22 	bl	8004ce0 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e03b      	b.n	8009f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eae:	4b20      	ldr	r3, [pc, #128]	; (8009f30 <HAL_RCC_ClockConfig+0x260>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d1ed      	bne.n	8009e98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d008      	beq.n	8009eda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ec8:	4b1a      	ldr	r3, [pc, #104]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	4917      	ldr	r1, [pc, #92]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0308 	and.w	r3, r3, #8
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ee6:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	490f      	ldr	r1, [pc, #60]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009efa:	f000 f825 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 8009efe:	4602      	mov	r2, r0
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <HAL_RCC_ClockConfig+0x264>)
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	091b      	lsrs	r3, r3, #4
 8009f06:	f003 030f 	and.w	r3, r3, #15
 8009f0a:	490c      	ldr	r1, [pc, #48]	; (8009f3c <HAL_RCC_ClockConfig+0x26c>)
 8009f0c:	5ccb      	ldrb	r3, [r1, r3]
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	fa22 f303 	lsr.w	r3, r2, r3
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <HAL_RCC_ClockConfig+0x270>)
 8009f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <HAL_RCC_ClockConfig+0x274>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fa fe92 	bl	8004c48 <HAL_InitTick>
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	40022000 	.word	0x40022000
 8009f34:	40021000 	.word	0x40021000
 8009f38:	04c4b400 	.word	0x04c4b400
 8009f3c:	0800c74c 	.word	0x0800c74c
 8009f40:	200001b8 	.word	0x200001b8
 8009f44:	200001bc 	.word	0x200001bc

08009f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009f4e:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 030c 	and.w	r3, r3, #12
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	d102      	bne.n	8009f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f5a:	4b2a      	ldr	r3, [pc, #168]	; (800a004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	e047      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009f60:	4b27      	ldr	r3, [pc, #156]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f003 030c 	and.w	r3, r3, #12
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d102      	bne.n	8009f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f6c:	4b26      	ldr	r3, [pc, #152]	; (800a008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	e03e      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009f72:	4b23      	ldr	r3, [pc, #140]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f003 030c 	and.w	r3, r3, #12
 8009f7a:	2b0c      	cmp	r3, #12
 8009f7c:	d136      	bne.n	8009fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f7e:	4b20      	ldr	r3, [pc, #128]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	091b      	lsrs	r3, r3, #4
 8009f8e:	f003 030f 	and.w	r3, r3, #15
 8009f92:	3301      	adds	r3, #1
 8009f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d10c      	bne.n	8009fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009f9c:	4a1a      	ldr	r2, [pc, #104]	; (800a008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa4:	4a16      	ldr	r2, [pc, #88]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fa6:	68d2      	ldr	r2, [r2, #12]
 8009fa8:	0a12      	lsrs	r2, r2, #8
 8009faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	617b      	str	r3, [r7, #20]
      break;
 8009fb4:	e00c      	b.n	8009fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fb6:	4a13      	ldr	r2, [pc, #76]	; (800a004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbe:	4a10      	ldr	r2, [pc, #64]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fc0:	68d2      	ldr	r2, [r2, #12]
 8009fc2:	0a12      	lsrs	r2, r2, #8
 8009fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fc8:	fb02 f303 	mul.w	r3, r2, r3
 8009fcc:	617b      	str	r3, [r7, #20]
      break;
 8009fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	0e5b      	lsrs	r3, r3, #25
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe8:	613b      	str	r3, [r7, #16]
 8009fea:	e001      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ff0:	693b      	ldr	r3, [r7, #16]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40021000 	.word	0x40021000
 800a004:	00f42400 	.word	0x00f42400
 800a008:	016e3600 	.word	0x016e3600

0800a00c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a010:	4b03      	ldr	r3, [pc, #12]	; (800a020 <HAL_RCC_GetHCLKFreq+0x14>)
 800a012:	681b      	ldr	r3, [r3, #0]
}
 800a014:	4618      	mov	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	200001b8 	.word	0x200001b8

0800a024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a028:	f7ff fff0 	bl	800a00c <HAL_RCC_GetHCLKFreq>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4b06      	ldr	r3, [pc, #24]	; (800a048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	4904      	ldr	r1, [pc, #16]	; (800a04c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a03a:	5ccb      	ldrb	r3, [r1, r3]
 800a03c:	f003 031f 	and.w	r3, r3, #31
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a044:	4618      	mov	r0, r3
 800a046:	bd80      	pop	{r7, pc}
 800a048:	40021000 	.word	0x40021000
 800a04c:	0800c75c 	.word	0x0800c75c

0800a050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a054:	f7ff ffda 	bl	800a00c <HAL_RCC_GetHCLKFreq>
 800a058:	4602      	mov	r2, r0
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	0adb      	lsrs	r3, r3, #11
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	4904      	ldr	r1, [pc, #16]	; (800a078 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a066:	5ccb      	ldrb	r3, [r1, r3]
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a070:	4618      	mov	r0, r3
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40021000 	.word	0x40021000
 800a078:	0800c75c 	.word	0x0800c75c

0800a07c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a082:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a08c:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	091b      	lsrs	r3, r3, #4
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	3301      	adds	r3, #1
 800a098:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d10c      	bne.n	800a0ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0a0:	4a17      	ldr	r2, [pc, #92]	; (800a100 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a8:	4a14      	ldr	r2, [pc, #80]	; (800a0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0aa:	68d2      	ldr	r2, [r2, #12]
 800a0ac:	0a12      	lsrs	r2, r2, #8
 800a0ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	617b      	str	r3, [r7, #20]
    break;
 800a0b8:	e00c      	b.n	800a0d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a0ba:	4a12      	ldr	r2, [pc, #72]	; (800a104 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c2:	4a0e      	ldr	r2, [pc, #56]	; (800a0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0c4:	68d2      	ldr	r2, [r2, #12]
 800a0c6:	0a12      	lsrs	r2, r2, #8
 800a0c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a0cc:	fb02 f303 	mul.w	r3, r2, r3
 800a0d0:	617b      	str	r3, [r7, #20]
    break;
 800a0d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a0d4:	4b09      	ldr	r3, [pc, #36]	; (800a0fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	0e5b      	lsrs	r3, r3, #25
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	3301      	adds	r3, #1
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a0ee:	687b      	ldr	r3, [r7, #4]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	40021000 	.word	0x40021000
 800a100:	016e3600 	.word	0x016e3600
 800a104:	00f42400 	.word	0x00f42400

0800a108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a110:	2300      	movs	r3, #0
 800a112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a114:	2300      	movs	r3, #0
 800a116:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 8098 	beq.w	800a256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a126:	2300      	movs	r3, #0
 800a128:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a12a:	4b43      	ldr	r3, [pc, #268]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10d      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a136:	4b40      	ldr	r3, [pc, #256]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13a:	4a3f      	ldr	r2, [pc, #252]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a13c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a140:	6593      	str	r3, [r2, #88]	; 0x58
 800a142:	4b3d      	ldr	r3, [pc, #244]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a14a:	60bb      	str	r3, [r7, #8]
 800a14c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a14e:	2301      	movs	r3, #1
 800a150:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a152:	4b3a      	ldr	r3, [pc, #232]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a39      	ldr	r2, [pc, #228]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a15e:	f7fa fdbf 	bl	8004ce0 <HAL_GetTick>
 800a162:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a164:	e009      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a166:	f7fa fdbb 	bl	8004ce0 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b02      	cmp	r3, #2
 800a172:	d902      	bls.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	74fb      	strb	r3, [r7, #19]
        break;
 800a178:	e005      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a17a:	4b30      	ldr	r3, [pc, #192]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0ef      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a186:	7cfb      	ldrb	r3, [r7, #19]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d159      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a18c:	4b2a      	ldr	r3, [pc, #168]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a196:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01e      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d019      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1a8:	4b23      	ldr	r3, [pc, #140]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1b4:	4b20      	ldr	r3, [pc, #128]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ba:	4a1f      	ldr	r2, [pc, #124]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1c4:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	4a1b      	ldr	r2, [pc, #108]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1d4:	4a18      	ldr	r2, [pc, #96]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d016      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e6:	f7fa fd7b 	bl	8004ce0 <HAL_GetTick>
 800a1ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1ec:	e00b      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ee:	f7fa fd77 	bl	8004ce0 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d902      	bls.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	74fb      	strb	r3, [r7, #19]
            break;
 800a204:	e006      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a206:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0ec      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a214:	7cfb      	ldrb	r3, [r7, #19]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a228:	4903      	ldr	r1, [pc, #12]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a230:	e008      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a232:	7cfb      	ldrb	r3, [r7, #19]
 800a234:	74bb      	strb	r3, [r7, #18]
 800a236:	e005      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a238:	40021000 	.word	0x40021000
 800a23c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a240:	7cfb      	ldrb	r3, [r7, #19]
 800a242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a244:	7c7b      	ldrb	r3, [r7, #17]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d105      	bne.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a24a:	4ba7      	ldr	r3, [pc, #668]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a24e:	4aa6      	ldr	r2, [pc, #664]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a262:	4ba1      	ldr	r3, [pc, #644]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a268:	f023 0203 	bic.w	r2, r3, #3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	499d      	ldr	r1, [pc, #628]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a284:	4b98      	ldr	r3, [pc, #608]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28a:	f023 020c 	bic.w	r2, r3, #12
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	4995      	ldr	r1, [pc, #596]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a294:	4313      	orrs	r3, r2
 800a296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a2a6:	4b90      	ldr	r3, [pc, #576]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	498c      	ldr	r1, [pc, #560]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00a      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a2c8:	4b87      	ldr	r3, [pc, #540]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	4984      	ldr	r1, [pc, #528]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0310 	and.w	r3, r3, #16
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a2ea:	4b7f      	ldr	r3, [pc, #508]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	497b      	ldr	r1, [pc, #492]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00a      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a30c:	4b76      	ldr	r3, [pc, #472]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	4973      	ldr	r1, [pc, #460]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a32e:	4b6e      	ldr	r3, [pc, #440]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	496a      	ldr	r1, [pc, #424]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a350:	4b65      	ldr	r3, [pc, #404]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4962      	ldr	r1, [pc, #392]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a360:	4313      	orrs	r3, r2
 800a362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00a      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a372:	4b5d      	ldr	r3, [pc, #372]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a380:	4959      	ldr	r1, [pc, #356]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a382:	4313      	orrs	r3, r2
 800a384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a394:	4b54      	ldr	r3, [pc, #336]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a39a:	f023 0203 	bic.w	r2, r3, #3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	4951      	ldr	r1, [pc, #324]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	4948      	ldr	r1, [pc, #288]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d015      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3d8:	4b43      	ldr	r3, [pc, #268]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e6:	4940      	ldr	r1, [pc, #256]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3f6:	d105      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3f8:	4b3b      	ldr	r3, [pc, #236]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	4a3a      	ldr	r2, [pc, #232]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d015      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a410:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	4932      	ldr	r1, [pc, #200]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a420:	4313      	orrs	r3, r2
 800a422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a42e:	d105      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a430:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	4a2c      	ldr	r2, [pc, #176]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a43a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d015      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a448:	4b27      	ldr	r3, [pc, #156]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	4924      	ldr	r1, [pc, #144]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a458:	4313      	orrs	r3, r2
 800a45a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a466:	d105      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a468:	4b1f      	ldr	r3, [pc, #124]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a46e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a472:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d015      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a480:	4b19      	ldr	r3, [pc, #100]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	4916      	ldr	r1, [pc, #88]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a490:	4313      	orrs	r3, r2
 800a492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a49e:	d105      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4a0:	4b11      	ldr	r3, [pc, #68]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	4a10      	ldr	r2, [pc, #64]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d019      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4b8:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c6:	4908      	ldr	r1, [pc, #32]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4d6:	d109      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4d8:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	4a02      	ldr	r2, [pc, #8]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4e2:	60d3      	str	r3, [r2, #12]
 800a4e4:	e002      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a4e6:	bf00      	nop
 800a4e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d015      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a4f8:	4b29      	ldr	r3, [pc, #164]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a506:	4926      	ldr	r1, [pc, #152]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a516:	d105      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a518:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	4a20      	ldr	r2, [pc, #128]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a51e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a522:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d015      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a530:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53e:	4918      	ldr	r1, [pc, #96]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a540:	4313      	orrs	r3, r2
 800a542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a54e:	d105      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a550:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	4a12      	ldr	r2, [pc, #72]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a55a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d015      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a568:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a56a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a56e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	490a      	ldr	r1, [pc, #40]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a586:	d105      	bne.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	4a04      	ldr	r2, [pc, #16]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a58e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a592:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a594:	7cbb      	ldrb	r3, [r7, #18]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	40021000 	.word	0x40021000

0800a5a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e09d      	b.n	800a6f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d108      	bne.n	800a5d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5c6:	d009      	beq.n	800a5dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	61da      	str	r2, [r3, #28]
 800a5ce:	e005      	b.n	800a5dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7f9 fee8 	bl	80043cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a612:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a61c:	d902      	bls.n	800a624 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	e002      	b.n	800a62a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a628:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a632:	d007      	beq.n	800a644 <HAL_SPI_Init+0xa0>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a63c:	d002      	beq.n	800a644 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a654:	431a      	orrs	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	431a      	orrs	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67c:	431a      	orrs	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a686:	ea42 0103 	orr.w	r1, r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	0c1b      	lsrs	r3, r3, #16
 800a6a0:	f003 0204 	and.w	r2, r3, #4
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a6c0:	ea42 0103 	orr.w	r1, r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	69da      	ldr	r2, [r3, #28]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e049      	b.n	800a7a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d106      	bne.n	800a726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7fa f881 	bl	8004828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2202      	movs	r2, #2
 800a72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f000 fb45 	bl	800adc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d001      	beq.n	800a7c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e054      	b.n	800a86a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a26      	ldr	r2, [pc, #152]	; (800a878 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d022      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ea:	d01d      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <HAL_TIM_Base_Start_IT+0xd4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d018      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a21      	ldr	r2, [pc, #132]	; (800a880 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d013      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <HAL_TIM_Base_Start_IT+0xdc>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00e      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <HAL_TIM_Base_Start_IT+0xe0>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d009      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <HAL_TIM_Base_Start_IT+0xe4>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d004      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x80>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1b      	ldr	r2, [pc, #108]	; (800a890 <HAL_TIM_Base_Start_IT+0xe8>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d115      	bne.n	800a854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <HAL_TIM_Base_Start_IT+0xec>)
 800a830:	4013      	ands	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b06      	cmp	r3, #6
 800a838:	d015      	beq.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a840:	d011      	beq.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f042 0201 	orr.w	r2, r2, #1
 800a850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a852:	e008      	b.n	800a866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f042 0201 	orr.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e000      	b.n	800a868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40012c00 	.word	0x40012c00
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40013400 	.word	0x40013400
 800a88c:	40014000 	.word	0x40014000
 800a890:	40015000 	.word	0x40015000
 800a894:	00010007 	.word	0x00010007

0800a898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d020      	beq.n	800a8fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01b      	beq.n	800a8fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0202 	mvn.w	r2, #2
 800a8cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa52 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a8e8:	e005      	b.n	800a8f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa44 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fa55 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d020      	beq.n	800a948 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01b      	beq.n	800a948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0204 	mvn.w	r2, #4
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2202      	movs	r2, #2
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa2c 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa1e 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa2f 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f003 0308 	and.w	r3, r3, #8
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d020      	beq.n	800a994 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f003 0308 	and.w	r3, r3, #8
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01b      	beq.n	800a994 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0208 	mvn.w	r2, #8
 800a964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2204      	movs	r2, #4
 800a96a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa06 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f9f8 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa09 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d020      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01b      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f06f 0210 	mvn.w	r2, #16
 800a9b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2208      	movs	r2, #8
 800a9b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f9e0 	bl	800ad8c <HAL_TIM_IC_CaptureCallback>
 800a9cc:	e005      	b.n	800a9da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f9d2 	bl	800ad78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f9e3 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00c      	beq.n	800aa04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d007      	beq.n	800aa04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f06f 0201 	mvn.w	r2, #1
 800a9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f9b0 	bl	800ad64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d104      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00c      	beq.n	800aa32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d007      	beq.n	800aa32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800aa2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fbbb 	bl	800b1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00c      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d007      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fbb3 	bl	800b1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00c      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f99d 	bl	800adb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f06f 0220 	mvn.w	r2, #32
 800aa96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fb7b 	bl	800b194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800aaba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fb87 	bl	800b1d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fb7f 	bl	800b1e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00c      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ab02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fb77 	bl	800b1f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d007      	beq.n	800ab2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ab26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fb6f 	bl	800b20c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d101      	bne.n	800ab54 <HAL_TIM_ConfigClockSource+0x1c>
 800ab50:	2302      	movs	r3, #2
 800ab52:	e0f6      	b.n	800ad42 <HAL_TIM_ConfigClockSource+0x20a>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ab72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a6f      	ldr	r2, [pc, #444]	; (800ad4c <HAL_TIM_ConfigClockSource+0x214>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	f000 80c1 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ab94:	4a6d      	ldr	r2, [pc, #436]	; (800ad4c <HAL_TIM_ConfigClockSource+0x214>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f200 80c6 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab9c:	4a6c      	ldr	r2, [pc, #432]	; (800ad50 <HAL_TIM_ConfigClockSource+0x218>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f000 80b9 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800aba4:	4a6a      	ldr	r2, [pc, #424]	; (800ad50 <HAL_TIM_ConfigClockSource+0x218>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	f200 80be 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abac:	4a69      	ldr	r2, [pc, #420]	; (800ad54 <HAL_TIM_ConfigClockSource+0x21c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	f000 80b1 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800abb4:	4a67      	ldr	r2, [pc, #412]	; (800ad54 <HAL_TIM_ConfigClockSource+0x21c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f200 80b6 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abbc:	4a66      	ldr	r2, [pc, #408]	; (800ad58 <HAL_TIM_ConfigClockSource+0x220>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	f000 80a9 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800abc4:	4a64      	ldr	r2, [pc, #400]	; (800ad58 <HAL_TIM_ConfigClockSource+0x220>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	f200 80ae 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abcc:	4a63      	ldr	r2, [pc, #396]	; (800ad5c <HAL_TIM_ConfigClockSource+0x224>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	f000 80a1 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800abd4:	4a61      	ldr	r2, [pc, #388]	; (800ad5c <HAL_TIM_ConfigClockSource+0x224>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	f200 80a6 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abdc:	4a60      	ldr	r2, [pc, #384]	; (800ad60 <HAL_TIM_ConfigClockSource+0x228>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	f000 8099 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800abe4:	4a5e      	ldr	r2, [pc, #376]	; (800ad60 <HAL_TIM_ConfigClockSource+0x228>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	f200 809e 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abf0:	f000 8091 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800abf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abf8:	f200 8096 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800abfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac00:	f000 8089 	beq.w	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ac04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac08:	f200 808e 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac10:	d03e      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x158>
 800ac12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac16:	f200 8087 	bhi.w	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac1e:	f000 8086 	beq.w	800ad2e <HAL_TIM_ConfigClockSource+0x1f6>
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	d87f      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac28:	2b70      	cmp	r3, #112	; 0x70
 800ac2a:	d01a      	beq.n	800ac62 <HAL_TIM_ConfigClockSource+0x12a>
 800ac2c:	2b70      	cmp	r3, #112	; 0x70
 800ac2e:	d87b      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac30:	2b60      	cmp	r3, #96	; 0x60
 800ac32:	d050      	beq.n	800acd6 <HAL_TIM_ConfigClockSource+0x19e>
 800ac34:	2b60      	cmp	r3, #96	; 0x60
 800ac36:	d877      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac38:	2b50      	cmp	r3, #80	; 0x50
 800ac3a:	d03c      	beq.n	800acb6 <HAL_TIM_ConfigClockSource+0x17e>
 800ac3c:	2b50      	cmp	r3, #80	; 0x50
 800ac3e:	d873      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac40:	2b40      	cmp	r3, #64	; 0x40
 800ac42:	d058      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x1be>
 800ac44:	2b40      	cmp	r3, #64	; 0x40
 800ac46:	d86f      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	d064      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ac4c:	2b30      	cmp	r3, #48	; 0x30
 800ac4e:	d86b      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d060      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d867      	bhi.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d05c      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d05a      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x1de>
 800ac60:	e062      	b.n	800ad28 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6899      	ldr	r1, [r3, #8]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f000 f9d9 	bl	800b028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	609a      	str	r2, [r3, #8]
      break;
 800ac8e:	e04f      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6899      	ldr	r1, [r3, #8]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f000 f9c2 	bl	800b028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689a      	ldr	r2, [r3, #8]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acb2:	609a      	str	r2, [r3, #8]
      break;
 800acb4:	e03c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	6859      	ldr	r1, [r3, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f000 f934 	bl	800af30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2150      	movs	r1, #80	; 0x50
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f98d 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800acd4:	e02c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	6859      	ldr	r1, [r3, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f000 f953 	bl	800af8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2160      	movs	r1, #96	; 0x60
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f97d 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800acf4:	e01c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f000 f914 	bl	800af30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2140      	movs	r1, #64	; 0x40
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 f96d 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800ad14:	e00c      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f000 f964 	bl	800afee <TIM_ITRx_SetConfig>
      break;
 800ad26:	e003      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ad2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	00100070 	.word	0x00100070
 800ad50:	00100060 	.word	0x00100060
 800ad54:	00100050 	.word	0x00100050
 800ad58:	00100040 	.word	0x00100040
 800ad5c:	00100030 	.word	0x00100030
 800ad60:	00100020 	.word	0x00100020

0800ad64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a4c      	ldr	r2, [pc, #304]	; (800af0c <TIM_Base_SetConfig+0x144>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d017      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade6:	d013      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a49      	ldr	r2, [pc, #292]	; (800af10 <TIM_Base_SetConfig+0x148>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00f      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a48      	ldr	r2, [pc, #288]	; (800af14 <TIM_Base_SetConfig+0x14c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a47      	ldr	r2, [pc, #284]	; (800af18 <TIM_Base_SetConfig+0x150>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d007      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a46      	ldr	r2, [pc, #280]	; (800af1c <TIM_Base_SetConfig+0x154>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d003      	beq.n	800ae10 <TIM_Base_SetConfig+0x48>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a45      	ldr	r2, [pc, #276]	; (800af20 <TIM_Base_SetConfig+0x158>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d108      	bne.n	800ae22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4a39      	ldr	r2, [pc, #228]	; (800af0c <TIM_Base_SetConfig+0x144>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d023      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae30:	d01f      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a36      	ldr	r2, [pc, #216]	; (800af10 <TIM_Base_SetConfig+0x148>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d01b      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a35      	ldr	r2, [pc, #212]	; (800af14 <TIM_Base_SetConfig+0x14c>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d017      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a34      	ldr	r2, [pc, #208]	; (800af18 <TIM_Base_SetConfig+0x150>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d013      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a33      	ldr	r2, [pc, #204]	; (800af1c <TIM_Base_SetConfig+0x154>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d00f      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a33      	ldr	r2, [pc, #204]	; (800af24 <TIM_Base_SetConfig+0x15c>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d00b      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a32      	ldr	r2, [pc, #200]	; (800af28 <TIM_Base_SetConfig+0x160>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d007      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a31      	ldr	r2, [pc, #196]	; (800af2c <TIM_Base_SetConfig+0x164>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d003      	beq.n	800ae72 <TIM_Base_SetConfig+0xaa>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2c      	ldr	r2, [pc, #176]	; (800af20 <TIM_Base_SetConfig+0x158>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d108      	bne.n	800ae84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a18      	ldr	r2, [pc, #96]	; (800af0c <TIM_Base_SetConfig+0x144>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <TIM_Base_SetConfig+0x110>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1a      	ldr	r2, [pc, #104]	; (800af1c <TIM_Base_SetConfig+0x154>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00f      	beq.n	800aed8 <TIM_Base_SetConfig+0x110>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <TIM_Base_SetConfig+0x15c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_Base_SetConfig+0x110>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a19      	ldr	r2, [pc, #100]	; (800af28 <TIM_Base_SetConfig+0x160>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_Base_SetConfig+0x110>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a18      	ldr	r2, [pc, #96]	; (800af2c <TIM_Base_SetConfig+0x164>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_Base_SetConfig+0x110>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a13      	ldr	r2, [pc, #76]	; (800af20 <TIM_Base_SetConfig+0x158>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d103      	bne.n	800aee0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d105      	bne.n	800aefe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f023 0201 	bic.w	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	611a      	str	r2, [r3, #16]
  }
}
 800aefe:	bf00      	nop
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	40012c00 	.word	0x40012c00
 800af10:	40000400 	.word	0x40000400
 800af14:	40000800 	.word	0x40000800
 800af18:	40000c00 	.word	0x40000c00
 800af1c:	40013400 	.word	0x40013400
 800af20:	40015000 	.word	0x40015000
 800af24:	40014000 	.word	0x40014000
 800af28:	40014400 	.word	0x40014400
 800af2c:	40014800 	.word	0x40014800

0800af30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af30:	b480      	push	{r7}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f023 0201 	bic.w	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	011b      	lsls	r3, r3, #4
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	4313      	orrs	r3, r2
 800af64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f023 030a 	bic.w	r3, r3, #10
 800af6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	bf00      	nop
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af8e:	b480      	push	{r7}
 800af90:	b087      	sub	sp, #28
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	f023 0210 	bic.w	r2, r3, #16
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	031b      	lsls	r3, r3, #12
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	621a      	str	r2, [r3, #32]
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	f043 0307 	orr.w	r3, r3, #7
 800b014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	609a      	str	r2, [r3, #8]
}
 800b01c:	bf00      	nop
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	021a      	lsls	r2, r3, #8
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	431a      	orrs	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4313      	orrs	r3, r2
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	4313      	orrs	r3, r2
 800b054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	609a      	str	r2, [r3, #8]
}
 800b05c:	bf00      	nop
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e074      	b.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a34      	ldr	r2, [pc, #208]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d009      	beq.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a33      	ldr	r2, [pc, #204]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d004      	beq.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a31      	ldr	r2, [pc, #196]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d108      	bne.n	800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a21      	ldr	r2, [pc, #132]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d022      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b100:	d01d      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a1f      	ldr	r2, [pc, #124]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d018      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1d      	ldr	r2, [pc, #116]	; (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d013      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00e      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a15      	ldr	r2, [pc, #84]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d009      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a18      	ldr	r2, [pc, #96]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d004      	beq.n	800b13e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a11      	ldr	r2, [pc, #68]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d10c      	bne.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	40012c00 	.word	0x40012c00
 800b17c:	40013400 	.word	0x40013400
 800b180:	40015000 	.word	0x40015000
 800b184:	40000400 	.word	0x40000400
 800b188:	40000800 	.word	0x40000800
 800b18c:	40000c00 	.word	0x40000c00
 800b190:	40014000 	.word	0x40014000

0800b194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e042      	b.n	800b2b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d106      	bne.n	800b24a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7f9 fc01 	bl	8004a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2224      	movs	r2, #36	; 0x24
 800b24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fb24 	bl	800b8b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f825 	bl	800b2c0 <UART_SetConfig>
 800b276:	4603      	mov	r3, r0
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d101      	bne.n	800b280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e01b      	b.n	800b2b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b28e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b29e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0201 	orr.w	r2, r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fba3 	bl	800b9fc <UART_CheckIdleState>
 800b2b6:	4603      	mov	r3, r0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c4:	b08c      	sub	sp, #48	; 0x30
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4baa      	ldr	r3, [pc, #680]	; (800b598 <UART_SetConfig+0x2d8>)
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	6812      	ldr	r2, [r2, #0]
 800b2f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a9f      	ldr	r2, [pc, #636]	; (800b59c <UART_SetConfig+0x2dc>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d004      	beq.n	800b32c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b328:	4313      	orrs	r3, r2
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b336:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	6812      	ldr	r2, [r2, #0]
 800b33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b340:	430b      	orrs	r3, r1
 800b342:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34a:	f023 010f 	bic.w	r1, r3, #15
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	430a      	orrs	r2, r1
 800b358:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a90      	ldr	r2, [pc, #576]	; (800b5a0 <UART_SetConfig+0x2e0>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d125      	bne.n	800b3b0 <UART_SetConfig+0xf0>
 800b364:	4b8f      	ldr	r3, [pc, #572]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d81a      	bhi.n	800b3a8 <UART_SetConfig+0xe8>
 800b372:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <UART_SetConfig+0xb8>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b389 	.word	0x0800b389
 800b37c:	0800b399 	.word	0x0800b399
 800b380:	0800b391 	.word	0x0800b391
 800b384:	0800b3a1 	.word	0x0800b3a1
 800b388:	2301      	movs	r3, #1
 800b38a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b38e:	e116      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b390:	2302      	movs	r3, #2
 800b392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b396:	e112      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b398:	2304      	movs	r3, #4
 800b39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b39e:	e10e      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3a6:	e10a      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3ae:	e106      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a7c      	ldr	r2, [pc, #496]	; (800b5a8 <UART_SetConfig+0x2e8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d138      	bne.n	800b42c <UART_SetConfig+0x16c>
 800b3ba:	4b7a      	ldr	r3, [pc, #488]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c0:	f003 030c 	and.w	r3, r3, #12
 800b3c4:	2b0c      	cmp	r3, #12
 800b3c6:	d82d      	bhi.n	800b424 <UART_SetConfig+0x164>
 800b3c8:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x110>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b405 	.word	0x0800b405
 800b3d4:	0800b425 	.word	0x0800b425
 800b3d8:	0800b425 	.word	0x0800b425
 800b3dc:	0800b425 	.word	0x0800b425
 800b3e0:	0800b415 	.word	0x0800b415
 800b3e4:	0800b425 	.word	0x0800b425
 800b3e8:	0800b425 	.word	0x0800b425
 800b3ec:	0800b425 	.word	0x0800b425
 800b3f0:	0800b40d 	.word	0x0800b40d
 800b3f4:	0800b425 	.word	0x0800b425
 800b3f8:	0800b425 	.word	0x0800b425
 800b3fc:	0800b425 	.word	0x0800b425
 800b400:	0800b41d 	.word	0x0800b41d
 800b404:	2300      	movs	r3, #0
 800b406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b40a:	e0d8      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b40c:	2302      	movs	r3, #2
 800b40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b412:	e0d4      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b41a:	e0d0      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b422:	e0cc      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b42a:	e0c8      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a5e      	ldr	r2, [pc, #376]	; (800b5ac <UART_SetConfig+0x2ec>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d125      	bne.n	800b482 <UART_SetConfig+0x1c2>
 800b436:	4b5b      	ldr	r3, [pc, #364]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b440:	2b30      	cmp	r3, #48	; 0x30
 800b442:	d016      	beq.n	800b472 <UART_SetConfig+0x1b2>
 800b444:	2b30      	cmp	r3, #48	; 0x30
 800b446:	d818      	bhi.n	800b47a <UART_SetConfig+0x1ba>
 800b448:	2b20      	cmp	r3, #32
 800b44a:	d00a      	beq.n	800b462 <UART_SetConfig+0x1a2>
 800b44c:	2b20      	cmp	r3, #32
 800b44e:	d814      	bhi.n	800b47a <UART_SetConfig+0x1ba>
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <UART_SetConfig+0x19a>
 800b454:	2b10      	cmp	r3, #16
 800b456:	d008      	beq.n	800b46a <UART_SetConfig+0x1aa>
 800b458:	e00f      	b.n	800b47a <UART_SetConfig+0x1ba>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b460:	e0ad      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b462:	2302      	movs	r3, #2
 800b464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b468:	e0a9      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b46a:	2304      	movs	r3, #4
 800b46c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b470:	e0a5      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b472:	2308      	movs	r3, #8
 800b474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b478:	e0a1      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b47a:	2310      	movs	r3, #16
 800b47c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b480:	e09d      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a4a      	ldr	r2, [pc, #296]	; (800b5b0 <UART_SetConfig+0x2f0>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d125      	bne.n	800b4d8 <UART_SetConfig+0x218>
 800b48c:	4b45      	ldr	r3, [pc, #276]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b496:	2bc0      	cmp	r3, #192	; 0xc0
 800b498:	d016      	beq.n	800b4c8 <UART_SetConfig+0x208>
 800b49a:	2bc0      	cmp	r3, #192	; 0xc0
 800b49c:	d818      	bhi.n	800b4d0 <UART_SetConfig+0x210>
 800b49e:	2b80      	cmp	r3, #128	; 0x80
 800b4a0:	d00a      	beq.n	800b4b8 <UART_SetConfig+0x1f8>
 800b4a2:	2b80      	cmp	r3, #128	; 0x80
 800b4a4:	d814      	bhi.n	800b4d0 <UART_SetConfig+0x210>
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <UART_SetConfig+0x1f0>
 800b4aa:	2b40      	cmp	r3, #64	; 0x40
 800b4ac:	d008      	beq.n	800b4c0 <UART_SetConfig+0x200>
 800b4ae:	e00f      	b.n	800b4d0 <UART_SetConfig+0x210>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4b6:	e082      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4be:	e07e      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c6:	e07a      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b4c8:	2308      	movs	r3, #8
 800b4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ce:	e076      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b4d0:	2310      	movs	r3, #16
 800b4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d6:	e072      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a35      	ldr	r2, [pc, #212]	; (800b5b4 <UART_SetConfig+0x2f4>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d12a      	bne.n	800b538 <UART_SetConfig+0x278>
 800b4e2:	4b30      	ldr	r3, [pc, #192]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4f0:	d01a      	beq.n	800b528 <UART_SetConfig+0x268>
 800b4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4f6:	d81b      	bhi.n	800b530 <UART_SetConfig+0x270>
 800b4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4fc:	d00c      	beq.n	800b518 <UART_SetConfig+0x258>
 800b4fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b502:	d815      	bhi.n	800b530 <UART_SetConfig+0x270>
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <UART_SetConfig+0x250>
 800b508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50c:	d008      	beq.n	800b520 <UART_SetConfig+0x260>
 800b50e:	e00f      	b.n	800b530 <UART_SetConfig+0x270>
 800b510:	2300      	movs	r3, #0
 800b512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b516:	e052      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b518:	2302      	movs	r3, #2
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b51e:	e04e      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b520:	2304      	movs	r3, #4
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b526:	e04a      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b528:	2308      	movs	r3, #8
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b52e:	e046      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b530:	2310      	movs	r3, #16
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b536:	e042      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a17      	ldr	r2, [pc, #92]	; (800b59c <UART_SetConfig+0x2dc>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d13a      	bne.n	800b5b8 <UART_SetConfig+0x2f8>
 800b542:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <UART_SetConfig+0x2e4>)
 800b544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b54c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b550:	d01a      	beq.n	800b588 <UART_SetConfig+0x2c8>
 800b552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b556:	d81b      	bhi.n	800b590 <UART_SetConfig+0x2d0>
 800b558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b55c:	d00c      	beq.n	800b578 <UART_SetConfig+0x2b8>
 800b55e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b562:	d815      	bhi.n	800b590 <UART_SetConfig+0x2d0>
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <UART_SetConfig+0x2b0>
 800b568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b56c:	d008      	beq.n	800b580 <UART_SetConfig+0x2c0>
 800b56e:	e00f      	b.n	800b590 <UART_SetConfig+0x2d0>
 800b570:	2300      	movs	r3, #0
 800b572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b576:	e022      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b578:	2302      	movs	r3, #2
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b57e:	e01e      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b580:	2304      	movs	r3, #4
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b586:	e01a      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b588:	2308      	movs	r3, #8
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58e:	e016      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b590:	2310      	movs	r3, #16
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b596:	e012      	b.n	800b5be <UART_SetConfig+0x2fe>
 800b598:	cfff69f3 	.word	0xcfff69f3
 800b59c:	40008000 	.word	0x40008000
 800b5a0:	40013800 	.word	0x40013800
 800b5a4:	40021000 	.word	0x40021000
 800b5a8:	40004400 	.word	0x40004400
 800b5ac:	40004800 	.word	0x40004800
 800b5b0:	40004c00 	.word	0x40004c00
 800b5b4:	40005000 	.word	0x40005000
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4aae      	ldr	r2, [pc, #696]	; (800b87c <UART_SetConfig+0x5bc>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	f040 8097 	bne.w	800b6f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d823      	bhi.n	800b61a <UART_SetConfig+0x35a>
 800b5d2:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <UART_SetConfig+0x318>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b5fd 	.word	0x0800b5fd
 800b5dc:	0800b61b 	.word	0x0800b61b
 800b5e0:	0800b605 	.word	0x0800b605
 800b5e4:	0800b61b 	.word	0x0800b61b
 800b5e8:	0800b60b 	.word	0x0800b60b
 800b5ec:	0800b61b 	.word	0x0800b61b
 800b5f0:	0800b61b 	.word	0x0800b61b
 800b5f4:	0800b61b 	.word	0x0800b61b
 800b5f8:	0800b613 	.word	0x0800b613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5fc:	f7fe fd12 	bl	800a024 <HAL_RCC_GetPCLK1Freq>
 800b600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b602:	e010      	b.n	800b626 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b604:	4b9e      	ldr	r3, [pc, #632]	; (800b880 <UART_SetConfig+0x5c0>)
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b608:	e00d      	b.n	800b626 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b60a:	f7fe fc9d 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 800b60e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b610:	e009      	b.n	800b626 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b618:	e005      	b.n	800b626 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8130 	beq.w	800b88e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	4a94      	ldr	r2, [pc, #592]	; (800b884 <UART_SetConfig+0x5c4>)
 800b634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b638:	461a      	mov	r2, r3
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d305      	bcc.n	800b65e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d903      	bls.n	800b666 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b664:	e113      	b.n	800b88e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	2200      	movs	r2, #0
 800b66a:	60bb      	str	r3, [r7, #8]
 800b66c:	60fa      	str	r2, [r7, #12]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	4a84      	ldr	r2, [pc, #528]	; (800b884 <UART_SetConfig+0x5c4>)
 800b674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2200      	movs	r2, #0
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b688:	f7f5 f9e4 	bl	8000a54 <__aeabi_uldivmod>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4610      	mov	r0, r2
 800b692:	4619      	mov	r1, r3
 800b694:	f04f 0200 	mov.w	r2, #0
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	020b      	lsls	r3, r1, #8
 800b69e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6a2:	0202      	lsls	r2, r0, #8
 800b6a4:	6979      	ldr	r1, [r7, #20]
 800b6a6:	6849      	ldr	r1, [r1, #4]
 800b6a8:	0849      	lsrs	r1, r1, #1
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	eb12 0804 	adds.w	r8, r2, r4
 800b6b4:	eb43 0905 	adc.w	r9, r3, r5
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	469a      	mov	sl, r3
 800b6c0:	4693      	mov	fp, r2
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	465b      	mov	r3, fp
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f5 f9c3 	bl	8000a54 <__aeabi_uldivmod>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6dc:	d308      	bcc.n	800b6f0 <UART_SetConfig+0x430>
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6e4:	d204      	bcs.n	800b6f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6a3a      	ldr	r2, [r7, #32]
 800b6ec:	60da      	str	r2, [r3, #12]
 800b6ee:	e0ce      	b.n	800b88e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b6f6:	e0ca      	b.n	800b88e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b700:	d166      	bne.n	800b7d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b706:	2b08      	cmp	r3, #8
 800b708:	d827      	bhi.n	800b75a <UART_SetConfig+0x49a>
 800b70a:	a201      	add	r2, pc, #4	; (adr r2, 800b710 <UART_SetConfig+0x450>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b735 	.word	0x0800b735
 800b714:	0800b73d 	.word	0x0800b73d
 800b718:	0800b745 	.word	0x0800b745
 800b71c:	0800b75b 	.word	0x0800b75b
 800b720:	0800b74b 	.word	0x0800b74b
 800b724:	0800b75b 	.word	0x0800b75b
 800b728:	0800b75b 	.word	0x0800b75b
 800b72c:	0800b75b 	.word	0x0800b75b
 800b730:	0800b753 	.word	0x0800b753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b734:	f7fe fc76 	bl	800a024 <HAL_RCC_GetPCLK1Freq>
 800b738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b73a:	e014      	b.n	800b766 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b73c:	f7fe fc88 	bl	800a050 <HAL_RCC_GetPCLK2Freq>
 800b740:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b742:	e010      	b.n	800b766 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b744:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <UART_SetConfig+0x5c0>)
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b748:	e00d      	b.n	800b766 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b74a:	f7fe fbfd 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 800b74e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b750:	e009      	b.n	800b766 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b758:	e005      	b.n	800b766 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 8090 	beq.w	800b88e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	4a44      	ldr	r2, [pc, #272]	; (800b884 <UART_SetConfig+0x5c4>)
 800b774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b778:	461a      	mov	r2, r3
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b780:	005a      	lsls	r2, r3, #1
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	085b      	lsrs	r3, r3, #1
 800b788:	441a      	add	r2, r3
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	2b0f      	cmp	r3, #15
 800b798:	d916      	bls.n	800b7c8 <UART_SetConfig+0x508>
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a0:	d212      	bcs.n	800b7c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	f023 030f 	bic.w	r3, r3, #15
 800b7aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	085b      	lsrs	r3, r3, #1
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	8bfa      	ldrh	r2, [r7, #30]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	e062      	b.n	800b88e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7ce:	e05e      	b.n	800b88e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d828      	bhi.n	800b82a <UART_SetConfig+0x56a>
 800b7d8:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <UART_SetConfig+0x520>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b805 	.word	0x0800b805
 800b7e4:	0800b80d 	.word	0x0800b80d
 800b7e8:	0800b815 	.word	0x0800b815
 800b7ec:	0800b82b 	.word	0x0800b82b
 800b7f0:	0800b81b 	.word	0x0800b81b
 800b7f4:	0800b82b 	.word	0x0800b82b
 800b7f8:	0800b82b 	.word	0x0800b82b
 800b7fc:	0800b82b 	.word	0x0800b82b
 800b800:	0800b823 	.word	0x0800b823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b804:	f7fe fc0e 	bl	800a024 <HAL_RCC_GetPCLK1Freq>
 800b808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b80a:	e014      	b.n	800b836 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b80c:	f7fe fc20 	bl	800a050 <HAL_RCC_GetPCLK2Freq>
 800b810:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b812:	e010      	b.n	800b836 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b814:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <UART_SetConfig+0x5c0>)
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b818:	e00d      	b.n	800b836 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b81a:	f7fe fb95 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 800b81e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b820:	e009      	b.n	800b836 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b828:	e005      	b.n	800b836 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b834:	bf00      	nop
    }

    if (pclk != 0U)
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d028      	beq.n	800b88e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	4a10      	ldr	r2, [pc, #64]	; (800b884 <UART_SetConfig+0x5c4>)
 800b842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b846:	461a      	mov	r2, r3
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	085b      	lsrs	r3, r3, #1
 800b854:	441a      	add	r2, r3
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	2b0f      	cmp	r3, #15
 800b864:	d910      	bls.n	800b888 <UART_SetConfig+0x5c8>
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86c:	d20c      	bcs.n	800b888 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	b29a      	uxth	r2, r3
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60da      	str	r2, [r3, #12]
 800b878:	e009      	b.n	800b88e <UART_SetConfig+0x5ce>
 800b87a:	bf00      	nop
 800b87c:	40008000 	.word	0x40008000
 800b880:	00f42400 	.word	0x00f42400
 800b884:	0800c764 	.word	0x0800c764
      }
      else
      {
        ret = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2201      	movs	r2, #1
 800b892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2201      	movs	r2, #1
 800b89a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b8aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3730      	adds	r7, #48	; 0x30
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b8b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	f003 0308 	and.w	r3, r3, #8
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00a      	beq.n	800b926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00a      	beq.n	800b948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	430a      	orrs	r2, r1
 800b946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94c:	f003 0310 	and.w	r3, r3, #16
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00a      	beq.n	800b96a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	430a      	orrs	r2, r1
 800b98a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01a      	beq.n	800b9ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b6:	d10a      	bne.n	800b9ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	605a      	str	r2, [r3, #4]
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b098      	sub	sp, #96	; 0x60
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba0c:	f7f9 f968 	bl	8004ce0 <HAL_GetTick>
 800ba10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0308 	and.w	r3, r3, #8
 800ba1c:	2b08      	cmp	r3, #8
 800ba1e:	d12f      	bne.n	800ba80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f88e 	bl	800bb50 <UART_WaitOnFlagUntilTimeout>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d022      	beq.n	800ba80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	e853 3f00 	ldrex	r3, [r3]
 800ba46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	461a      	mov	r2, r3
 800ba56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba58:	647b      	str	r3, [r7, #68]	; 0x44
 800ba5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba60:	e841 2300 	strex	r3, r2, [r1]
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e6      	bne.n	800ba3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e063      	b.n	800bb48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 0304 	and.w	r3, r3, #4
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	d149      	bne.n	800bb22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba96:	2200      	movs	r2, #0
 800ba98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f857 	bl	800bb50 <UART_WaitOnFlagUntilTimeout>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d03c      	beq.n	800bb22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	623b      	str	r3, [r7, #32]
   return(result);
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800babc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac6:	633b      	str	r3, [r7, #48]	; 0x30
 800bac8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e6      	bne.n	800baa8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3308      	adds	r3, #8
 800bae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	60fb      	str	r3, [r7, #12]
   return(result);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f023 0301 	bic.w	r3, r3, #1
 800baf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3308      	adds	r3, #8
 800baf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bafa:	61fa      	str	r2, [r7, #28]
 800bafc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	69b9      	ldr	r1, [r7, #24]
 800bb00:	69fa      	ldr	r2, [r7, #28]
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	617b      	str	r3, [r7, #20]
   return(result);
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e5      	bne.n	800bada <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2220      	movs	r2, #32
 800bb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e012      	b.n	800bb48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2220      	movs	r2, #32
 800bb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3758      	adds	r7, #88	; 0x58
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb60:	e04f      	b.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d04b      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6a:	f7f9 f8b9 	bl	8004ce0 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	69ba      	ldr	r2, [r7, #24]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d302      	bcc.n	800bb80 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e04e      	b.n	800bc22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d037      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d034      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d031      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	f003 0308 	and.w	r3, r3, #8
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d110      	bne.n	800bbce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 f838 	bl	800bc2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e029      	b.n	800bc22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69db      	ldr	r3, [r3, #28]
 800bbd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbdc:	d111      	bne.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f81e 	bl	800bc2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e00f      	b.n	800bc22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	bf0c      	ite	eq
 800bc12:	2301      	moveq	r3, #1
 800bc14:	2300      	movne	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	461a      	mov	r2, r3
 800bc1a:	79fb      	ldrb	r3, [r7, #7]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d0a0      	beq.n	800bb62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b095      	sub	sp, #84	; 0x54
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3a:	e853 3f00 	ldrex	r3, [r3]
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc50:	643b      	str	r3, [r7, #64]	; 0x40
 800bc52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc58:	e841 2300 	strex	r3, r2, [r1]
 800bc5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1e6      	bne.n	800bc32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3308      	adds	r3, #8
 800bc6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc7a:	f023 0301 	bic.w	r3, r3, #1
 800bc7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3308      	adds	r3, #8
 800bc86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e3      	bne.n	800bc64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d118      	bne.n	800bcd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f023 0310 	bic.w	r3, r3, #16
 800bcb8:	647b      	str	r3, [r7, #68]	; 0x44
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc2:	61bb      	str	r3, [r7, #24]
 800bcc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc6:	6979      	ldr	r1, [r7, #20]
 800bcc8:	69ba      	ldr	r2, [r7, #24]
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	613b      	str	r3, [r7, #16]
   return(result);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e6      	bne.n	800bca4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bcea:	bf00      	nop
 800bcec:	3754      	adds	r7, #84	; 0x54
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d101      	bne.n	800bd0c <HAL_UARTEx_DisableFifoMode+0x16>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	e027      	b.n	800bd5c <HAL_UARTEx_DisableFifoMode+0x66>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2224      	movs	r2, #36	; 0x24
 800bd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f022 0201 	bic.w	r2, r2, #1
 800bd32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2220      	movs	r2, #32
 800bd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e02d      	b.n	800bddc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2224      	movs	r2, #36	; 0x24
 800bd8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0201 	bic.w	r2, r2, #1
 800bda6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f84f 	bl	800be60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2220      	movs	r2, #32
 800bdce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e02d      	b.n	800be58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2224      	movs	r2, #36	; 0x24
 800be08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f022 0201 	bic.w	r2, r2, #1
 800be22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f811 	bl	800be60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2220      	movs	r2, #32
 800be4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d108      	bne.n	800be82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be80:	e031      	b.n	800bee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be82:	2308      	movs	r3, #8
 800be84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be86:	2308      	movs	r3, #8
 800be88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	0e5b      	lsrs	r3, r3, #25
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f003 0307 	and.w	r3, r3, #7
 800be98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	0f5b      	lsrs	r3, r3, #29
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f003 0307 	and.w	r3, r3, #7
 800bea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	7b3a      	ldrb	r2, [r7, #12]
 800beae:	4911      	ldr	r1, [pc, #68]	; (800bef4 <UARTEx_SetNbDataToProcess+0x94>)
 800beb0:	5c8a      	ldrb	r2, [r1, r2]
 800beb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800beb6:	7b3a      	ldrb	r2, [r7, #12]
 800beb8:	490f      	ldr	r1, [pc, #60]	; (800bef8 <UARTEx_SetNbDataToProcess+0x98>)
 800beba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bebc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
 800beca:	7b7a      	ldrb	r2, [r7, #13]
 800becc:	4909      	ldr	r1, [pc, #36]	; (800bef4 <UARTEx_SetNbDataToProcess+0x94>)
 800bece:	5c8a      	ldrb	r2, [r1, r2]
 800bed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bed4:	7b7a      	ldrb	r2, [r7, #13]
 800bed6:	4908      	ldr	r1, [pc, #32]	; (800bef8 <UARTEx_SetNbDataToProcess+0x98>)
 800bed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beda:	fb93 f3f2 	sdiv	r3, r3, r2
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	0800c77c 	.word	0x0800c77c
 800bef8:	0800c784 	.word	0x0800c784

0800befc <__libc_init_array>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	4d0d      	ldr	r5, [pc, #52]	; (800bf34 <__libc_init_array+0x38>)
 800bf00:	4c0d      	ldr	r4, [pc, #52]	; (800bf38 <__libc_init_array+0x3c>)
 800bf02:	1b64      	subs	r4, r4, r5
 800bf04:	10a4      	asrs	r4, r4, #2
 800bf06:	2600      	movs	r6, #0
 800bf08:	42a6      	cmp	r6, r4
 800bf0a:	d109      	bne.n	800bf20 <__libc_init_array+0x24>
 800bf0c:	4d0b      	ldr	r5, [pc, #44]	; (800bf3c <__libc_init_array+0x40>)
 800bf0e:	4c0c      	ldr	r4, [pc, #48]	; (800bf40 <__libc_init_array+0x44>)
 800bf10:	f000 f820 	bl	800bf54 <_init>
 800bf14:	1b64      	subs	r4, r4, r5
 800bf16:	10a4      	asrs	r4, r4, #2
 800bf18:	2600      	movs	r6, #0
 800bf1a:	42a6      	cmp	r6, r4
 800bf1c:	d105      	bne.n	800bf2a <__libc_init_array+0x2e>
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf24:	4798      	blx	r3
 800bf26:	3601      	adds	r6, #1
 800bf28:	e7ee      	b.n	800bf08 <__libc_init_array+0xc>
 800bf2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2e:	4798      	blx	r3
 800bf30:	3601      	adds	r6, #1
 800bf32:	e7f2      	b.n	800bf1a <__libc_init_array+0x1e>
 800bf34:	0800c794 	.word	0x0800c794
 800bf38:	0800c794 	.word	0x0800c794
 800bf3c:	0800c794 	.word	0x0800c794
 800bf40:	0800c798 	.word	0x0800c798

0800bf44 <memset>:
 800bf44:	4402      	add	r2, r0
 800bf46:	4603      	mov	r3, r0
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d100      	bne.n	800bf4e <memset+0xa>
 800bf4c:	4770      	bx	lr
 800bf4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf52:	e7f9      	b.n	800bf48 <memset+0x4>

0800bf54 <_init>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	bf00      	nop
 800bf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5a:	bc08      	pop	{r3}
 800bf5c:	469e      	mov	lr, r3
 800bf5e:	4770      	bx	lr

0800bf60 <_fini>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr
